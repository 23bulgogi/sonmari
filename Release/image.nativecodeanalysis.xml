<?xml version="1.0" encoding="UTF-8"?>
<DEFECTS>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image.h</FILENAME>
      <LINE>906</LINE>
      <COLUMN>27</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '+' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '+' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbi__malloc_mad2</FUNCTION>
    <DECORATED>stbi__malloc_mad2</DECORATED>
    <FUNCLINE>903</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image.h</FILENAME>
      <LINE>906</LINE>
      <COLUMN>24</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbi__malloc_mad2</FUNCTION>
    <DECORATED>stbi__malloc_mad2</DECORATED>
    <FUNCLINE>903</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image.h</FILENAME>
      <LINE>912</LINE>
      <COLUMN>29</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '+' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '+' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbi__malloc_mad3</FUNCTION>
    <DECORATED>stbi__malloc_mad3</DECORATED>
    <FUNCLINE>909</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image.h</FILENAME>
      <LINE>912</LINE>
      <COLUMN>26</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbi__malloc_mad3</FUNCTION>
    <DECORATED>stbi__malloc_mad3</DECORATED>
    <FUNCLINE>909</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image.h</FILENAME>
      <LINE>912</LINE>
      <COLUMN>24</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbi__malloc_mad3</FUNCTION>
    <DECORATED>stbi__malloc_mad3</DECORATED>
    <FUNCLINE>909</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image.h</FILENAME>
      <LINE>918</LINE>
      <COLUMN>31</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '+' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '+' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbi__malloc_mad4</FUNCTION>
    <DECORATED>stbi__malloc_mad4</DECORATED>
    <FUNCLINE>915</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image.h</FILENAME>
      <LINE>918</LINE>
      <COLUMN>28</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbi__malloc_mad4</FUNCTION>
    <DECORATED>stbi__malloc_mad4</DECORATED>
    <FUNCLINE>915</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image.h</FILENAME>
      <LINE>918</LINE>
      <COLUMN>26</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbi__malloc_mad4</FUNCTION>
    <DECORATED>stbi__malloc_mad4</DECORATED>
    <FUNCLINE>915</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image.h</FILENAME>
      <LINE>918</LINE>
      <COLUMN>24</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbi__malloc_mad4</FUNCTION>
    <DECORATED>stbi__malloc_mad4</DECORATED>
    <FUNCLINE>915</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image.h</FILENAME>
      <LINE>1023</LINE>
      <COLUMN>51</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbi__convert_8_to_16</FUNCTION>
    <DECORATED>stbi__convert_8_to_16</DECORATED>
    <FUNCLINE>1017</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image.h</FILENAME>
      <LINE>1042</LINE>
      <COLUMN>39</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '-' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '-' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbi__vertical_flip</FUNCTION>
    <DECORATED>stbi__vertical_flip</DECORATED>
    <FUNCLINE>1033</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image.h</FILENAME>
      <LINE>1042</LINE>
      <COLUMN>33</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '-' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '-' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbi__vertical_flip</FUNCTION>
    <DECORATED>stbi__vertical_flip</DECORATED>
    <FUNCLINE>1033</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image.h</FILENAME>
      <LINE>1486</LINE>
      <COLUMN>41</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbi__convert_format</FUNCTION>
    <DECORATED>stbi__convert_format</DECORATED>
    <FUNCLINE>1471</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image.h</FILENAME>
      <LINE>1486</LINE>
      <COLUMN>37</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbi__convert_format</FUNCTION>
    <DECORATED>stbi__convert_format</DECORATED>
    <FUNCLINE>1471</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image.h</FILENAME>
      <LINE>1487</LINE>
      <COLUMN>41</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbi__convert_format</FUNCTION>
    <DECORATED>stbi__convert_format</DECORATED>
    <FUNCLINE>1471</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image.h</FILENAME>
      <LINE>1487</LINE>
      <COLUMN>37</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbi__convert_format</FUNCTION>
    <DECORATED>stbi__convert_format</DECORATED>
    <FUNCLINE>1471</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image.h</FILENAME>
      <LINE>1528</LINE>
      <COLUMN>57</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbi__convert_format16</FUNCTION>
    <DECORATED>stbi__convert_format16</DECORATED>
    <FUNCLINE>1520</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image.h</FILENAME>
      <LINE>1528</LINE>
      <COLUMN>53</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbi__convert_format16</FUNCTION>
    <DECORATED>stbi__convert_format16</DECORATED>
    <FUNCLINE>1520</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image.h</FILENAME>
      <LINE>1528</LINE>
      <COLUMN>49</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbi__convert_format16</FUNCTION>
    <DECORATED>stbi__convert_format16</DECORATED>
    <FUNCLINE>1520</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image.h</FILENAME>
      <LINE>1535</LINE>
      <COLUMN>40</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbi__convert_format16</FUNCTION>
    <DECORATED>stbi__convert_format16</DECORATED>
    <FUNCLINE>1520</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image.h</FILENAME>
      <LINE>1535</LINE>
      <COLUMN>36</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbi__convert_format16</FUNCTION>
    <DECORATED>stbi__convert_format16</DECORATED>
    <FUNCLINE>1520</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image.h</FILENAME>
      <LINE>1536</LINE>
      <COLUMN>40</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbi__convert_format16</FUNCTION>
    <DECORATED>stbi__convert_format16</DECORATED>
    <FUNCLINE>1520</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image.h</FILENAME>
      <LINE>1536</LINE>
      <COLUMN>36</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbi__convert_format16</FUNCTION>
    <DECORATED>stbi__convert_format16</DECORATED>
    <FUNCLINE>1520</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image.h</FILENAME>
      <LINE>1598</LINE>
      <COLUMN>45</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbi__hdr_to_ldr</FUNCTION>
    <DECORATED>stbi__hdr_to_ldr</DECORATED>
    <FUNCLINE>1587</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image.h</FILENAME>
      <LINE>2710</LINE>
      <COLUMN>55</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbi__parse_entropy_coded_data</FUNCTION>
    <DECORATED>stbi__parse_entropy_coded_data</DECORATED>
    <FUNCLINE>2637</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image.h</FILENAME>
      <LINE>2741</LINE>
      <COLUMN>64</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbi__parse_entropy_coded_data</FUNCTION>
    <DECORATED>stbi__parse_entropy_coded_data</DECORATED>
    <FUNCLINE>2637</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image.h</FILENAME>
      <LINE>2655</LINE>
      <COLUMN>75</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbi__parse_entropy_coded_data</FUNCTION>
    <DECORATED>stbi__parse_entropy_coded_data</DECORATED>
    <FUNCLINE>2637</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image.h</FILENAME>
      <LINE>2655</LINE>
      <COLUMN>73</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbi__parse_entropy_coded_data</FUNCTION>
    <DECORATED>stbi__parse_entropy_coded_data</DECORATED>
    <FUNCLINE>2637</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image.h</FILENAME>
      <LINE>2655</LINE>
      <COLUMN>79</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbi__parse_entropy_coded_data</FUNCTION>
    <DECORATED>stbi__parse_entropy_coded_data</DECORATED>
    <FUNCLINE>2637</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image.h</FILENAME>
      <LINE>2683</LINE>
      <COLUMN>82</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbi__parse_entropy_coded_data</FUNCTION>
    <DECORATED>stbi__parse_entropy_coded_data</DECORATED>
    <FUNCLINE>2637</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image.h</FILENAME>
      <LINE>2778</LINE>
      <COLUMN>55</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbi__jpeg_finish</FUNCTION>
    <DECORATED>stbi__jpeg_finish</DECORATED>
    <FUNCLINE>2768</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image.h</FILENAME>
      <LINE>2780</LINE>
      <COLUMN>75</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbi__jpeg_finish</FUNCTION>
    <DECORATED>stbi__jpeg_finish</DECORATED>
    <FUNCLINE>2768</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image.h</FILENAME>
      <LINE>2780</LINE>
      <COLUMN>73</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbi__jpeg_finish</FUNCTION>
    <DECORATED>stbi__jpeg_finish</DECORATED>
    <FUNCLINE>2768</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image.h</FILENAME>
      <LINE>2780</LINE>
      <COLUMN>79</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbi__jpeg_finish</FUNCTION>
    <DECORATED>stbi__jpeg_finish</DECORATED>
    <FUNCLINE>2768</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image.h</FILENAME>
      <LINE>3246</LINE>
      <COLUMN>43</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbi__resample_row_hv_2_simd</FUNCTION>
    <DECORATED>stbi__resample_row_hv_2_simd</DECORATED>
    <FUNCLINE>3189</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image.h</FILENAME>
      <LINE>3667</LINE>
      <COLUMN>28</COLUMN>
    </SFA>
    <DEFECTCODE>6001</DEFECTCODE>
    <DESCRIPTION>초기화되지 않은 메모리 'coutput'을(를) 사용하고 있습니다.</DESCRIPTION>
    <FUNCTION>load_jpeg_image</FUNCTION>
    <DECORATED>load_jpeg_image</DECORATED>
    <FUNCLINE>3524</FUNCLINE>
    <PROBABILITY>1</PROBABILITY>
    <RANK>3</RANK>
    <CATEGORY>
      <RULECATEGORY>mspft</RULECATEGORY>
    </CATEGORY>
    <PATH>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image.h</FILENAME>
        <LINE>3526</LINE>
        <COLUMN>7</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image.h</FILENAME>
        <LINE>3526</LINE>
        <COLUMN>10</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image.h</FILENAME>
        <LINE>3526</LINE>
        <COLUMN>20</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image.h</FILENAME>
        <LINE>3527</LINE>
        <COLUMN>15</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image.h</FILENAME>
        <LINE>3530</LINE>
        <COLUMN>20</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image.h</FILENAME>
        <LINE>3533</LINE>
        <COLUMN>7</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image.h</FILENAME>
        <LINE>3536</LINE>
        <COLUMN>5</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image.h</FILENAME>
        <LINE>3538</LINE>
        <COLUMN>10</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image.h</FILENAME>
        <LINE>3540</LINE>
        <COLUMN>33</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image.h</FILENAME>
        <LINE>3543</LINE>
        <COLUMN>15</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image.h</FILENAME>
        <LINE>3547</LINE>
        <COLUMN>10</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image.h</FILENAME>
        <LINE>3548</LINE>
        <COLUMN>19</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image.h</FILENAME>
        <LINE>3548</LINE>
        <COLUMN>21</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image.h</FILENAME>
        <LINE>3549</LINE>
        <COLUMN>15</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image.h</FILENAME>
        <LINE>3550</LINE>
        <COLUMN>15</COLUMN>
        <KEYEVENT>
          <ID>1</ID>
          <KIND>선언</KIND>
          <IMPORTANCE>Essential</IMPORTANCE>
          <MESSAGE>'coutput'이(가) 초기화되지 않았습니다.</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image.h</FILENAME>
        <LINE>3552</LINE>
        <COLUMN>21</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image.h</FILENAME>
        <LINE>3554</LINE>
        <COLUMN>12</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image.h</FILENAME>
        <LINE>3554</LINE>
        <COLUMN>18</COLUMN>
        <KEYEVENT>
          <ID>2</ID>
          <KIND>분기</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>이 루프 건너뛰기, ('k&lt;decode_n'이(가) false라고 가정)</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image.h</FILENAME>
        <LINE>3577</LINE>
        <COLUMN>13</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image.h</FILENAME>
        <LINE>3578</LINE>
        <COLUMN>10</COLUMN>
        <KEYEVENT>
          <ID>3</ID>
          <KIND>분기</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>이 분기 건너뛰기, ('!output'이(가) false라고 가정)</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image.h</FILENAME>
        <LINE>3581</LINE>
        <COLUMN>12</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image.h</FILENAME>
        <LINE>3581</LINE>
        <COLUMN>18</COLUMN>
        <KEYEVENT>
          <ID>4</ID>
          <KIND>분기</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>이 루프 시작, ('j&lt;z-&gt;s-&gt;img_y' 가정)</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image.h</FILENAME>
        <LINE>3582</LINE>
        <COLUMN>18</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image.h</FILENAME>
        <LINE>3583</LINE>
        <COLUMN>15</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image.h</FILENAME>
        <LINE>3583</LINE>
        <COLUMN>21</COLUMN>
        <KEYEVENT>
          <ID>5</ID>
          <KIND>분기</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>이 루프 건너뛰기, ('k&lt;decode_n'이(가) false라고 가정)</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image.h</FILENAME>
        <LINE>3597</LINE>
        <COLUMN>15</COLUMN>
        <KEYEVENT>
          <ID>6</ID>
          <KIND>분기</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>이 분기 건너뛰기, ('n&gt;=3'이(가) false라고 가정)</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image.h</FILENAME>
        <LINE>3640</LINE>
        <COLUMN>16</COLUMN>
        <KEYEVENT>
          <ID>7</ID>
          <KIND>분기</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>이 분기 건너뛰기, ('is_rgb'이(가) false라고 가정)</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image.h</FILENAME>
        <LINE>3650</LINE>
        <COLUMN>40</COLUMN>
        <KEYEVENT>
          <ID>8</ID>
          <KIND>분기</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>이 분기 건너뛰기, ('&lt;분기 조건&gt;'이(가) false라고 가정)</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image.h</FILENAME>
        <LINE>3660</LINE>
        <COLUMN>40</COLUMN>
        <KEYEVENT>
          <ID>9</ID>
          <KIND>분기</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>이 분기 건너뛰기, ('&lt;분기 조건&gt;'이(가) false라고 가정)</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image.h</FILENAME>
        <LINE>3667</LINE>
        <COLUMN>24</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image.h</FILENAME>
        <LINE>3667</LINE>
        <COLUMN>28</COLUMN>
        <KEYEVENT>
          <ID>10</ID>
          <KIND>사용법</KIND>
          <IMPORTANCE>Essential</IMPORTANCE>
          <MESSAGE>'coutput'이(가) 사용되는데 초기화되지 않았을 수 있습니다.</MESSAGE>
        </KEYEVENT>
      </SFA>
    </PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image.h</FILENAME>
      <LINE>3559</LINE>
      <COLUMN>71</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '+' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '+' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>load_jpeg_image</FUNCTION>
    <DECORATED>load_jpeg_image</DECORATED>
    <FUNCLINE>3524</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image.h</FILENAME>
      <LINE>3582</LINE>
      <COLUMN>49</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>load_jpeg_image</FUNCTION>
    <DECORATED>load_jpeg_image</DECORATED>
    <FUNCLINE>3524</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image.h</FILENAME>
      <LINE>3582</LINE>
      <COLUMN>35</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>load_jpeg_image</FUNCTION>
    <DECORATED>load_jpeg_image</DECORATED>
    <FUNCLINE>3524</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image.h</FILENAME>
      <LINE>4306</LINE>
      <COLUMN>36</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbi__create_png_image_raw</FUNCTION>
    <DECORATED>stbi__create_png_image_raw</DECORATED>
    <FUNCLINE>4281</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image.h</FILENAME>
      <LINE>4315</LINE>
      <COLUMN>17</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbi__create_png_image_raw</FUNCTION>
    <DECORATED>stbi__create_png_image_raw</DECORATED>
    <FUNCLINE>4281</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image.h</FILENAME>
      <LINE>4395</LINE>
      <COLUMN>33</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbi__create_png_image_raw</FUNCTION>
    <DECORATED>stbi__create_png_image_raw</DECORATED>
    <FUNCLINE>4281</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image.h</FILENAME>
      <LINE>4408</LINE>
      <COLUMN>39</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbi__create_png_image_raw</FUNCTION>
    <DECORATED>stbi__create_png_image_raw</DECORATED>
    <FUNCLINE>4281</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image.h</FILENAME>
      <LINE>4409</LINE>
      <COLUMN>39</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbi__create_png_image_raw</FUNCTION>
    <DECORATED>stbi__create_png_image_raw</DECORATED>
    <FUNCLINE>4281</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image.h</FILENAME>
      <LINE>4409</LINE>
      <COLUMN>45</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbi__create_png_image_raw</FUNCTION>
    <DECORATED>stbi__create_png_image_raw</DECORATED>
    <FUNCLINE>4281</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image.h</FILENAME>
      <LINE>4458</LINE>
      <COLUMN>33</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbi__create_png_image_raw</FUNCTION>
    <DECORATED>stbi__create_png_image_raw</DECORATED>
    <FUNCLINE>4281</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image.h</FILENAME>
      <LINE>4521</LINE>
      <COLUMN>47</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbi__create_png_image</FUNCTION>
    <DECORATED>stbi__create_png_image</DECORATED>
    <FUNCLINE>4491</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image.h</FILENAME>
      <LINE>4521</LINE>
      <COLUMN>35</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbi__create_png_image</FUNCTION>
    <DECORATED>stbi__create_png_image</DECORATED>
    <FUNCLINE>4491</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image.h</FILENAME>
      <LINE>4521</LINE>
      <COLUMN>65</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbi__create_png_image</FUNCTION>
    <DECORATED>stbi__create_png_image</DECORATED>
    <FUNCLINE>4491</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image.h</FILENAME>
      <LINE>4522</LINE>
      <COLUMN>38</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbi__create_png_image</FUNCTION>
    <DECORATED>stbi__create_png_image</DECORATED>
    <FUNCLINE>4491</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image.h</FILENAME>
      <LINE>4522</LINE>
      <COLUMN>35</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '+' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '+' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbi__create_png_image</FUNCTION>
    <DECORATED>stbi__create_png_image</DECORATED>
    <FUNCLINE>4491</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image.h</FILENAME>
      <LINE>4522</LINE>
      <COLUMN>33</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbi__create_png_image</FUNCTION>
    <DECORATED>stbi__create_png_image</DECORATED>
    <FUNCLINE>4491</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image.h</FILENAME>
      <LINE>5212</LINE>
      <COLUMN>49</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbi__bmp_load</FUNCTION>
    <DECORATED>stbi__bmp_load</DECORATED>
    <FUNCLINE>5074</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image.h</FILENAME>
      <LINE>5212</LINE>
      <COLUMN>40</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbi__bmp_load</FUNCTION>
    <DECORATED>stbi__bmp_load</DECORATED>
    <FUNCLINE>5074</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image.h</FILENAME>
      <LINE>5213</LINE>
      <COLUMN>52</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbi__bmp_load</FUNCTION>
    <DECORATED>stbi__bmp_load</DECORATED>
    <FUNCLINE>5074</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image.h</FILENAME>
      <LINE>5213</LINE>
      <COLUMN>43</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbi__bmp_load</FUNCTION>
    <DECORATED>stbi__bmp_load</DECORATED>
    <FUNCLINE>5074</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image.h</FILENAME>
      <LINE>5213</LINE>
      <COLUMN>40</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '-' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '-' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbi__bmp_load</FUNCTION>
    <DECORATED>stbi__bmp_load</DECORATED>
    <FUNCLINE>5074</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image.h</FILENAME>
      <LINE>5428</LINE>
      <COLUMN>52</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbi__tga_load</FUNCTION>
    <DECORATED>stbi__tga_load</DECORATED>
    <FUNCLINE>5368</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image.h</FILENAME>
      <LINE>5428</LINE>
      <COLUMN>42</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbi__tga_load</FUNCTION>
    <DECORATED>stbi__tga_load</DECORATED>
    <FUNCLINE>5368</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image.h</FILENAME>
      <LINE>5687</LINE>
      <COLUMN>42</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbi__psd_load</FUNCTION>
    <DECORATED>stbi__psd_load</DECORATED>
    <FUNCLINE>5612</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image.h</FILENAME>
      <LINE>5687</LINE>
      <COLUMN>39</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbi__psd_load</FUNCTION>
    <DECORATED>stbi__psd_load</DECORATED>
    <FUNCLINE>5612</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image.h</FILENAME>
      <LINE>5769</LINE>
      <COLUMN>58</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbi__psd_load</FUNCTION>
    <DECORATED>stbi__psd_load</DECORATED>
    <FUNCLINE>5612</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image.h</FILENAME>
      <LINE>5781</LINE>
      <COLUMN>42</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbi__psd_load</FUNCTION>
    <DECORATED>stbi__psd_load</DECORATED>
    <FUNCLINE>5612</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image.h</FILENAME>
      <LINE>5906</LINE>
      <COLUMN>39</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbi__pic_load_core</FUNCTION>
    <DECORATED>stbi__pic_load_core</DECORATED>
    <FUNCLINE>5873</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image.h</FILENAME>
      <LINE>5906</LINE>
      <COLUMN>33</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbi__pic_load_core</FUNCTION>
    <DECORATED>stbi__pic_load_core</DECORATED>
    <FUNCLINE>5873</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image.h</FILENAME>
      <LINE>6005</LINE>
      <COLUMN>27</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbi__pic_load</FUNCTION>
    <DECORATED>stbi__pic_load</DECORATED>
    <FUNCLINE>5983</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image.h</FILENAME>
      <LINE>6005</LINE>
      <COLUMN>25</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbi__pic_load</FUNCTION>
    <DECORATED>stbi__pic_load</DECORATED>
    <FUNCLINE>5983</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image.h</FILENAME>
      <LINE>6285</LINE>
      <COLUMN>85</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '-' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '-' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbi__gif_load_next</FUNCTION>
    <DECORATED>stbi__gif_load_next</DECORATED>
    <FUNCLINE>6255</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image.h</FILENAME>
      <LINE>6279</LINE>
      <COLUMN>57</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbi__gif_load_next</FUNCTION>
    <DECORATED>stbi__gif_load_next</DECORATED>
    <FUNCLINE>6255</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image.h</FILENAME>
      <LINE>6279</LINE>
      <COLUMN>50</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbi__gif_load_next</FUNCTION>
    <DECORATED>stbi__gif_load_next</DECORATED>
    <FUNCLINE>6255</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image.h</FILENAME>
      <LINE>6275</LINE>
      <COLUMN>57</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbi__gif_load_next</FUNCTION>
    <DECORATED>stbi__gif_load_next</DECORATED>
    <FUNCLINE>6255</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image.h</FILENAME>
      <LINE>6275</LINE>
      <COLUMN>50</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbi__gif_load_next</FUNCTION>
    <DECORATED>stbi__gif_load_next</DECORATED>
    <FUNCLINE>6255</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image.h</FILENAME>
      <LINE>6538</LINE>
      <COLUMN>51</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbi__hdr_load</FUNCTION>
    <DECORATED>stbi__hdr_load</DECORATED>
    <FUNCLINE>6476</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image.h</FILENAME>
      <LINE>6538</LINE>
      <COLUMN>43</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbi__hdr_load</FUNCTION>
    <DECORATED>stbi__hdr_load</DECORATED>
    <FUNCLINE>6476</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image.h</FILENAME>
      <LINE>6538</LINE>
      <COLUMN>66</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbi__hdr_load</FUNCTION>
    <DECORATED>stbi__hdr_load</DECORATED>
    <FUNCLINE>6476</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image.h</FILENAME>
      <LINE>6595</LINE>
      <COLUMN>52</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbi__hdr_load</FUNCTION>
    <DECORATED>stbi__hdr_load</DECORATED>
    <FUNCLINE>6476</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image.h</FILENAME>
      <LINE>6595</LINE>
      <COLUMN>48</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '+' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '+' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbi__hdr_load</FUNCTION>
    <DECORATED>stbi__hdr_load</DECORATED>
    <FUNCLINE>6476</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image.h</FILENAME>
      <LINE>6595</LINE>
      <COLUMN>41</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbi__hdr_load</FUNCTION>
    <DECORATED>stbi__hdr_load</DECORATED>
    <FUNCLINE>6476</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image.h</FILENAME>
      <LINE>6595</LINE>
      <COLUMN>75</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbi__hdr_load</FUNCTION>
    <DECORATED>stbi__hdr_load</DECORATED>
    <FUNCLINE>6476</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image_write.h</FILENAME>
      <LINE>351</LINE>
      <COLUMN>60</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbiw__write_pixels</FUNCTION>
    <DECORATED>stbiw__write_pixels</DECORATED>
    <FUNCLINE>336</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image_write.h</FILENAME>
      <LINE>351</LINE>
      <COLUMN>57</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '+' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '+' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbiw__write_pixels</FUNCTION>
    <DECORATED>stbiw__write_pixels</DECORATED>
    <FUNCLINE>336</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image_write.h</FILENAME>
      <LINE>351</LINE>
      <COLUMN>55</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbiw__write_pixels</FUNCTION>
    <DECORATED>stbiw__write_pixels</DECORATED>
    <FUNCLINE>336</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image_write.h</FILENAME>
      <LINE>419</LINE>
      <COLUMN>62</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbi_write_tga_core</FUNCTION>
    <DECORATED>stbi_write_tga_core</DECORATED>
    <FUNCLINE>401</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image_write.h</FILENAME>
      <LINE>419</LINE>
      <COLUMN>58</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbi_write_tga_core</FUNCTION>
    <DECORATED>stbi_write_tga_core</DECORATED>
    <FUNCLINE>401</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image_write.h</FILENAME>
      <LINE>423</LINE>
      <COLUMN>43</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbi_write_tga_core</FUNCTION>
    <DECORATED>stbi_write_tga_core</DECORATED>
    <FUNCLINE>401</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image_write.h</FILENAME>
      <LINE>429</LINE>
      <COLUMN>50</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbi_write_tga_core</FUNCTION>
    <DECORATED>stbi_write_tga_core</DECORATED>
    <FUNCLINE>401</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image_write.h</FILENAME>
      <LINE>429</LINE>
      <COLUMN>45</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '+' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '+' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbi_write_tga_core</FUNCTION>
    <DECORATED>stbi_write_tga_core</DECORATED>
    <FUNCLINE>401</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image_write.h</FILENAME>
      <LINE>433</LINE>
      <COLUMN>46</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbi_write_tga_core</FUNCTION>
    <DECORATED>stbi_write_tga_core</DECORATED>
    <FUNCLINE>401</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image_write.h</FILENAME>
      <LINE>443</LINE>
      <COLUMN>48</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbi_write_tga_core</FUNCTION>
    <DECORATED>stbi_write_tga_core</DECORATED>
    <FUNCLINE>401</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image_write.h</FILENAME>
      <LINE>456</LINE>
      <COLUMN>74</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbi_write_tga_core</FUNCTION>
    <DECORATED>stbi_write_tga_core</DECORATED>
    <FUNCLINE>401</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image_write.h</FILENAME>
      <LINE>633</LINE>
      <COLUMN>69</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbi_write_hdr_core</FUNCTION>
    <DECORATED>stbi_write_hdr_core</DECORATED>
    <FUNCLINE>617</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image_write.h</FILENAME>
      <LINE>633</LINE>
      <COLUMN>67</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbi_write_hdr_core</FUNCTION>
    <DECORATED>stbi_write_hdr_core</DECORATED>
    <FUNCLINE>617</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image_write.h</FILENAME>
      <LINE>684</LINE>
      <COLUMN>32</COLUMN>
    </SFA>
    <DEFECTCODE>6386</DEFECTCODE>
    <DESCRIPTION>'p'에 쓰는 동안 버퍼 오버런이 발생했습니다.  쓰기 가능한 크기는 'itemsize*m+sizeof(int)*2'바이트인데 실제로는 '8'바이트만 쓸 수 있습니다.</DESCRIPTION>
    <FUNCTION>stbiw__sbgrowf</FUNCTION>
    <DECORATED>stbiw__sbgrowf</DECORATED>
    <FUNCLINE>678</FUNCLINE>
    <PROBABILITY>1</PROBABILITY>
    <RANK>4</RANK>
    <CATEGORY>
      <RULECATEGORY>mspft</RULECATEGORY>
    </CATEGORY>
    <PATH>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>680</LINE>
        <COLUMN>7</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>681</LINE>
        <COLUMN>9</COLUMN>
        <KEYEVENT>
          <ID>1</ID>
          <KIND>선언</KIND>
          <IMPORTANCE>Essential</IMPORTANCE>
          <MESSAGE>'p'이(가) 0바이트 배열입니다.</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>683</LINE>
        <COLUMN>7</COLUMN>
        <KEYEVENT>
          <ID>2</ID>
          <KIND>분기</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>이 분기 시작, ('p' 가정)</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>684</LINE>
        <COLUMN>10</COLUMN>
        <KEYEVENT>
          <ID>3</ID>
          <KIND>분기</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>이 분기 시작, ('!*arr' 가정)</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>684</LINE>
        <COLUMN>32</COLUMN>
        <KEYEVENT>
          <ID>4</ID>
          <KIND>사용법</KIND>
          <IMPORTANCE>Essential</IMPORTANCE>
          <MESSAGE>'p'에 쓰기가 잘못됨, (쓰기 가능한 범위를 벗어남)</MESSAGE>
        </KEYEVENT>
      </SFA>
    </PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image_write.h</FILENAME>
      <LINE>681</LINE>
      <COLUMN>13</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbiw__sbgrowf</FUNCTION>
    <DECORATED>stbiw__sbgrowf</DECORATED>
    <FUNCLINE>678</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image_write.h</FILENAME>
      <LINE>773</LINE>
      <COLUMN>30</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '-' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '-' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbi_zlib_compress</FUNCTION>
    <DECORATED>stbi_zlib_compress</DECORATED>
    <FUNCLINE>745</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image_write.h</FILENAME>
      <LINE>791</LINE>
      <COLUMN>33</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '-' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '-' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbi_zlib_compress</FUNCTION>
    <DECORATED>stbi_zlib_compress</DECORATED>
    <FUNCLINE>745</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image_write.h</FILENAME>
      <LINE>948</LINE>
      <COLUMN>41</COLUMN>
    </SFA>
    <DEFECTCODE>6386</DEFECTCODE>
    <DESCRIPTION>'line_buffer'에 쓰는 동안 버퍼 오버런이 발생했습니다.  쓰기 가능한 크기는 '(unsigned int)x*(unsigned int)n'바이트인데 실제로는 '2'바이트만 쓸 수 있습니다.</DESCRIPTION>
    <FUNCTION>stbi_write_png_to_mem</FUNCTION>
    <DECORATED>stbi_write_png_to_mem</DECORATED>
    <FUNCLINE>914</FUNCLINE>
    <PROBABILITY>1</PROBABILITY>
    <RANK>4</RANK>
    <CATEGORY>
      <RULECATEGORY>mspft</RULECATEGORY>
    </CATEGORY>
    <PATH>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>916</LINE>
        <COLUMN>7</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>917</LINE>
        <COLUMN>17</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>918</LINE>
        <COLUMN>18</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>918</LINE>
        <COLUMN>23</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>918</LINE>
        <COLUMN>27</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>918</LINE>
        <COLUMN>34</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>919</LINE>
        <COLUMN>16</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>920</LINE>
        <COLUMN>7</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>920</LINE>
        <COLUMN>9</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>920</LINE>
        <COLUMN>11</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>920</LINE>
        <COLUMN>13</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>920</LINE>
        <COLUMN>15</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>922</LINE>
        <COLUMN>20</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>925</LINE>
        <COLUMN>8</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>925</LINE>
        <COLUMN>59</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>926</LINE>
        <COLUMN>15</COLUMN>
        <KEYEVENT>
          <ID>1</ID>
          <KIND>선언</KIND>
          <IMPORTANCE>Essential</IMPORTANCE>
          <MESSAGE>'line_buffer'이(가) 배열입니다.</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>926</LINE>
        <COLUMN>58</COLUMN>
        <KEYEVENT>
          <ID>2</ID>
          <KIND>분기</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>이 분기 건너뛰기, ('!line_buffer'이(가) false라고 가정)</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>927</LINE>
        <COLUMN>9</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>927</LINE>
        <COLUMN>15</COLUMN>
        <KEYEVENT>
          <ID>3</ID>
          <KIND>분기</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>이 루프 시작, ('j&lt;y' 가정)</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>928</LINE>
        <COLUMN>17</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>929</LINE>
        <COLUMN>17</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>930</LINE>
        <COLUMN>11</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>931</LINE>
        <COLUMN>10</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>931</LINE>
        <COLUMN>20</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>932</LINE>
        <COLUMN>12</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>932</LINE>
        <COLUMN>18</COLUMN>
        <KEYEVENT>
          <ID>4</ID>
          <KIND>분기</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>이 루프 시작, ('p&lt;2' 가정)</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>933</LINE>
        <COLUMN>15</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>933</LINE>
        <COLUMN>29</COLUMN>
        <KEYEVENT>
          <ID>5</ID>
          <KIND>분기</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>이 루프 시작, ('k&lt;5' 가정)</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>934</LINE>
        <COLUMN>16</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>934</LINE>
        <COLUMN>32</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>935</LINE>
        <COLUMN>27</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>936</LINE>
        <COLUMN>18</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>936</LINE>
        <COLUMN>24</COLUMN>
        <KEYEVENT>
          <ID>6</ID>
          <KIND>분기</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>이 루프 건너뛰기, ('i&lt;n'이(가) false라고 가정)</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>946</LINE>
        <COLUMN>18</COLUMN>
        <KEYEVENT>
          <ID>7</ID>
          <KIND>별칭</KIND>
          <IMPORTANCE>Essential</IMPORTANCE>
          <MESSAGE>(별칭) 'i'이(가) 'n'의 값을 받습니다.</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>946</LINE>
        <COLUMN>24</COLUMN>
        <KEYEVENT>
          <ID>8</ID>
          <KIND>분기</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>이 루프 시작, ('i&lt;x*n' 가정)</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>947</LINE>
        <COLUMN>23</COLUMN>
        <KEYEVENT>
          <ID>9</ID>
          <KIND>분기</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>switch( 'type' )가 case 0: (으)로 확인된다고 가정합니다.</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>948</LINE>
        <COLUMN>18</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>948</LINE>
        <COLUMN>41</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>946</LINE>
        <COLUMN>31</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>946</LINE>
        <COLUMN>24</COLUMN>
        <KEYEVENT>
          <ID>10</ID>
          <KIND>분기</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>이 루프 계속, ('i&lt;x*n' 가정)</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>947</LINE>
        <COLUMN>23</COLUMN>
        <KEYEVENT>
          <ID>11</ID>
          <KIND>분기</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>switch( 'type' )가 case 0: (으)로 확인된다고 가정합니다.</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>948</LINE>
        <COLUMN>18</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>948</LINE>
        <COLUMN>41</COLUMN>
        <KEYEVENT>
          <ID>12</ID>
          <KIND>사용법</KIND>
          <IMPORTANCE>Essential</IMPORTANCE>
          <MESSAGE>'line_buffer'에 쓰기가 잘못됨, (쓰기 가능한 범위를 벗어남)</MESSAGE>
        </KEYEVENT>
      </SFA>
    </PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image_write.h</FILENAME>
      <LINE>959</LINE>
      <COLUMN>19</COLUMN>
    </SFA>
    <DEFECTCODE>6385</DEFECTCODE>
    <DESCRIPTION>'line_buffer'에서 잘못된 데이터를 읽고 있습니다.  읽기 가능한 크기는 '(unsigned int)x*(unsigned int)n'바이트인데 실제로는 '2'바이트만 읽을 수 있습니다.</DESCRIPTION>
    <FUNCTION>stbi_write_png_to_mem</FUNCTION>
    <DECORATED>stbi_write_png_to_mem</DECORATED>
    <FUNCLINE>914</FUNCLINE>
    <PROBABILITY>1</PROBABILITY>
    <RANK>4</RANK>
    <CATEGORY>
      <RULECATEGORY>mspft</RULECATEGORY>
    </CATEGORY>
    <PATH>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>916</LINE>
        <COLUMN>7</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>917</LINE>
        <COLUMN>17</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>918</LINE>
        <COLUMN>18</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>918</LINE>
        <COLUMN>23</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>918</LINE>
        <COLUMN>27</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>918</LINE>
        <COLUMN>34</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>919</LINE>
        <COLUMN>16</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>920</LINE>
        <COLUMN>7</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>920</LINE>
        <COLUMN>9</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>920</LINE>
        <COLUMN>11</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>920</LINE>
        <COLUMN>13</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>920</LINE>
        <COLUMN>15</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>922</LINE>
        <COLUMN>20</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>925</LINE>
        <COLUMN>8</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>925</LINE>
        <COLUMN>59</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>926</LINE>
        <COLUMN>15</COLUMN>
        <KEYEVENT>
          <ID>1</ID>
          <KIND>선언</KIND>
          <IMPORTANCE>Essential</IMPORTANCE>
          <MESSAGE>'line_buffer'이(가) 배열입니다.</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>926</LINE>
        <COLUMN>58</COLUMN>
        <KEYEVENT>
          <ID>2</ID>
          <KIND>분기</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>이 분기 건너뛰기, ('!line_buffer'이(가) false라고 가정)</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>927</LINE>
        <COLUMN>9</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>927</LINE>
        <COLUMN>15</COLUMN>
        <KEYEVENT>
          <ID>3</ID>
          <KIND>분기</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>이 루프 시작, ('j&lt;y' 가정)</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>928</LINE>
        <COLUMN>17</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>929</LINE>
        <COLUMN>17</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>930</LINE>
        <COLUMN>11</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>931</LINE>
        <COLUMN>10</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>931</LINE>
        <COLUMN>20</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>932</LINE>
        <COLUMN>12</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>932</LINE>
        <COLUMN>18</COLUMN>
        <KEYEVENT>
          <ID>4</ID>
          <KIND>분기</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>이 루프 시작, ('p&lt;2' 가정)</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>933</LINE>
        <COLUMN>15</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>933</LINE>
        <COLUMN>29</COLUMN>
        <KEYEVENT>
          <ID>5</ID>
          <KIND>분기</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>이 루프 시작, ('k&lt;5' 가정)</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>934</LINE>
        <COLUMN>16</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>934</LINE>
        <COLUMN>32</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>935</LINE>
        <COLUMN>27</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>936</LINE>
        <COLUMN>18</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>936</LINE>
        <COLUMN>24</COLUMN>
        <KEYEVENT>
          <ID>6</ID>
          <KIND>분기</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>이 루프 건너뛰기, ('i&lt;n'이(가) false라고 가정)</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>946</LINE>
        <COLUMN>18</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>946</LINE>
        <COLUMN>24</COLUMN>
        <KEYEVENT>
          <ID>7</ID>
          <KIND>분기</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>이 루프 건너뛰기, ('i&lt;x*n'이(가) false라고 가정)</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>957</LINE>
        <COLUMN>16</COLUMN>
        <KEYEVENT>
          <ID>8</ID>
          <KIND>분기</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>이 분기 건너뛰기, ('p'이(가) false라고 가정)</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>958</LINE>
        <COLUMN>18</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>958</LINE>
        <COLUMN>24</COLUMN>
        <KEYEVENT>
          <ID>9</ID>
          <KIND>분기</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>이 루프 시작, ('i&lt;x*n' 가정)</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>959</LINE>
        <COLUMN>19</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>958</LINE>
        <COLUMN>31</COLUMN>
        <KEYEVENT>
          <ID>10</ID>
          <KIND>선언</KIND>
          <IMPORTANCE>Essential</IMPORTANCE>
          <MESSAGE>'i'이(가) 1과(와) 같을 수 있습니다.</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>958</LINE>
        <COLUMN>24</COLUMN>
        <KEYEVENT>
          <ID>11</ID>
          <KIND>분기</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>이 루프 계속, ('i&lt;x*n' 가정)</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>959</LINE>
        <COLUMN>19</COLUMN>
        <KEYEVENT>
          <ID>12</ID>
          <KIND>사용법</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>'i'은(는) 'abs'(&lt;no file&gt;:0에서 선언됨)에 대한 입력입니다.</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>959</LINE>
        <COLUMN>19</COLUMN>
        <KEYEVENT>
          <ID>13</ID>
          <KIND>사용법</KIND>
          <IMPORTANCE>Essential</IMPORTANCE>
          <MESSAGE>'line_buffer'에서 읽기가 잘못됨, (읽기 가능한 범위를 벗어남)</MESSAGE>
        </KEYEVENT>
      </SFA>
    </PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image_write.h</FILENAME>
      <LINE>978</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>6386</DEFECTCODE>
    <DESCRIPTION>'o'에 쓰는 동안 버퍼 오버런이 발생했습니다.  쓰기 가능한 크기는 '(unsigned int)8+12+13+12+zlen+(unsigned int)12'바이트인데 실제로는 '8'바이트만 쓸 수 있습니다.</DESCRIPTION>
    <FUNCTION>stbi_write_png_to_mem</FUNCTION>
    <DECORATED>stbi_write_png_to_mem</DECORATED>
    <FUNCLINE>914</FUNCLINE>
    <PROBABILITY>1</PROBABILITY>
    <RANK>4</RANK>
    <CATEGORY>
      <RULECATEGORY>mspft</RULECATEGORY>
    </CATEGORY>
    <PATH>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>916</LINE>
        <COLUMN>7</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>917</LINE>
        <COLUMN>17</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>918</LINE>
        <COLUMN>18</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>918</LINE>
        <COLUMN>23</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>918</LINE>
        <COLUMN>27</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>918</LINE>
        <COLUMN>34</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>919</LINE>
        <COLUMN>16</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>920</LINE>
        <COLUMN>7</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>920</LINE>
        <COLUMN>9</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>920</LINE>
        <COLUMN>11</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>920</LINE>
        <COLUMN>13</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>920</LINE>
        <COLUMN>15</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>922</LINE>
        <COLUMN>20</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>925</LINE>
        <COLUMN>8</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>925</LINE>
        <COLUMN>59</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>926</LINE>
        <COLUMN>15</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>926</LINE>
        <COLUMN>58</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>927</LINE>
        <COLUMN>9</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>927</LINE>
        <COLUMN>15</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>967</LINE>
        <COLUMN>3</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>968</LINE>
        <COLUMN>8</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>969</LINE>
        <COLUMN>3</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>970</LINE>
        <COLUMN>7</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>973</LINE>
        <COLUMN>7</COLUMN>
        <KEYEVENT>
          <ID>1</ID>
          <KIND>선언</KIND>
          <IMPORTANCE>Essential</IMPORTANCE>
          <MESSAGE>'out'이(가) 배열입니다.</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>974</LINE>
        <COLUMN>7</COLUMN>
        <KEYEVENT>
          <ID>2</ID>
          <KIND>분기</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>이 분기 건너뛰기, ('!out'이(가) false라고 가정)</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>975</LINE>
        <COLUMN>12</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>977</LINE>
        <COLUMN>4</COLUMN>
        <KEYEVENT>
          <ID>3</ID>
          <KIND>별칭</KIND>
          <IMPORTANCE>Essential</IMPORTANCE>
          <MESSAGE>(별칭) 'o'이(가) 'out'의 값을 받습니다.</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>978</LINE>
        <COLUMN>3</COLUMN>
        <KEYEVENT>
          <ID>4</ID>
          <KIND>선언</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>'o'은(는) 'memmove'(&lt;no file&gt;:0에서 선언됨)에 대한 In/Out 인수입니다.</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>978</LINE>
        <COLUMN>3</COLUMN>
        <KEYEVENT>
          <ID>5</ID>
          <KIND>사용법</KIND>
          <IMPORTANCE>Essential</IMPORTANCE>
          <MESSAGE>'o'에 쓰기가 잘못됨, (쓰기 가능한 범위를 벗어남)</MESSAGE>
        </KEYEVENT>
      </SFA>
    </PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image_write.h</FILENAME>
      <LINE>935</LINE>
      <COLUMN>52</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbi_write_png_to_mem</FUNCTION>
    <DECORATED>stbi_write_png_to_mem</DECORATED>
    <FUNCLINE>914</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image_write.h</FILENAME>
      <LINE>965</LINE>
      <COLUMN>6</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbi_write_png_to_mem</FUNCTION>
    <DECORATED>stbi_write_png_to_mem</DECORATED>
    <FUNCLINE>914</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image_write.h</FILENAME>
      <LINE>965</LINE>
      <COLUMN>6</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbi_write_png_to_mem</FUNCTION>
    <DECORATED>stbi_write_png_to_mem</DECORATED>
    <FUNCLINE>914</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>image.c</FILENAME>
      <LINE>342</LINE>
      <COLUMN>95</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>draw_detections_v3</FUNCTION>
    <DECORATED>draw_detections_v3</DECORATED>
    <FUNCLINE>329</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>image.c</FILENAME>
      <LINE>347</LINE>
      <COLUMN>102</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>draw_detections_v3</FUNCTION>
    <DECORATED>draw_detections_v3</DECORATED>
    <FUNCLINE>329</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>image.c</FILENAME>
      <LINE>347</LINE>
      <COLUMN>55</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>draw_detections_v3</FUNCTION>
    <DECORATED>draw_detections_v3</DECORATED>
    <FUNCLINE>329</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>image.c</FILENAME>
      <LINE>346</LINE>
      <COLUMN>97</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>draw_detections_v3</FUNCTION>
    <DECORATED>draw_detections_v3</DECORATED>
    <FUNCLINE>329</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>image.c</FILENAME>
      <LINE>346</LINE>
      <COLUMN>57</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '-' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '-' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>draw_detections_v3</FUNCTION>
    <DECORATED>draw_detections_v3</DECORATED>
    <FUNCLINE>329</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>image.c</FILENAME>
      <LINE>345</LINE>
      <COLUMN>97</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>draw_detections_v3</FUNCTION>
    <DECORATED>draw_detections_v3</DECORATED>
    <FUNCLINE>329</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>image.c</FILENAME>
      <LINE>345</LINE>
      <COLUMN>57</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '-' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '-' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>draw_detections_v3</FUNCTION>
    <DECORATED>draw_detections_v3</DECORATED>
    <FUNCLINE>329</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>image.c</FILENAME>
      <LINE>353</LINE>
      <COLUMN>82</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>draw_detections_v3</FUNCTION>
    <DECORATED>draw_detections_v3</DECORATED>
    <FUNCLINE>329</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>image.c</FILENAME>
      <LINE>359</LINE>
      <COLUMN>110</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>draw_detections_v3</FUNCTION>
    <DECORATED>draw_detections_v3</DECORATED>
    <FUNCLINE>329</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>image.c</FILENAME>
      <LINE>359</LINE>
      <COLUMN>63</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>draw_detections_v3</FUNCTION>
    <DECORATED>draw_detections_v3</DECORATED>
    <FUNCLINE>329</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>image.c</FILENAME>
      <LINE>358</LINE>
      <COLUMN>105</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>draw_detections_v3</FUNCTION>
    <DECORATED>draw_detections_v3</DECORATED>
    <FUNCLINE>329</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>image.c</FILENAME>
      <LINE>358</LINE>
      <COLUMN>65</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '-' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '-' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>draw_detections_v3</FUNCTION>
    <DECORATED>draw_detections_v3</DECORATED>
    <FUNCLINE>329</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>image.c</FILENAME>
      <LINE>357</LINE>
      <COLUMN>105</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>draw_detections_v3</FUNCTION>
    <DECORATED>draw_detections_v3</DECORATED>
    <FUNCLINE>329</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>image.c</FILENAME>
      <LINE>357</LINE>
      <COLUMN>65</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '-' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '-' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>draw_detections_v3</FUNCTION>
    <DECORATED>draw_detections_v3</DECORATED>
    <FUNCLINE>329</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>image.c</FILENAME>
      <LINE>511</LINE>
      <COLUMN>55</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>draw_detections</FUNCTION>
    <DECORATED>draw_detections</DECORATED>
    <FUNCLINE>465</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>image.c</FILENAME>
      <LINE>585</LINE>
      <COLUMN>51</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '-' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '-' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>image_distance</FUNCTION>
    <DECORATED>image_distance</DECORATED>
    <FUNCLINE>579</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>image.c</FILENAME>
      <LINE>642</LINE>
      <COLUMN>11</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '-' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '-' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>normalize_image</FUNCTION>
    <DECORATED>normalize_image</DECORATED>
    <FUNCLINE>631</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>image.c</FILENAME>
      <LINE>666</LINE>
      <COLUMN>18</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '-' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '-' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>normalize_image2</FUNCTION>
    <DECORATED>normalize_image2</DECORATED>
    <FUNCLINE>651</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>image.c</FILENAME>
      <LINE>682</LINE>
      <COLUMN>42</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>copy_image_inplace</FUNCTION>
    <DECORATED>copy_image_inplace</DECORATED>
    <FUNCLINE>680</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>image.c</FILENAME>
      <LINE>682</LINE>
      <COLUMN>36</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>copy_image_inplace</FUNCTION>
    <DECORATED>copy_image_inplace</DECORATED>
    <FUNCLINE>680</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>image.c</FILENAME>
      <LINE>688</LINE>
      <COLUMN>42</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>copy_image</FUNCTION>
    <DECORATED>copy_image</DECORATED>
    <FUNCLINE>685</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>image.c</FILENAME>
      <LINE>688</LINE>
      <COLUMN>36</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>copy_image</FUNCTION>
    <DECORATED>copy_image</DECORATED>
    <FUNCLINE>685</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>image.c</FILENAME>
      <LINE>689</LINE>
      <COLUMN>37</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>copy_image</FUNCTION>
    <DECORATED>copy_image</DECORATED>
    <FUNCLINE>685</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>image.c</FILENAME>
      <LINE>689</LINE>
      <COLUMN>33</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>copy_image</FUNCTION>
    <DECORATED>copy_image</DECORATED>
    <FUNCLINE>685</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>image.c</FILENAME>
      <LINE>718</LINE>
      <COLUMN>62</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>save_image_png</FUNCTION>
    <DECORATED>save_image_png</DECORATED>
    <FUNCLINE>713</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>image.c</FILENAME>
      <LINE>718</LINE>
      <COLUMN>55</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>save_image_png</FUNCTION>
    <DECORATED>save_image_png</DECORATED>
    <FUNCLINE>713</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>image.c</FILENAME>
      <LINE>739</LINE>
      <COLUMN>62</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>save_image_options</FUNCTION>
    <DECORATED>save_image_options</DECORATED>
    <FUNCLINE>730</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>image.c</FILENAME>
      <LINE>739</LINE>
      <COLUMN>55</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>save_image_options</FUNCTION>
    <DECORATED>save_image_options</DECORATED>
    <FUNCLINE>730</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>image.c</FILENAME>
      <LINE>797</LINE>
      <COLUMN>37</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_image</FUNCTION>
    <DECORATED>make_image</DECORATED>
    <FUNCLINE>794</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>image.c</FILENAME>
      <LINE>797</LINE>
      <COLUMN>33</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_image</FUNCTION>
    <DECORATED>make_image</DECORATED>
    <FUNCLINE>794</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>image.c</FILENAME>
      <LINE>804</LINE>
      <COLUMN>37</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_random_image</FUNCTION>
    <DECORATED>make_random_image</DECORATED>
    <FUNCLINE>801</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>image.c</FILENAME>
      <LINE>804</LINE>
      <COLUMN>33</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_random_image</FUNCTION>
    <DECORATED>make_random_image</DECORATED>
    <FUNCLINE>801</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>image.c</FILENAME>
      <LINE>843</LINE>
      <COLUMN>63</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>rotate_crop_image</FUNCTION>
    <DECORATED>rotate_crop_image</DECORATED>
    <FUNCLINE>834</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>image.c</FILENAME>
      <LINE>844</LINE>
      <COLUMN>63</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>rotate_crop_image</FUNCTION>
    <DECORATED>rotate_crop_image</DECORATED>
    <FUNCLINE>834</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>image.c</FILENAME>
      <LINE>862</LINE>
      <COLUMN>38</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '-' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '-' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>rotate_image</FUNCTION>
    <DECORATED>rotate_image</DECORATED>
    <FUNCLINE>853</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>image.c</FILENAME>
      <LINE>862</LINE>
      <COLUMN>56</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '-' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '-' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>rotate_image</FUNCTION>
    <DECORATED>rotate_image</DECORATED>
    <FUNCLINE>853</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>image.c</FILENAME>
      <LINE>863</LINE>
      <COLUMN>38</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '-' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '-' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>rotate_image</FUNCTION>
    <DECORATED>rotate_image</DECORATED>
    <FUNCLINE>853</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>image.c</FILENAME>
      <LINE>863</LINE>
      <COLUMN>56</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '-' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '-' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>rotate_image</FUNCTION>
    <DECORATED>rotate_image</DECORATED>
    <FUNCLINE>853</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>image.c</FILENAME>
      <LINE>909</LINE>
      <COLUMN>25</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '+' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '+' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>best_3d_shift_r</FUNCTION>
    <DECORATED>best_3d_shift_r</DECORATED>
    <FUNCLINE>906</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>image.c</FILENAME>
      <LINE>1067</LINE>
      <COLUMN>34</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '-' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '-' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>random_augment_image</FUNCTION>
    <DECORATED>random_augment_image</DECORATED>
    <FUNCLINE>1058</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>image.c</FILENAME>
      <LINE>1068</LINE>
      <COLUMN>27</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '-' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '-' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>random_augment_image</FUNCTION>
    <DECORATED>random_augment_image</DECORATED>
    <FUNCLINE>1058</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>image.c</FILENAME>
      <LINE>1068</LINE>
      <COLUMN>20</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>random_augment_image</FUNCTION>
    <DECORATED>random_augment_image</DECORATED>
    <FUNCLINE>1058</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>image.c</FILENAME>
      <LINE>1333</LINE>
      <COLUMN>61</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>quantize_image</FUNCTION>
    <DECORATED>quantize_image</DECORATED>
    <FUNCLINE>1329</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>image.c</FILENAME>
      <LINE>1375</LINE>
      <COLUMN>28</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '-' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '-' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_attention_image</FUNCTION>
    <DECORATED>make_attention_image</DECORATED>
    <FUNCLINE>1354</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>image.c</FILENAME>
      <LINE>1503</LINE>
      <COLUMN>19</COLUMN>
    </SFA>
    <DEFECTCODE>6031</DEFECTCODE>
    <DESCRIPTION>반환 값이 무시되었습니다. 'getchar'.</DESCRIPTION>
    <FUNCTION>load_image_stb</FUNCTION>
    <DECORATED>load_image_stb</DECORATED>
    <FUNCLINE>1487</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
</DEFECTS>