<?xml version="1.0" encoding="utf-8"?><DEFECTS><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>activations.h</FILENAME>
      <LINE>72</LINE>
      <COLUMN>62</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '+' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '+' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>gelu_activate</FUNCTION>
    <DECORATED>gelu_activate</DECORATED>
    <FUNCLINE>72</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>activations.c</FILENAME>
      <LINE>120</LINE>
      <COLUMN>16</COLUMN>
    </SFA>
    <DEFECTCODE>6993</DEFECTCODE>
    <DESCRIPTION>코드 분석에서 OpenMP 구문이 무시되고 단일 스레드 코드를 분석합니다.</DESCRIPTION>
    <FUNCTION></FUNCTION>
    <DECORATED></DECORATED>
    <FUNCLINE>0</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>activation_layer.c</FILENAME>
      <LINE>21</LINE>
      <COLUMN>37</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_activation_layer</FUNCTION>
    <DECORATED>make_activation_layer</DECORATED>
    <FUNCLINE>12</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>activation_layer.c</FILENAME>
      <LINE>22</LINE>
      <COLUMN>36</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_activation_layer</FUNCTION>
    <DECORATED>make_activation_layer</DECORATED>
    <FUNCLINE>12</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>batchnorm_layer.c</FILENAME>
      <LINE>18</LINE>
      <COLUMN>45</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_batchnorm_layer</FUNCTION>
    <DECORATED>make_batchnorm_layer</DECORATED>
    <FUNCLINE>6</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>batchnorm_layer.c</FILENAME>
      <LINE>18</LINE>
      <COLUMN>41</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_batchnorm_layer</FUNCTION>
    <DECORATED>make_batchnorm_layer</DECORATED>
    <FUNCLINE>6</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>batchnorm_layer.c</FILENAME>
      <LINE>18</LINE>
      <COLUMN>37</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_batchnorm_layer</FUNCTION>
    <DECORATED>make_batchnorm_layer</DECORATED>
    <FUNCLINE>6</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>batchnorm_layer.c</FILENAME>
      <LINE>19</LINE>
      <COLUMN>44</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_batchnorm_layer</FUNCTION>
    <DECORATED>make_batchnorm_layer</DECORATED>
    <FUNCLINE>6</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>batchnorm_layer.c</FILENAME>
      <LINE>19</LINE>
      <COLUMN>40</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_batchnorm_layer</FUNCTION>
    <DECORATED>make_batchnorm_layer</DECORATED>
    <FUNCLINE>6</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>batchnorm_layer.c</FILENAME>
      <LINE>19</LINE>
      <COLUMN>36</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_batchnorm_layer</FUNCTION>
    <DECORATED>make_batchnorm_layer</DECORATED>
    <FUNCLINE>6</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>batchnorm_layer.c</FILENAME>
      <LINE>112</LINE>
      <COLUMN>47</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '+' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '+' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>mean_delta_cpu</FUNCTION>
    <DECORATED>mean_delta_cpu</DECORATED>
    <FUNCLINE>100</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>batchnorm_layer.c</FILENAME>
      <LINE>127</LINE>
      <COLUMN>51</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '+' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '+' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>variance_delta_cpu</FUNCTION>
    <DECORATED>variance_delta_cpu</DECORATED>
    <FUNCLINE>115</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>batchnorm_layer.c</FILENAME>
      <LINE>137</LINE>
      <COLUMN>116</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '-' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '-' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>normalize_delta_cpu</FUNCTION>
    <DECORATED>normalize_delta_cpu</DECORATED>
    <FUNCLINE>130</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>batchnorm_layer.c</FILENAME>
      <LINE>137</LINE>
      <COLUMN>138</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>normalize_delta_cpu</FUNCTION>
    <DECORATED>normalize_delta_cpu</DECORATED>
    <FUNCLINE>130</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>batchnorm_layer.c</FILENAME>
      <LINE>151</LINE>
      <COLUMN>31</COLUMN>
    </SFA>
    <DEFECTCODE>6308</DEFECTCODE>
    <DESCRIPTION>'realloc'는 null 포인터를 반환할 수 있습니다. 'realloc'에 인수로 전달되는 'l-&gt;output'에 null 포인터를 할당하면 원래 메모리 블록에서 누수가 발생할 수 있습니다.</DESCRIPTION>
    <FUNCTION>resize_batchnorm_layer</FUNCTION>
    <DECORATED>resize_batchnorm_layer</DECORATED>
    <FUNCLINE>143</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>batchnorm_layer.c</FILENAME>
      <LINE>152</LINE>
      <COLUMN>30</COLUMN>
    </SFA>
    <DEFECTCODE>6308</DEFECTCODE>
    <DESCRIPTION>'realloc'는 null 포인터를 반환할 수 있습니다. 'realloc'에 인수로 전달되는 'l-&gt;delta'에 null 포인터를 할당하면 원래 메모리 블록에서 누수가 발생할 수 있습니다.</DESCRIPTION>
    <FUNCTION>resize_batchnorm_layer</FUNCTION>
    <DECORATED>resize_batchnorm_layer</DECORATED>
    <FUNCLINE>143</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>blas.c</FILENAME>
      <LINE>38</LINE>
      <COLUMN>48</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>flatten</FUNCTION>
    <DECORATED>flatten</DECORATED>
    <FUNCLINE>36</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>blas.c</FILENAME>
      <LINE>38</LINE>
      <COLUMN>39</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>flatten</FUNCTION>
    <DECORATED>flatten</DECORATED>
    <FUNCLINE>36</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>blas.c</FILENAME>
      <LINE>50</LINE>
      <COLUMN>31</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>flatten</FUNCTION>
    <DECORATED>flatten</DECORATED>
    <FUNCLINE>36</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>blas.c</FILENAME>
      <LINE>50</LINE>
      <COLUMN>24</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>flatten</FUNCTION>
    <DECORATED>flatten</DECORATED>
    <FUNCLINE>36</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>blas.c</FILENAME>
      <LINE>85</LINE>
      <COLUMN>12</COLUMN>
    </SFA>
    <DEFECTCODE>6993</DEFECTCODE>
    <DESCRIPTION>코드 분석에서 OpenMP 구문이 무시되고 단일 스레드 코드를 분석합니다.</DESCRIPTION>
    <FUNCTION></FUNCTION>
    <DECORATED></DECORATED>
    <FUNCLINE>0</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>blas.c</FILENAME>
      <LINE>255</LINE>
      <COLUMN>28</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>mean_cpu</FUNCTION>
    <DECORATED>mean_cpu</DECORATED>
    <FUNCLINE>253</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>blas.c</FILENAME>
      <LINE>271</LINE>
      <COLUMN>38</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '-' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '-' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>variance_cpu</FUNCTION>
    <DECORATED>variance_cpu</DECORATED>
    <FUNCLINE>269</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>blas.c</FILENAME>
      <LINE>271</LINE>
      <COLUMN>28</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>variance_cpu</FUNCTION>
    <DECORATED>variance_cpu</DECORATED>
    <FUNCLINE>269</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>blas.c</FILENAME>
      <LINE>278</LINE>
      <COLUMN>45</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '-' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '-' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>variance_cpu</FUNCTION>
    <DECORATED>variance_cpu</DECORATED>
    <FUNCLINE>269</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>blas.c</FILENAME>
      <LINE>292</LINE>
      <COLUMN>66</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '+' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '+' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>normalize_cpu</FUNCTION>
    <DECORATED>normalize_cpu</DECORATED>
    <FUNCLINE>285</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>blas.c</FILENAME>
      <LINE>292</LINE>
      <COLUMN>37</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '-' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '-' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>normalize_cpu</FUNCTION>
    <DECORATED>normalize_cpu</DECORATED>
    <FUNCLINE>285</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>blas.c</FILENAME>
      <LINE>431</LINE>
      <COLUMN>42</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '-' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '-' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>logistic_x_ent_cpu</FUNCTION>
    <DECORATED>logistic_x_ent_cpu</DECORATED>
    <FUNCLINE>425</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>blas.c</FILENAME>
      <LINE>431</LINE>
      <COLUMN>33</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '-' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '-' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>logistic_x_ent_cpu</FUNCTION>
    <DECORATED>logistic_x_ent_cpu</DECORATED>
    <FUNCLINE>425</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>blas.c</FILENAME>
      <LINE>463</LINE>
      <COLUMN>43</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '-' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '-' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>softmax</FUNCTION>
    <DECORATED>softmax</DECORATED>
    <FUNCLINE>454</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>blas.c</FILENAME>
      <LINE>478</LINE>
      <COLUMN>29</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>softmax_cpu</FUNCTION>
    <DECORATED>softmax_cpu</DECORATED>
    <FUNCLINE>473</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>blas.c</FILENAME>
      <LINE>478</LINE>
      <COLUMN>46</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>softmax_cpu</FUNCTION>
    <DECORATED>softmax_cpu</DECORATED>
    <FUNCLINE>473</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>blas.c</FILENAME>
      <LINE>478</LINE>
      <COLUMN>80</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>softmax_cpu</FUNCTION>
    <DECORATED>softmax_cpu</DECORATED>
    <FUNCLINE>473</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>blas.c</FILENAME>
      <LINE>478</LINE>
      <COLUMN>97</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>softmax_cpu</FUNCTION>
    <DECORATED>softmax_cpu</DECORATED>
    <FUNCLINE>473</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>blas.c</FILENAME>
      <LINE>597</LINE>
      <COLUMN>14</COLUMN>
    </SFA>
    <DEFECTCODE>6328</DEFECTCODE>
    <DESCRIPTION>크기 불일치: 'unsigned __int64'이(가) _Param_(2)으로 전달되었습니다. 다음 호출에는 'int'이(가) 필요합니다. 'printf'. </DESCRIPTION>
    <FUNCTION>find_sim</FUNCTION>
    <DECORATED>find_sim</DECORATED>
    <FUNCLINE>590</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>blas.c</FILENAME>
      <LINE>598</LINE>
      <COLUMN>15</COLUMN>
    </SFA>
    <DEFECTCODE>6031</DEFECTCODE>
    <DESCRIPTION>반환 값이 무시되었습니다. 'getchar'.</DESCRIPTION>
    <FUNCTION>find_sim</FUNCTION>
    <DECORATED>find_sim</DECORATED>
    <FUNCLINE>590</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>blas.c</FILENAME>
      <LINE>611</LINE>
      <COLUMN>14</COLUMN>
    </SFA>
    <DEFECTCODE>6328</DEFECTCODE>
    <DESCRIPTION>크기 불일치: 'unsigned __int64'이(가) _Param_(2)으로 전달되었습니다. 다음 호출에는 'int'이(가) 필요합니다. 'printf'. </DESCRIPTION>
    <FUNCTION>find_P_constrastive</FUNCTION>
    <DECORATED>find_P_constrastive</DECORATED>
    <FUNCLINE>604</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>blas.c</FILENAME>
      <LINE>612</LINE>
      <COLUMN>15</COLUMN>
    </SFA>
    <DEFECTCODE>6031</DEFECTCODE>
    <DESCRIPTION>반환 값이 무시되었습니다. 'getchar'.</DESCRIPTION>
    <FUNCTION>find_P_constrastive</FUNCTION>
    <DECORATED>find_P_constrastive</DECORATED>
    <FUNCLINE>604</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>blas.c</FILENAME>
      <LINE>651</LINE>
      <COLUMN>15</COLUMN>
    </SFA>
    <DEFECTCODE>6328</DEFECTCODE>
    <DESCRIPTION>크기 불일치: 'unsigned __int64'이(가) _Param_(3)으로 전달되었습니다. 다음 호출에는 'int'이(가) 필요합니다. 'fprintf'. </DESCRIPTION>
    <FUNCTION>P_constrastive_f</FUNCTION>
    <DECORATED>P_constrastive_f</DECORATED>
    <FUNCLINE>648</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>blas.c</FILENAME>
      <LINE>652</LINE>
      <COLUMN>15</COLUMN>
    </SFA>
    <DEFECTCODE>6031</DEFECTCODE>
    <DESCRIPTION>반환 값이 무시되었습니다. 'getchar'.</DESCRIPTION>
    <FUNCTION>P_constrastive_f</FUNCTION>
    <DECORATED>P_constrastive_f</DECORATED>
    <FUNCLINE>648</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>blas.c</FILENAME>
      <LINE>689</LINE>
      <COLUMN>15</COLUMN>
    </SFA>
    <DEFECTCODE>6031</DEFECTCODE>
    <DESCRIPTION>반환 값이 무시되었습니다. 'getchar'.</DESCRIPTION>
    <FUNCTION>grad_contrastive_loss_positive_f</FUNCTION>
    <DECORATED>grad_contrastive_loss_positive_f</DECORATED>
    <FUNCLINE>678</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>blas.c</FILENAME>
      <LINE>735</LINE>
      <COLUMN>15</COLUMN>
    </SFA>
    <DEFECTCODE>6031</DEFECTCODE>
    <DESCRIPTION>반환 값이 무시되었습니다. 'getchar'.</DESCRIPTION>
    <FUNCTION>grad_contrastive_loss_negative_f</FUNCTION>
    <DECORATED>grad_contrastive_loss_negative_f</DECORATED>
    <FUNCLINE>724</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>blas.c</FILENAME>
      <LINE>785</LINE>
      <COLUMN>15</COLUMN>
    </SFA>
    <DEFECTCODE>6328</DEFECTCODE>
    <DESCRIPTION>크기 불일치: 'unsigned __int64'이(가) _Param_(3)으로 전달되었습니다. 다음 호출에는 'int'이(가) 필요합니다. 'fprintf'. </DESCRIPTION>
    <FUNCTION>P_constrastive</FUNCTION>
    <DECORATED>P_constrastive</DECORATED>
    <FUNCLINE>782</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>blas.c</FILENAME>
      <LINE>786</LINE>
      <COLUMN>15</COLUMN>
    </SFA>
    <DEFECTCODE>6031</DEFECTCODE>
    <DESCRIPTION>반환 값이 무시되었습니다. 'getchar'.</DESCRIPTION>
    <FUNCTION>P_constrastive</FUNCTION>
    <DECORATED>P_constrastive</DECORATED>
    <FUNCLINE>782</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>blas.c</FILENAME>
      <LINE>823</LINE>
      <COLUMN>15</COLUMN>
    </SFA>
    <DEFECTCODE>6031</DEFECTCODE>
    <DESCRIPTION>반환 값이 무시되었습니다. 'getchar'.</DESCRIPTION>
    <FUNCTION>grad_contrastive_loss_positive</FUNCTION>
    <DECORATED>grad_contrastive_loss_positive</DECORATED>
    <FUNCLINE>813</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>blas.c</FILENAME>
      <LINE>863</LINE>
      <COLUMN>15</COLUMN>
    </SFA>
    <DEFECTCODE>6031</DEFECTCODE>
    <DESCRIPTION>반환 값이 무시되었습니다. 'getchar'.</DESCRIPTION>
    <FUNCTION>grad_contrastive_loss_negative</FUNCTION>
    <DECORATED>grad_contrastive_loss_negative</DECORATED>
    <FUNCLINE>853</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>box.c</FILENAME>
      <LINE>103</LINE>
      <COLUMN>22</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '-' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '-' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>box_c</FUNCTION>
    <DECORATED>box_c</DECORATED>
    <FUNCLINE>101</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>box.c</FILENAME>
      <LINE>103</LINE>
      <COLUMN>37</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '-' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '-' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>box_c</FUNCTION>
    <DECORATED>box_c</DECORATED>
    <FUNCLINE>101</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>box.c</FILENAME>
      <LINE>104</LINE>
      <COLUMN>22</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '+' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '+' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>box_c</FUNCTION>
    <DECORATED>box_c</DECORATED>
    <FUNCLINE>101</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>box.c</FILENAME>
      <LINE>104</LINE>
      <COLUMN>37</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '+' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '+' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>box_c</FUNCTION>
    <DECORATED>box_c</DECORATED>
    <FUNCLINE>101</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>box.c</FILENAME>
      <LINE>105</LINE>
      <COLUMN>23</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '-' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '-' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>box_c</FUNCTION>
    <DECORATED>box_c</DECORATED>
    <FUNCLINE>101</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>box.c</FILENAME>
      <LINE>105</LINE>
      <COLUMN>38</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '-' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '-' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>box_c</FUNCTION>
    <DECORATED>box_c</DECORATED>
    <FUNCLINE>101</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>box.c</FILENAME>
      <LINE>106</LINE>
      <COLUMN>24</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '+' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '+' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>box_c</FUNCTION>
    <DECORATED>box_c</DECORATED>
    <FUNCLINE>101</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>box.c</FILENAME>
      <LINE>106</LINE>
      <COLUMN>39</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '+' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '+' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>box_c</FUNCTION>
    <DECORATED>box_c</DECORATED>
    <FUNCLINE>101</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>box.c</FILENAME>
      <LINE>250</LINE>
      <COLUMN>37</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '+' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '+' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>box_ciou</FUNCTION>
    <DECORATED>box_ciou</DECORATED>
    <FUNCLINE>235</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>box.c</FILENAME>
      <LINE>250</LINE>
      <COLUMN>31</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '-' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '-' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>box_ciou</FUNCTION>
    <DECORATED>box_ciou</DECORATED>
    <FUNCLINE>235</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>box.c</FILENAME>
      <LINE>356</LINE>
      <COLUMN>27</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '-' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '-' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>dx_box_iou</FUNCTION>
    <DECORATED>dx_box_iou</DECORATED>
    <FUNCLINE>258</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>box.c</FILENAME>
      <LINE>356</LINE>
      <COLUMN>48</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '-' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '-' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>dx_box_iou</FUNCTION>
    <DECORATED>dx_box_iou</DECORATED>
    <FUNCLINE>258</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>box.c</FILENAME>
      <LINE>357</LINE>
      <COLUMN>27</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '+' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '+' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>dx_box_iou</FUNCTION>
    <DECORATED>dx_box_iou</DECORATED>
    <FUNCLINE>258</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>box.c</FILENAME>
      <LINE>357</LINE>
      <COLUMN>48</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '+' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '+' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>dx_box_iou</FUNCTION>
    <DECORATED>dx_box_iou</DECORATED>
    <FUNCLINE>258</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>box.c</FILENAME>
      <LINE>358</LINE>
      <COLUMN>27</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '-' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '-' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>dx_box_iou</FUNCTION>
    <DECORATED>dx_box_iou</DECORATED>
    <FUNCLINE>258</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>box.c</FILENAME>
      <LINE>358</LINE>
      <COLUMN>48</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '-' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '-' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>dx_box_iou</FUNCTION>
    <DECORATED>dx_box_iou</DECORATED>
    <FUNCLINE>258</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>box.c</FILENAME>
      <LINE>359</LINE>
      <COLUMN>27</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '+' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '+' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>dx_box_iou</FUNCTION>
    <DECORATED>dx_box_iou</DECORATED>
    <FUNCLINE>258</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>box.c</FILENAME>
      <LINE>359</LINE>
      <COLUMN>48</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '+' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '+' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>dx_box_iou</FUNCTION>
    <DECORATED>dx_box_iou</DECORATED>
    <FUNCLINE>258</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>box.c</FILENAME>
      <LINE>434</LINE>
      <COLUMN>34</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '+' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '+' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>dx_box_iou</FUNCTION>
    <DECORATED>dx_box_iou</DECORATED>
    <FUNCLINE>258</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>box.c</FILENAME>
      <LINE>434</LINE>
      <COLUMN>28</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '-' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '-' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>dx_box_iou</FUNCTION>
    <DECORATED>dx_box_iou</DECORATED>
    <FUNCLINE>258</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>box.c</FILENAME>
      <LINE>582</LINE>
      <COLUMN>23</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '-' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '-' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>box_rmse</FUNCTION>
    <DECORATED>box_rmse</DECORATED>
    <FUNCLINE>580</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>box.c</FILENAME>
      <LINE>583</LINE>
      <COLUMN>23</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '-' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '-' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>box_rmse</FUNCTION>
    <DECORATED>box_rmse</DECORATED>
    <FUNCLINE>580</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>box.c</FILENAME>
      <LINE>584</LINE>
      <COLUMN>23</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '-' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '-' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>box_rmse</FUNCTION>
    <DECORATED>box_rmse</DECORATED>
    <FUNCLINE>580</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>box.c</FILENAME>
      <LINE>585</LINE>
      <COLUMN>23</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '-' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '-' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>box_rmse</FUNCTION>
    <DECORATED>box_rmse</DECORATED>
    <FUNCLINE>580</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>box.c</FILENAME>
      <LINE>633</LINE>
      <COLUMN>21</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '-' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '-' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>test_dunion</FUNCTION>
    <DECORATED>test_dunion</DECORATED>
    <FUNCLINE>617</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>box.c</FILENAME>
      <LINE>634</LINE>
      <COLUMN>21</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '-' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '-' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>test_dunion</FUNCTION>
    <DECORATED>test_dunion</DECORATED>
    <FUNCLINE>617</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>box.c</FILENAME>
      <LINE>635</LINE>
      <COLUMN>21</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '-' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '-' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>test_dunion</FUNCTION>
    <DECORATED>test_dunion</DECORATED>
    <FUNCLINE>617</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>box.c</FILENAME>
      <LINE>636</LINE>
      <COLUMN>21</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '-' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '-' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>test_dunion</FUNCTION>
    <DECORATED>test_dunion</DECORATED>
    <FUNCLINE>617</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>box.c</FILENAME>
      <LINE>655</LINE>
      <COLUMN>21</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '-' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '-' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>test_dintersect</FUNCTION>
    <DECORATED>test_dintersect</DECORATED>
    <FUNCLINE>639</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>box.c</FILENAME>
      <LINE>656</LINE>
      <COLUMN>21</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '-' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '-' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>test_dintersect</FUNCTION>
    <DECORATED>test_dintersect</DECORATED>
    <FUNCLINE>639</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>box.c</FILENAME>
      <LINE>657</LINE>
      <COLUMN>21</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '-' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '-' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>test_dintersect</FUNCTION>
    <DECORATED>test_dintersect</DECORATED>
    <FUNCLINE>639</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>box.c</FILENAME>
      <LINE>658</LINE>
      <COLUMN>21</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '-' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '-' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>test_dintersect</FUNCTION>
    <DECORATED>test_dintersect</DECORATED>
    <FUNCLINE>639</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>box.c</FILENAME>
      <LINE>684</LINE>
      <COLUMN>30</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '-' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '-' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>test_box</FUNCTION>
    <DECORATED>test_box</DECORATED>
    <FUNCLINE>662</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>box.c</FILENAME>
      <LINE>684</LINE>
      <COLUMN>20</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>test_box</FUNCTION>
    <DECORATED>test_box</DECORATED>
    <FUNCLINE>662</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>box.c</FILENAME>
      <LINE>684</LINE>
      <COLUMN>14</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '-' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '-' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>test_box</FUNCTION>
    <DECORATED>test_box</DECORATED>
    <FUNCLINE>662</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>box.c</FILENAME>
      <LINE>685</LINE>
      <COLUMN>30</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '-' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '-' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>test_box</FUNCTION>
    <DECORATED>test_box</DECORATED>
    <FUNCLINE>662</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>box.c</FILENAME>
      <LINE>685</LINE>
      <COLUMN>20</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>test_box</FUNCTION>
    <DECORATED>test_box</DECORATED>
    <FUNCLINE>662</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>box.c</FILENAME>
      <LINE>685</LINE>
      <COLUMN>14</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '-' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '-' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>test_box</FUNCTION>
    <DECORATED>test_box</DECORATED>
    <FUNCLINE>662</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>box.c</FILENAME>
      <LINE>686</LINE>
      <COLUMN>30</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '-' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '-' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>test_box</FUNCTION>
    <DECORATED>test_box</DECORATED>
    <FUNCLINE>662</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>box.c</FILENAME>
      <LINE>686</LINE>
      <COLUMN>20</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>test_box</FUNCTION>
    <DECORATED>test_box</DECORATED>
    <FUNCLINE>662</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>box.c</FILENAME>
      <LINE>686</LINE>
      <COLUMN>14</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '-' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '-' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>test_box</FUNCTION>
    <DECORATED>test_box</DECORATED>
    <FUNCLINE>662</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>box.c</FILENAME>
      <LINE>687</LINE>
      <COLUMN>30</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '-' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '-' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>test_box</FUNCTION>
    <DECORATED>test_box</DECORATED>
    <FUNCLINE>662</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>box.c</FILENAME>
      <LINE>687</LINE>
      <COLUMN>20</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>test_box</FUNCTION>
    <DECORATED>test_box</DECORATED>
    <FUNCLINE>662</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>box.c</FILENAME>
      <LINE>687</LINE>
      <COLUMN>14</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '-' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '-' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>test_box</FUNCTION>
    <DECORATED>test_box</DECORATED>
    <FUNCLINE>662</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>captcha.c</FILENAME>
      <LINE>88</LINE>
      <COLUMN>14</COLUMN>
    </SFA>
    <DEFECTCODE>6328</DEFECTCODE>
    <DESCRIPTION>크기 불일치: 'unsigned __int64'이(가) _Param_(6)으로 전달되었습니다. 다음 호출에는 'int'이(가) 필요합니다. 'printf'. </DESCRIPTION>
    <FUNCTION>train_captcha</FUNCTION>
    <DECORATED>train_captcha</DECORATED>
    <FUNCLINE>29</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>captcha.c</FILENAME>
      <LINE>119</LINE>
      <COLUMN>18</COLUMN>
    </SFA>
    <DEFECTCODE>6031</DEFECTCODE>
    <DESCRIPTION>반환 값이 무시되었습니다. 'strtok'.</DESCRIPTION>
    <FUNCTION>test_captcha</FUNCTION>
    <DECORATED>test_captcha</DECORATED>
    <FUNCLINE>98</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>cifar.c</FILENAME>
      <LINE>32</LINE>
      <COLUMN>14</COLUMN>
    </SFA>
    <DEFECTCODE>6328</DEFECTCODE>
    <DESCRIPTION>크기 불일치: 'unsigned __int64'이(가) _Param_(8)으로 전달되었습니다. 다음 호출에는 'int'이(가) 필요합니다. 'printf'. </DESCRIPTION>
    <FUNCTION>train_cifar</FUNCTION>
    <DECORATED>train_cifar</DECORATED>
    <FUNCLINE>7</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>cifar.c</FILENAME>
      <LINE>88</LINE>
      <COLUMN>14</COLUMN>
    </SFA>
    <DEFECTCODE>6328</DEFECTCODE>
    <DESCRIPTION>크기 불일치: 'unsigned __int64'이(가) _Param_(8)으로 전달되었습니다. 다음 호출에는 'int'이(가) 필요합니다. 'printf'. </DESCRIPTION>
    <FUNCTION>train_cifar_distill</FUNCTION>
    <DECORATED>train_cifar_distill</DECORATED>
    <FUNCLINE>55</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>cifar.c</FILENAME>
      <LINE>139</LINE>
      <COLUMN>50</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '+' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '+' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>test_cifar_multi</FUNCTION>
    <DECORATED>test_cifar_multi</DECORATED>
    <FUNCLINE>111</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>classifier.c</FILENAME>
      <LINE>77</LINE>
      <COLUMN>15</COLUMN>
    </SFA>
    <DEFECTCODE>6031</DEFECTCODE>
    <DESCRIPTION>반환 값이 무시되었습니다. 'getchar'.</DESCRIPTION>
    <FUNCTION>train_classifier</FUNCTION>
    <DECORATED>train_classifier</DECORATED>
    <FUNCLINE>30</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>classifier.c</FILENAME>
      <LINE>211</LINE>
      <COLUMN>14</COLUMN>
    </SFA>
    <DEFECTCODE>6328</DEFECTCODE>
    <DESCRIPTION>크기 불일치: 'unsigned __int64'이(가) _Param_(8)으로 전달되었습니다. 다음 호출에는 'int'이(가) 필요합니다. 'printf'. </DESCRIPTION>
    <FUNCTION>train_classifier</FUNCTION>
    <DECORATED>train_classifier</DECORATED>
    <FUNCLINE>30</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>classifier.c</FILENAME>
      <LINE>181</LINE>
      <COLUMN>100</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>train_classifier</FUNCTION>
    <DECORATED>train_classifier</DECORATED>
    <FUNCLINE>30</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>classifier.c</FILENAME>
      <LINE>772</LINE>
      <COLUMN>18</COLUMN>
    </SFA>
    <DEFECTCODE>6031</DEFECTCODE>
    <DESCRIPTION>반환 값이 무시되었습니다. 'strtok'.</DESCRIPTION>
    <FUNCTION>try_classifier</FUNCTION>
    <DECORATED>try_classifier</DECORATED>
    <FUNCLINE>742</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>classifier.c</FILENAME>
      <LINE>848</LINE>
      <COLUMN>15</COLUMN>
    </SFA>
    <DEFECTCODE>6031</DEFECTCODE>
    <DESCRIPTION>반환 값이 무시되었습니다. 'getchar'.</DESCRIPTION>
    <FUNCTION>predict_classifier</FUNCTION>
    <DECORATED>predict_classifier</DECORATED>
    <FUNCLINE>826</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>classifier.c</FILENAME>
      <LINE>868</LINE>
      <COLUMN>18</COLUMN>
    </SFA>
    <DEFECTCODE>6031</DEFECTCODE>
    <DESCRIPTION>반환 값이 무시되었습니다. 'strtok'.</DESCRIPTION>
    <FUNCTION>predict_classifier</FUNCTION>
    <DECORATED>predict_classifier</DECORATED>
    <FUNCLINE>826</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>classifier.c</FILENAME>
      <LINE>1403</LINE>
      <COLUMN>53</COLUMN>
    </SFA>
    <DEFECTCODE>6387</DEFECTCODE>
    <DESCRIPTION>'layer_s'이(가) '0'일 수 있습니다.  이 경우 'atoi' 함수의 사양과 일치하지 않습니다. </DESCRIPTION>
    <FUNCTION>run_classifier</FUNCTION>
    <DECORATED>run_classifier</DECORATED>
    <FUNCLINE>1354</FUNCLINE>
    <PROBABILITY>1</PROBABILITY>
    <RANK>4</RANK>
    <CATEGORY>
      <RULECATEGORY>mspft</RULECATEGORY>
    </CATEGORY>
    <PATH>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>classifier.c</FILENAME>
        <LINE>1356</LINE>
        <COLUMN>12</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>classifier.c</FILENAME>
        <LINE>1361</LINE>
        <COLUMN>8</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>classifier.c</FILENAME>
        <LINE>1362</LINE>
        <COLUMN>10</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>classifier.c</FILENAME>
        <LINE>1363</LINE>
        <COLUMN>9</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>classifier.c</FILENAME>
        <LINE>1364</LINE>
        <COLUMN>8</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>classifier.c</FILENAME>
        <LINE>1365</LINE>
        <COLUMN>8</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>classifier.c</FILENAME>
        <LINE>1366</LINE>
        <COLUMN>7</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>classifier.c</FILENAME>
        <LINE>1380</LINE>
        <COLUMN>12</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>classifier.c</FILENAME>
        <LINE>1381</LINE>
        <COLUMN>13</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>classifier.c</FILENAME>
        <LINE>1382</LINE>
        <COLUMN>14</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>classifier.c</FILENAME>
        <LINE>1385</LINE>
        <COLUMN>8</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>classifier.c</FILENAME>
        <LINE>1386</LINE>
        <COLUMN>8</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>classifier.c</FILENAME>
        <LINE>1387</LINE>
        <COLUMN>8</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>classifier.c</FILENAME>
        <LINE>1388</LINE>
        <COLUMN>8</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>classifier.c</FILENAME>
        <LINE>1389</LINE>
        <COLUMN>8</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>classifier.c</FILENAME>
        <LINE>1390</LINE>
        <COLUMN>8</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>classifier.c</FILENAME>
        <LINE>1391</LINE>
        <COLUMN>8</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>classifier.c</FILENAME>
        <LINE>1392</LINE>
        <COLUMN>8</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>classifier.c</FILENAME>
        <LINE>1393</LINE>
        <COLUMN>8</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>classifier.c</FILENAME>
        <LINE>1394</LINE>
        <COLUMN>8</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>classifier.c</FILENAME>
        <LINE>1395</LINE>
        <COLUMN>10</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>classifier.c</FILENAME>
        <LINE>1396</LINE>
        <COLUMN>10</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>classifier.c</FILENAME>
        <LINE>1397</LINE>
        <COLUMN>10</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>classifier.c</FILENAME>
        <LINE>1398</LINE>
        <COLUMN>10</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>classifier.c</FILENAME>
        <LINE>1399</LINE>
        <COLUMN>10</COLUMN>
        <KEYEVENT>
          <ID>1</ID>
          <KIND>선언</KIND>
          <IMPORTANCE>Essential</IMPORTANCE>
          <MESSAGE>'layer_s'은(는) NULL일 수 있습니다.</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>classifier.c</FILENAME>
        <LINE>1400</LINE>
        <COLUMN>8</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>classifier.c</FILENAME>
        <LINE>1401</LINE>
        <COLUMN>10</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>classifier.c</FILENAME>
        <LINE>1402</LINE>
        <COLUMN>8</COLUMN>
        <KEYEVENT>
          <ID>2</ID>
          <KIND>분기</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>이 분기 건너뛰기, ('0==strcmp(argv[2], "predict")'이(가) false라고 가정)</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>classifier.c</FILENAME>
        <LINE>1403</LINE>
        <COLUMN>13</COLUMN>
        <KEYEVENT>
          <ID>3</ID>
          <KIND>분기</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>이 분기 시작, ('0==strcmp(argv[2], "try")' 가정)</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>classifier.c</FILENAME>
        <LINE>1403</LINE>
        <COLUMN>53</COLUMN>
        <KEYEVENT>
          <ID>4</ID>
          <KIND>사용법</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>'layer_s'은(는) 'atoi'(c:\program files (x86)\windows kits\10\include\10.0.19041.0\ucrt\stdlib.h:451에서 선언됨)에 대한 입력입니다.</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>classifier.c</FILENAME>
        <LINE>1403</LINE>
        <COLUMN>53</COLUMN>
        <KEYEVENT>
          <ID>5</ID>
          <KIND>사용법</KIND>
          <IMPORTANCE>Essential</IMPORTANCE>
          <MESSAGE>'layer_s'은(는) NULL(이)면 안 됩니다. 이는 'atoi'의 SAL 주석과 일치하지 않습니다.</MESSAGE>
        </KEYEVENT>
      </SFA>
    </PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>coco.c</FILENAME>
      <LINE>163</LINE>
      <COLUMN>43</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>validate_coco</FUNCTION>
    <DECORATED>validate_coco</DECORATED>
    <FUNCLINE>137</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>coco.c</FILENAME>
      <LINE>163</LINE>
      <COLUMN>36</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>validate_coco</FUNCTION>
    <DECORATED>validate_coco</DECORATED>
    <FUNCLINE>137</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>coco.c</FILENAME>
      <LINE>164</LINE>
      <COLUMN>49</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>validate_coco</FUNCTION>
    <DECORATED>validate_coco</DECORATED>
    <FUNCLINE>137</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>coco.c</FILENAME>
      <LINE>164</LINE>
      <COLUMN>42</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>validate_coco</FUNCTION>
    <DECORATED>validate_coco</DECORATED>
    <FUNCLINE>137</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>coco.c</FILENAME>
      <LINE>265</LINE>
      <COLUMN>43</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>validate_coco_recall</FUNCTION>
    <DECORATED>validate_coco_recall</DECORATED>
    <FUNCLINE>238</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>coco.c</FILENAME>
      <LINE>265</LINE>
      <COLUMN>36</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>validate_coco_recall</FUNCTION>
    <DECORATED>validate_coco_recall</DECORATED>
    <FUNCLINE>238</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>coco.c</FILENAME>
      <LINE>266</LINE>
      <COLUMN>49</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>validate_coco_recall</FUNCTION>
    <DECORATED>validate_coco_recall</DECORATED>
    <FUNCLINE>238</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>coco.c</FILENAME>
      <LINE>266</LINE>
      <COLUMN>42</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>validate_coco_recall</FUNCTION>
    <DECORATED>validate_coco_recall</DECORATED>
    <FUNCLINE>238</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>coco.c</FILENAME>
      <LINE>361</LINE>
      <COLUMN>18</COLUMN>
    </SFA>
    <DEFECTCODE>6031</DEFECTCODE>
    <DESCRIPTION>반환 값이 무시되었습니다. 'strtok'.</DESCRIPTION>
    <FUNCTION>test_coco</FUNCTION>
    <DECORATED>test_coco</DECORATED>
    <FUNCLINE>333</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>coco.c</FILENAME>
      <LINE>348</LINE>
      <COLUMN>47</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>test_coco</FUNCTION>
    <DECORATED>test_coco</DECORATED>
    <FUNCLINE>333</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>coco.c</FILENAME>
      <LINE>348</LINE>
      <COLUMN>38</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>test_coco</FUNCTION>
    <DECORATED>test_coco</DECORATED>
    <FUNCLINE>333</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>coco.c</FILENAME>
      <LINE>349</LINE>
      <COLUMN>53</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>test_coco</FUNCTION>
    <DECORATED>test_coco</DECORATED>
    <FUNCLINE>333</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>coco.c</FILENAME>
      <LINE>349</LINE>
      <COLUMN>44</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>test_coco</FUNCTION>
    <DECORATED>test_coco</DECORATED>
    <FUNCLINE>333</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>compare.c</FILENAME>
      <LINE>57</LINE>
      <COLUMN>14</COLUMN>
    </SFA>
    <DEFECTCODE>6328</DEFECTCODE>
    <DESCRIPTION>크기 불일치: 'unsigned __int64'이(가) _Param_(6)으로 전달되었습니다. 다음 호출에는 'int'이(가) 필요합니다. 'printf'. </DESCRIPTION>
    <FUNCTION>train_compare</FUNCTION>
    <DECORATED>train_compare</DECORATED>
    <FUNCLINE>10</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>compare.c</FILENAME>
      <LINE>179</LINE>
      <COLUMN>45</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>bbox_comparator</FUNCTION>
    <DECORATED>bbox_comparator</DECORATED>
    <FUNCLINE>169</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>compare.c</FILENAME>
      <LINE>179</LINE>
      <COLUMN>37</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>bbox_comparator</FUNCTION>
    <DECORATED>bbox_comparator</DECORATED>
    <FUNCLINE>169</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>compare.c</FILENAME>
      <LINE>180</LINE>
      <COLUMN>53</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>bbox_comparator</FUNCTION>
    <DECORATED>bbox_comparator</DECORATED>
    <FUNCLINE>169</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>compare.c</FILENAME>
      <LINE>180</LINE>
      <COLUMN>47</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>bbox_comparator</FUNCTION>
    <DECORATED>bbox_comparator</DECORATED>
    <FUNCLINE>169</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>compare.c</FILENAME>
      <LINE>181</LINE>
      <COLUMN>24</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>bbox_comparator</FUNCTION>
    <DECORATED>bbox_comparator</DECORATED>
    <FUNCLINE>169</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>compare.c</FILENAME>
      <LINE>181</LINE>
      <COLUMN>18</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>bbox_comparator</FUNCTION>
    <DECORATED>bbox_comparator</DECORATED>
    <FUNCLINE>169</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>compare.c</FILENAME>
      <LINE>181</LINE>
      <COLUMN>53</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>bbox_comparator</FUNCTION>
    <DECORATED>bbox_comparator</DECORATED>
    <FUNCLINE>169</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>compare.c</FILENAME>
      <LINE>181</LINE>
      <COLUMN>47</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>bbox_comparator</FUNCTION>
    <DECORATED>bbox_comparator</DECORATED>
    <FUNCLINE>169</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>compare.c</FILENAME>
      <LINE>196</LINE>
      <COLUMN>48</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '-' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '-' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>bbox_update</FUNCTION>
    <DECORATED>bbox_update</DECORATED>
    <FUNCLINE>193</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>compare.c</FILENAME>
      <LINE>197</LINE>
      <COLUMN>48</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '-' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '-' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>bbox_update</FUNCTION>
    <DECORATED>bbox_update</DECORATED>
    <FUNCLINE>193</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>compare.c</FILENAME>
      <LINE>208</LINE>
      <COLUMN>45</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>bbox_fight</FUNCTION>
    <DECORATED>bbox_fight</DECORATED>
    <FUNCLINE>204</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>compare.c</FILENAME>
      <LINE>208</LINE>
      <COLUMN>37</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>bbox_fight</FUNCTION>
    <DECORATED>bbox_fight</DECORATED>
    <FUNCLINE>204</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>compare.c</FILENAME>
      <LINE>209</LINE>
      <COLUMN>53</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>bbox_fight</FUNCTION>
    <DECORATED>bbox_fight</DECORATED>
    <FUNCLINE>204</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>compare.c</FILENAME>
      <LINE>209</LINE>
      <COLUMN>47</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>bbox_fight</FUNCTION>
    <DECORATED>bbox_fight</DECORATED>
    <FUNCLINE>204</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>compare.c</FILENAME>
      <LINE>210</LINE>
      <COLUMN>24</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>bbox_fight</FUNCTION>
    <DECORATED>bbox_fight</DECORATED>
    <FUNCLINE>204</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>compare.c</FILENAME>
      <LINE>210</LINE>
      <COLUMN>18</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>bbox_fight</FUNCTION>
    <DECORATED>bbox_fight</DECORATED>
    <FUNCLINE>204</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>compare.c</FILENAME>
      <LINE>210</LINE>
      <COLUMN>53</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>bbox_fight</FUNCTION>
    <DECORATED>bbox_fight</DECORATED>
    <FUNCLINE>204</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>compare.c</FILENAME>
      <LINE>210</LINE>
      <COLUMN>47</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>bbox_fight</FUNCTION>
    <DECORATED>bbox_fight</DECORATED>
    <FUNCLINE>204</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>compare.c</FILENAME>
      <LINE>295</LINE>
      <COLUMN>35</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>BattleRoyaleWithCheese</FUNCTION>
    <DECORATED>BattleRoyaleWithCheese</DECORATED>
    <FUNCLINE>258</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>compare.c</FILENAME>
      <LINE>295</LINE>
      <COLUMN>46</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>BattleRoyaleWithCheese</FUNCTION>
    <DECORATED>BattleRoyaleWithCheese</DECORATED>
    <FUNCLINE>258</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>compare.c</FILENAME>
      <LINE>315</LINE>
      <COLUMN>39</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>BattleRoyaleWithCheese</FUNCTION>
    <DECORATED>BattleRoyaleWithCheese</DECORATED>
    <FUNCLINE>258</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>compare.c</FILENAME>
      <LINE>315</LINE>
      <COLUMN>50</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>BattleRoyaleWithCheese</FUNCTION>
    <DECORATED>BattleRoyaleWithCheese</DECORATED>
    <FUNCLINE>258</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>connected_layer.c</FILENAME>
      <LINE>79</LINE>
      <COLUMN>43</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_connected_layer</FUNCTION>
    <DECORATED>make_connected_layer</DECORATED>
    <FUNCLINE>53</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>connected_layer.c</FILENAME>
      <LINE>80</LINE>
      <COLUMN>42</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_connected_layer</FUNCTION>
    <DECORATED>make_connected_layer</DECORATED>
    <FUNCLINE>53</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>connected_layer.c</FILENAME>
      <LINE>82</LINE>
      <COLUMN>46</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_connected_layer</FUNCTION>
    <DECORATED>make_connected_layer</DECORATED>
    <FUNCLINE>53</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>connected_layer.c</FILENAME>
      <LINE>85</LINE>
      <COLUMN>40</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_connected_layer</FUNCTION>
    <DECORATED>make_connected_layer</DECORATED>
    <FUNCLINE>53</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>connected_layer.c</FILENAME>
      <LINE>117</LINE>
      <COLUMN>42</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_connected_layer</FUNCTION>
    <DECORATED>make_connected_layer</DECORATED>
    <FUNCLINE>53</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>connected_layer.c</FILENAME>
      <LINE>118</LINE>
      <COLUMN>47</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_connected_layer</FUNCTION>
    <DECORATED>make_connected_layer</DECORATED>
    <FUNCLINE>53</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>connected_layer.c</FILENAME>
      <LINE>205</LINE>
      <COLUMN>56</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>forward_connected_layer</FUNCTION>
    <DECORATED>forward_connected_layer</DECORATED>
    <FUNCLINE>175</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>connected_layer.c</FILENAME>
      <LINE>215</LINE>
      <COLUMN>42</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>backward_connected_layer</FUNCTION>
    <DECORATED>backward_connected_layer</DECORATED>
    <FUNCLINE>210</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>connected_layer.c</FILENAME>
      <LINE>251</LINE>
      <COLUMN>61</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '+' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '+' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>denormalize_connected_layer</FUNCTION>
    <DECORATED>denormalize_connected_layer</DECORATED>
    <FUNCLINE>247</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>convolutional_layer.c</FILENAME>
      <LINE>139</LINE>
      <COLUMN>48</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>get_workspace_size32</FUNCTION>
    <DECORATED>get_workspace_size32</DECORATED>
    <FUNCLINE>106</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>convolutional_layer.c</FILENAME>
      <LINE>139</LINE>
      <COLUMN>42</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>get_workspace_size32</FUNCTION>
    <DECORATED>get_workspace_size32</DECORATED>
    <FUNCLINE>106</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>convolutional_layer.c</FILENAME>
      <LINE>553</LINE>
      <COLUMN>19</COLUMN>
    </SFA>
    <DEFECTCODE>6031</DEFECTCODE>
    <DESCRIPTION>반환 값이 무시되었습니다. 'getchar'.</DESCRIPTION>
    <FUNCTION>make_convolutional_layer</FUNCTION>
    <DECORATED>make_convolutional_layer</DECORATED>
    <FUNCLINE>508</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>convolutional_layer.c</FILENAME>
      <LINE>592</LINE>
      <COLUMN>42</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_convolutional_layer</FUNCTION>
    <DECORATED>make_convolutional_layer</DECORATED>
    <FUNCLINE>508</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>convolutional_layer.c</FILENAME>
      <LINE>594</LINE>
      <COLUMN>52</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_convolutional_layer</FUNCTION>
    <DECORATED>make_convolutional_layer</DECORATED>
    <FUNCLINE>508</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>convolutional_layer.c</FILENAME>
      <LINE>607</LINE>
      <COLUMN>50</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_convolutional_layer</FUNCTION>
    <DECORATED>make_convolutional_layer</DECORATED>
    <FUNCLINE>508</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>convolutional_layer.c</FILENAME>
      <LINE>621</LINE>
      <COLUMN>29</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '+' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '+' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_convolutional_layer</FUNCTION>
    <DECORATED>make_convolutional_layer</DECORATED>
    <FUNCLINE>508</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>convolutional_layer.c</FILENAME>
      <LINE>658</LINE>
      <COLUMN>46</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_convolutional_layer</FUNCTION>
    <DECORATED>make_convolutional_layer</DECORATED>
    <FUNCLINE>508</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>convolutional_layer.c</FILENAME>
      <LINE>659</LINE>
      <COLUMN>51</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_convolutional_layer</FUNCTION>
    <DECORATED>make_convolutional_layer</DECORATED>
    <FUNCLINE>508</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>convolutional_layer.c</FILENAME>
      <LINE>924</LINE>
      <COLUMN>124</COLUMN>
    </SFA>
    <DEFECTCODE>6308</DEFECTCODE>
    <DESCRIPTION>'realloc'는 null 포인터를 반환할 수 있습니다. 'realloc'에 인수로 전달되는 'l-&gt;activation_input'에 null 포인터를 할당하면 원래 메모리 블록에서 누수가 발생할 수 있습니다.</DESCRIPTION>
    <FUNCTION>resize_convolutional_layer</FUNCTION>
    <DECORATED>resize_convolutional_layer</DECORATED>
    <FUNCLINE>893</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>convolutional_layer.c</FILENAME>
      <LINE>910</LINE>
      <COLUMN>56</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>resize_convolutional_layer</FUNCTION>
    <DECORATED>resize_convolutional_layer</DECORATED>
    <FUNCLINE>893</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>convolutional_layer.c</FILENAME>
      <LINE>912</LINE>
      <COLUMN>58</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>resize_convolutional_layer</FUNCTION>
    <DECORATED>resize_convolutional_layer</DECORATED>
    <FUNCLINE>893</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>convolutional_layer.c</FILENAME>
      <LINE>915</LINE>
      <COLUMN>54</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>resize_convolutional_layer</FUNCTION>
    <DECORATED>resize_convolutional_layer</DECORATED>
    <FUNCLINE>893</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>convolutional_layer.c</FILENAME>
      <LINE>916</LINE>
      <COLUMN>64</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>resize_convolutional_layer</FUNCTION>
    <DECORATED>resize_convolutional_layer</DECORATED>
    <FUNCLINE>893</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>convolutional_layer.c</FILENAME>
      <LINE>924</LINE>
      <COLUMN>157</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>resize_convolutional_layer</FUNCTION>
    <DECORATED>resize_convolutional_layer</DECORATED>
    <FUNCLINE>893</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>convolutional_layer.c</FILENAME>
      <LINE>1025</LINE>
      <COLUMN>51</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>backward_bias</FUNCTION>
    <DECORATED>backward_bias</DECORATED>
    <FUNCLINE>1020</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>convolutional_layer.c</FILENAME>
      <LINE>1084</LINE>
      <COLUMN>23</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '+' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '+' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>binary_align_weights</FUNCTION>
    <DECORATED>binary_align_weights</DECORATED>
    <FUNCLINE>1080</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>convolutional_layer.c</FILENAME>
      <LINE>1155</LINE>
      <COLUMN>43</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>binary_align_weights</FUNCTION>
    <DECORATED>binary_align_weights</DECORATED>
    <FUNCLINE>1080</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>convolutional_layer.c</FILENAME>
      <LINE>1120</LINE>
      <COLUMN>75</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '+' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '+' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>binary_align_weights</FUNCTION>
    <DECORATED>binary_align_weights</DECORATED>
    <FUNCLINE>1080</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>convolutional_layer.c</FILENAME>
      <LINE>1120</LINE>
      <COLUMN>57</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>binary_align_weights</FUNCTION>
    <DECORATED>binary_align_weights</DECORATED>
    <FUNCLINE>1080</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>convolutional_layer.c</FILENAME>
      <LINE>1124</LINE>
      <COLUMN>56</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>binary_align_weights</FUNCTION>
    <DECORATED>binary_align_weights</DECORATED>
    <FUNCLINE>1080</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>convolutional_layer.c</FILENAME>
      <LINE>1149</LINE>
      <COLUMN>43</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>binary_align_weights</FUNCTION>
    <DECORATED>binary_align_weights</DECORATED>
    <FUNCLINE>1080</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>convolutional_layer.c</FILENAME>
      <LINE>1241</LINE>
      <COLUMN>51</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>forward_convolutional_layer</FUNCTION>
    <DECORATED>forward_convolutional_layer</DECORATED>
    <FUNCLINE>1210</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>convolutional_layer.c</FILENAME>
      <LINE>1241</LINE>
      <COLUMN>49</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>forward_convolutional_layer</FUNCTION>
    <DECORATED>forward_convolutional_layer</DECORATED>
    <FUNCLINE>1210</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>convolutional_layer.c</FILENAME>
      <LINE>1241</LINE>
      <COLUMN>45</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '+' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '+' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>forward_convolutional_layer</FUNCTION>
    <DECORATED>forward_convolutional_layer</DECORATED>
    <FUNCLINE>1210</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>convolutional_layer.c</FILENAME>
      <LINE>1241</LINE>
      <COLUMN>35</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>forward_convolutional_layer</FUNCTION>
    <DECORATED>forward_convolutional_layer</DECORATED>
    <FUNCLINE>1210</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>convolutional_layer.c</FILENAME>
      <LINE>1247</LINE>
      <COLUMN>54</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>forward_convolutional_layer</FUNCTION>
    <DECORATED>forward_convolutional_layer</DECORATED>
    <FUNCLINE>1210</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>convolutional_layer.c</FILENAME>
      <LINE>1247</LINE>
      <COLUMN>47</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>forward_convolutional_layer</FUNCTION>
    <DECORATED>forward_convolutional_layer</DECORATED>
    <FUNCLINE>1210</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>convolutional_layer.c</FILENAME>
      <LINE>1247</LINE>
      <COLUMN>40</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>forward_convolutional_layer</FUNCTION>
    <DECORATED>forward_convolutional_layer</DECORATED>
    <FUNCLINE>1210</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>convolutional_layer.c</FILENAME>
      <LINE>1340</LINE>
      <COLUMN>43</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '+' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '+' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>forward_convolutional_layer</FUNCTION>
    <DECORATED>forward_convolutional_layer</DECORATED>
    <FUNCLINE>1210</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>convolutional_layer.c</FILENAME>
      <LINE>1254</LINE>
      <COLUMN>39</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '+' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '+' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>forward_convolutional_layer</FUNCTION>
    <DECORATED>forward_convolutional_layer</DECORATED>
    <FUNCLINE>1210</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>convolutional_layer.c</FILENAME>
      <LINE>1272</LINE>
      <COLUMN>100</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>forward_convolutional_layer</FUNCTION>
    <DECORATED>forward_convolutional_layer</DECORATED>
    <FUNCLINE>1210</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>convolutional_layer.c</FILENAME>
      <LINE>1272</LINE>
      <COLUMN>94</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>forward_convolutional_layer</FUNCTION>
    <DECORATED>forward_convolutional_layer</DECORATED>
    <FUNCLINE>1210</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>convolutional_layer.c</FILENAME>
      <LINE>1370</LINE>
      <COLUMN>79</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>forward_convolutional_layer</FUNCTION>
    <DECORATED>forward_convolutional_layer</DECORATED>
    <FUNCLINE>1210</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>convolutional_layer.c</FILENAME>
      <LINE>1370</LINE>
      <COLUMN>75</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>forward_convolutional_layer</FUNCTION>
    <DECORATED>forward_convolutional_layer</DECORATED>
    <FUNCLINE>1210</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>convolutional_layer.c</FILENAME>
      <LINE>1370</LINE>
      <COLUMN>58</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>forward_convolutional_layer</FUNCTION>
    <DECORATED>forward_convolutional_layer</DECORATED>
    <FUNCLINE>1210</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>convolutional_layer.c</FILENAME>
      <LINE>1370</LINE>
      <COLUMN>54</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '+' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '+' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>forward_convolutional_layer</FUNCTION>
    <DECORATED>forward_convolutional_layer</DECORATED>
    <FUNCLINE>1210</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>convolutional_layer.c</FILENAME>
      <LINE>1370</LINE>
      <COLUMN>44</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>forward_convolutional_layer</FUNCTION>
    <DECORATED>forward_convolutional_layer</DECORATED>
    <FUNCLINE>1210</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>convolutional_layer.c</FILENAME>
      <LINE>1427</LINE>
      <COLUMN>71</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>forward_convolutional_layer</FUNCTION>
    <DECORATED>forward_convolutional_layer</DECORATED>
    <FUNCLINE>1210</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>convolutional_layer.c</FILENAME>
      <LINE>1433</LINE>
      <COLUMN>66</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>assisted_excitation_forward</FUNCTION>
    <DECORATED>assisted_excitation_forward</DECORATED>
    <FUNCLINE>1431</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>convolutional_layer.c</FILENAME>
      <LINE>1451</LINE>
      <COLUMN>54</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>assisted_excitation_forward</FUNCTION>
    <DECORATED>assisted_excitation_forward</DECORATED>
    <FUNCLINE>1431</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>convolutional_layer.c</FILENAME>
      <LINE>1451</LINE>
      <COLUMN>44</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>assisted_excitation_forward</FUNCTION>
    <DECORATED>assisted_excitation_forward</DECORATED>
    <FUNCLINE>1431</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>convolutional_layer.c</FILENAME>
      <LINE>1452</LINE>
      <COLUMN>50</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>assisted_excitation_forward</FUNCTION>
    <DECORATED>assisted_excitation_forward</DECORATED>
    <FUNCLINE>1431</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>convolutional_layer.c</FILENAME>
      <LINE>1452</LINE>
      <COLUMN>40</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>assisted_excitation_forward</FUNCTION>
    <DECORATED>assisted_excitation_forward</DECORATED>
    <FUNCLINE>1431</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>convolutional_layer.c</FILENAME>
      <LINE>1465</LINE>
      <COLUMN>59</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>assisted_excitation_forward</FUNCTION>
    <DECORATED>assisted_excitation_forward</DECORATED>
    <FUNCLINE>1431</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>convolutional_layer.c</FILENAME>
      <LINE>1465</LINE>
      <COLUMN>71</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>assisted_excitation_forward</FUNCTION>
    <DECORATED>assisted_excitation_forward</DECORATED>
    <FUNCLINE>1431</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>convolutional_layer.c</FILENAME>
      <LINE>1468</LINE>
      <COLUMN>53</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>assisted_excitation_forward</FUNCTION>
    <DECORATED>assisted_excitation_forward</DECORATED>
    <FUNCLINE>1431</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>convolutional_layer.c</FILENAME>
      <LINE>1468</LINE>
      <COLUMN>38</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '-' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '-' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>assisted_excitation_forward</FUNCTION>
    <DECORATED>assisted_excitation_forward</DECORATED>
    <FUNCLINE>1431</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>convolutional_layer.c</FILENAME>
      <LINE>1469</LINE>
      <COLUMN>53</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>assisted_excitation_forward</FUNCTION>
    <DECORATED>assisted_excitation_forward</DECORATED>
    <FUNCLINE>1431</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>convolutional_layer.c</FILENAME>
      <LINE>1469</LINE>
      <COLUMN>38</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '+' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '+' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>assisted_excitation_forward</FUNCTION>
    <DECORATED>assisted_excitation_forward</DECORATED>
    <FUNCLINE>1431</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>convolutional_layer.c</FILENAME>
      <LINE>1470</LINE>
      <COLUMN>52</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>assisted_excitation_forward</FUNCTION>
    <DECORATED>assisted_excitation_forward</DECORATED>
    <FUNCLINE>1431</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>convolutional_layer.c</FILENAME>
      <LINE>1470</LINE>
      <COLUMN>37</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '-' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '-' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>assisted_excitation_forward</FUNCTION>
    <DECORATED>assisted_excitation_forward</DECORATED>
    <FUNCLINE>1431</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>convolutional_layer.c</FILENAME>
      <LINE>1471</LINE>
      <COLUMN>54</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>assisted_excitation_forward</FUNCTION>
    <DECORATED>assisted_excitation_forward</DECORATED>
    <FUNCLINE>1431</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>convolutional_layer.c</FILENAME>
      <LINE>1471</LINE>
      <COLUMN>39</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '+' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '+' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>assisted_excitation_forward</FUNCTION>
    <DECORATED>assisted_excitation_forward</DECORATED>
    <FUNCLINE>1431</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>convolutional_layer.c</FILENAME>
      <LINE>1562</LINE>
      <COLUMN>51</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>backward_convolutional_layer</FUNCTION>
    <DECORATED>backward_convolutional_layer</DECORATED>
    <FUNCLINE>1539</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>convolutional_layer.c</FILENAME>
      <LINE>1562</LINE>
      <COLUMN>49</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>backward_convolutional_layer</FUNCTION>
    <DECORATED>backward_convolutional_layer</DECORATED>
    <FUNCLINE>1539</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>convolutional_layer.c</FILENAME>
      <LINE>1562</LINE>
      <COLUMN>45</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '+' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '+' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>backward_convolutional_layer</FUNCTION>
    <DECORATED>backward_convolutional_layer</DECORATED>
    <FUNCLINE>1539</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>convolutional_layer.c</FILENAME>
      <LINE>1562</LINE>
      <COLUMN>35</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>backward_convolutional_layer</FUNCTION>
    <DECORATED>backward_convolutional_layer</DECORATED>
    <FUNCLINE>1539</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>convolutional_layer.c</FILENAME>
      <LINE>1566</LINE>
      <COLUMN>76</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>backward_convolutional_layer</FUNCTION>
    <DECORATED>backward_convolutional_layer</DECORATED>
    <FUNCLINE>1539</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>convolutional_layer.c</FILENAME>
      <LINE>1566</LINE>
      <COLUMN>72</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>backward_convolutional_layer</FUNCTION>
    <DECORATED>backward_convolutional_layer</DECORATED>
    <FUNCLINE>1539</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>convolutional_layer.c</FILENAME>
      <LINE>1566</LINE>
      <COLUMN>54</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>backward_convolutional_layer</FUNCTION>
    <DECORATED>backward_convolutional_layer</DECORATED>
    <FUNCLINE>1539</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>convolutional_layer.c</FILENAME>
      <LINE>1566</LINE>
      <COLUMN>50</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '+' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '+' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>backward_convolutional_layer</FUNCTION>
    <DECORATED>backward_convolutional_layer</DECORATED>
    <FUNCLINE>1539</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>convolutional_layer.c</FILENAME>
      <LINE>1566</LINE>
      <COLUMN>40</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>backward_convolutional_layer</FUNCTION>
    <DECORATED>backward_convolutional_layer</DECORATED>
    <FUNCLINE>1539</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>convolutional_layer.c</FILENAME>
      <LINE>1583</LINE>
      <COLUMN>48</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>backward_convolutional_layer</FUNCTION>
    <DECORATED>backward_convolutional_layer</DECORATED>
    <FUNCLINE>1539</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>convolutional_layer.c</FILENAME>
      <LINE>1583</LINE>
      <COLUMN>46</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>backward_convolutional_layer</FUNCTION>
    <DECORATED>backward_convolutional_layer</DECORATED>
    <FUNCLINE>1539</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>convolutional_layer.c</FILENAME>
      <LINE>1583</LINE>
      <COLUMN>42</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '+' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '+' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>backward_convolutional_layer</FUNCTION>
    <DECORATED>backward_convolutional_layer</DECORATED>
    <FUNCLINE>1539</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>convolutional_layer.c</FILENAME>
      <LINE>1583</LINE>
      <COLUMN>32</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>backward_convolutional_layer</FUNCTION>
    <DECORATED>backward_convolutional_layer</DECORATED>
    <FUNCLINE>1539</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>convolutional_layer.c</FILENAME>
      <LINE>1599</LINE>
      <COLUMN>72</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>backward_convolutional_layer</FUNCTION>
    <DECORATED>backward_convolutional_layer</DECORATED>
    <FUNCLINE>1539</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>convolutional_layer.c</FILENAME>
      <LINE>1599</LINE>
      <COLUMN>68</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>backward_convolutional_layer</FUNCTION>
    <DECORATED>backward_convolutional_layer</DECORATED>
    <FUNCLINE>1539</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>convolutional_layer.c</FILENAME>
      <LINE>1599</LINE>
      <COLUMN>50</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>backward_convolutional_layer</FUNCTION>
    <DECORATED>backward_convolutional_layer</DECORATED>
    <FUNCLINE>1539</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>convolutional_layer.c</FILENAME>
      <LINE>1599</LINE>
      <COLUMN>46</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '+' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '+' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>backward_convolutional_layer</FUNCTION>
    <DECORATED>backward_convolutional_layer</DECORATED>
    <FUNCLINE>1539</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>convolutional_layer.c</FILENAME>
      <LINE>1599</LINE>
      <COLUMN>36</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>backward_convolutional_layer</FUNCTION>
    <DECORATED>backward_convolutional_layer</DECORATED>
    <FUNCLINE>1539</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>convolutional_layer.c</FILENAME>
      <LINE>1632</LINE>
      <COLUMN>52</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>get_convolutional_weight</FUNCTION>
    <DECORATED>get_convolutional_weight</DECORATED>
    <FUNCLINE>1627</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>convolutional_layer.c</FILENAME>
      <LINE>1632</LINE>
      <COLUMN>50</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>get_convolutional_weight</FUNCTION>
    <DECORATED>get_convolutional_weight</DECORATED>
    <FUNCLINE>1627</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>convolutional_layer.c</FILENAME>
      <LINE>1632</LINE>
      <COLUMN>48</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>get_convolutional_weight</FUNCTION>
    <DECORATED>get_convolutional_weight</DECORATED>
    <FUNCLINE>1627</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>conv_lstm_layer.c</FILENAME>
      <LINE>157</LINE>
      <COLUMN>47</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_conv_lstm_layer</FUNCTION>
    <DECORATED>make_conv_lstm_layer</DECORATED>
    <FUNCLINE>35</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>conv_lstm_layer.c</FILENAME>
      <LINE>157</LINE>
      <COLUMN>39</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_conv_lstm_layer</FUNCTION>
    <DECORATED>make_conv_lstm_layer</DECORATED>
    <FUNCLINE>35</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>conv_lstm_layer.c</FILENAME>
      <LINE>164</LINE>
      <COLUMN>45</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_conv_lstm_layer</FUNCTION>
    <DECORATED>make_conv_lstm_layer</DECORATED>
    <FUNCLINE>35</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>conv_lstm_layer.c</FILENAME>
      <LINE>165</LINE>
      <COLUMN>45</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_conv_lstm_layer</FUNCTION>
    <DECORATED>make_conv_lstm_layer</DECORATED>
    <FUNCLINE>35</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>conv_lstm_layer.c</FILENAME>
      <LINE>166</LINE>
      <COLUMN>53</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_conv_lstm_layer</FUNCTION>
    <DECORATED>make_conv_lstm_layer</DECORATED>
    <FUNCLINE>35</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>conv_lstm_layer.c</FILENAME>
      <LINE>166</LINE>
      <COLUMN>45</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_conv_lstm_layer</FUNCTION>
    <DECORATED>make_conv_lstm_layer</DECORATED>
    <FUNCLINE>35</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>conv_lstm_layer.c</FILENAME>
      <LINE>168</LINE>
      <COLUMN>45</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_conv_lstm_layer</FUNCTION>
    <DECORATED>make_conv_lstm_layer</DECORATED>
    <FUNCLINE>35</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>conv_lstm_layer.c</FILENAME>
      <LINE>169</LINE>
      <COLUMN>45</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_conv_lstm_layer</FUNCTION>
    <DECORATED>make_conv_lstm_layer</DECORATED>
    <FUNCLINE>35</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>conv_lstm_layer.c</FILENAME>
      <LINE>170</LINE>
      <COLUMN>45</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_conv_lstm_layer</FUNCTION>
    <DECORATED>make_conv_lstm_layer</DECORATED>
    <FUNCLINE>35</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>conv_lstm_layer.c</FILENAME>
      <LINE>171</LINE>
      <COLUMN>45</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_conv_lstm_layer</FUNCTION>
    <DECORATED>make_conv_lstm_layer</DECORATED>
    <FUNCLINE>35</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>conv_lstm_layer.c</FILENAME>
      <LINE>172</LINE>
      <COLUMN>45</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_conv_lstm_layer</FUNCTION>
    <DECORATED>make_conv_lstm_layer</DECORATED>
    <FUNCLINE>35</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>conv_lstm_layer.c</FILENAME>
      <LINE>173</LINE>
      <COLUMN>42</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_conv_lstm_layer</FUNCTION>
    <DECORATED>make_conv_lstm_layer</DECORATED>
    <FUNCLINE>35</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>conv_lstm_layer.c</FILENAME>
      <LINE>174</LINE>
      <COLUMN>45</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_conv_lstm_layer</FUNCTION>
    <DECORATED>make_conv_lstm_layer</DECORATED>
    <FUNCLINE>35</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>conv_lstm_layer.c</FILENAME>
      <LINE>175</LINE>
      <COLUMN>42</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_conv_lstm_layer</FUNCTION>
    <DECORATED>make_conv_lstm_layer</DECORATED>
    <FUNCLINE>35</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>conv_lstm_layer.c</FILENAME>
      <LINE>176</LINE>
      <COLUMN>45</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_conv_lstm_layer</FUNCTION>
    <DECORATED>make_conv_lstm_layer</DECORATED>
    <FUNCLINE>35</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>conv_lstm_layer.c</FILENAME>
      <LINE>177</LINE>
      <COLUMN>45</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_conv_lstm_layer</FUNCTION>
    <DECORATED>make_conv_lstm_layer</DECORATED>
    <FUNCLINE>35</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>conv_lstm_layer.c</FILENAME>
      <LINE>178</LINE>
      <COLUMN>45</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_conv_lstm_layer</FUNCTION>
    <DECORATED>make_conv_lstm_layer</DECORATED>
    <FUNCLINE>35</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>conv_lstm_layer.c</FILENAME>
      <LINE>179</LINE>
      <COLUMN>45</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_conv_lstm_layer</FUNCTION>
    <DECORATED>make_conv_lstm_layer</DECORATED>
    <FUNCLINE>35</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>conv_lstm_layer.c</FILENAME>
      <LINE>180</LINE>
      <COLUMN>45</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_conv_lstm_layer</FUNCTION>
    <DECORATED>make_conv_lstm_layer</DECORATED>
    <FUNCLINE>35</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>conv_lstm_layer.c</FILENAME>
      <LINE>237</LINE>
      <COLUMN>45</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_conv_lstm_layer</FUNCTION>
    <DECORATED>make_conv_lstm_layer</DECORATED>
    <FUNCLINE>35</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>conv_lstm_layer.c</FILENAME>
      <LINE>237</LINE>
      <COLUMN>34</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_conv_lstm_layer</FUNCTION>
    <DECORATED>make_conv_lstm_layer</DECORATED>
    <FUNCLINE>35</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>conv_lstm_layer.c</FILENAME>
      <LINE>238</LINE>
      <COLUMN>34</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_conv_lstm_layer</FUNCTION>
    <DECORATED>make_conv_lstm_layer</DECORATED>
    <FUNCLINE>35</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>conv_lstm_layer.c</FILENAME>
      <LINE>238</LINE>
      <COLUMN>23</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_conv_lstm_layer</FUNCTION>
    <DECORATED>make_conv_lstm_layer</DECORATED>
    <FUNCLINE>35</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>conv_lstm_layer.c</FILENAME>
      <LINE>265</LINE>
      <COLUMN>39</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_history_layer</FUNCTION>
    <DECORATED>make_history_layer</DECORATED>
    <FUNCLINE>243</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>conv_lstm_layer.c</FILENAME>
      <LINE>266</LINE>
      <COLUMN>38</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_history_layer</FUNCTION>
    <DECORATED>make_history_layer</DECORATED>
    <FUNCLINE>243</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>conv_lstm_layer.c</FILENAME>
      <LINE>268</LINE>
      <COLUMN>46</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_history_layer</FUNCTION>
    <DECORATED>make_history_layer</DECORATED>
    <FUNCLINE>243</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>conv_lstm_layer.c</FILENAME>
      <LINE>312</LINE>
      <COLUMN>48</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>forward_history_layer</FUNCTION>
    <DECORATED>forward_history_layer</DECORATED>
    <FUNCLINE>288</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>conv_lstm_layer.c</FILENAME>
      <LINE>316</LINE>
      <COLUMN>44</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>forward_history_layer</FUNCTION>
    <DECORATED>forward_history_layer</DECORATED>
    <FUNCLINE>288</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>conv_lstm_layer.c</FILENAME>
      <LINE>316</LINE>
      <COLUMN>34</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>forward_history_layer</FUNCTION>
    <DECORATED>forward_history_layer</DECORATED>
    <FUNCLINE>288</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>conv_lstm_layer.c</FILENAME>
      <LINE>502</LINE>
      <COLUMN>60</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>resize_conv_lstm_layer</FUNCTION>
    <DECORATED>resize_conv_lstm_layer</DECORATED>
    <FUNCLINE>452</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>conv_lstm_layer.c</FILENAME>
      <LINE>502</LINE>
      <COLUMN>52</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>resize_conv_lstm_layer</FUNCTION>
    <DECORATED>resize_conv_lstm_layer</DECORATED>
    <FUNCLINE>452</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>conv_lstm_layer.c</FILENAME>
      <LINE>505</LINE>
      <COLUMN>65</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>resize_conv_lstm_layer</FUNCTION>
    <DECORATED>resize_conv_lstm_layer</DECORATED>
    <FUNCLINE>452</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>conv_lstm_layer.c</FILENAME>
      <LINE>506</LINE>
      <COLUMN>63</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>resize_conv_lstm_layer</FUNCTION>
    <DECORATED>resize_conv_lstm_layer</DECORATED>
    <FUNCLINE>452</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>conv_lstm_layer.c</FILENAME>
      <LINE>507</LINE>
      <COLUMN>61</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>resize_conv_lstm_layer</FUNCTION>
    <DECORATED>resize_conv_lstm_layer</DECORATED>
    <FUNCLINE>452</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>conv_lstm_layer.c</FILENAME>
      <LINE>507</LINE>
      <COLUMN>53</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>resize_conv_lstm_layer</FUNCTION>
    <DECORATED>resize_conv_lstm_layer</DECORATED>
    <FUNCLINE>452</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>conv_lstm_layer.c</FILENAME>
      <LINE>509</LINE>
      <COLUMN>47</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>resize_conv_lstm_layer</FUNCTION>
    <DECORATED>resize_conv_lstm_layer</DECORATED>
    <FUNCLINE>452</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>conv_lstm_layer.c</FILENAME>
      <LINE>510</LINE>
      <COLUMN>47</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>resize_conv_lstm_layer</FUNCTION>
    <DECORATED>resize_conv_lstm_layer</DECORATED>
    <FUNCLINE>452</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>conv_lstm_layer.c</FILENAME>
      <LINE>511</LINE>
      <COLUMN>47</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>resize_conv_lstm_layer</FUNCTION>
    <DECORATED>resize_conv_lstm_layer</DECORATED>
    <FUNCLINE>452</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>conv_lstm_layer.c</FILENAME>
      <LINE>512</LINE>
      <COLUMN>47</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>resize_conv_lstm_layer</FUNCTION>
    <DECORATED>resize_conv_lstm_layer</DECORATED>
    <FUNCLINE>452</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>conv_lstm_layer.c</FILENAME>
      <LINE>513</LINE>
      <COLUMN>47</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>resize_conv_lstm_layer</FUNCTION>
    <DECORATED>resize_conv_lstm_layer</DECORATED>
    <FUNCLINE>452</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>conv_lstm_layer.c</FILENAME>
      <LINE>514</LINE>
      <COLUMN>47</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>resize_conv_lstm_layer</FUNCTION>
    <DECORATED>resize_conv_lstm_layer</DECORATED>
    <FUNCLINE>452</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>conv_lstm_layer.c</FILENAME>
      <LINE>515</LINE>
      <COLUMN>53</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>resize_conv_lstm_layer</FUNCTION>
    <DECORATED>resize_conv_lstm_layer</DECORATED>
    <FUNCLINE>452</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>conv_lstm_layer.c</FILENAME>
      <LINE>516</LINE>
      <COLUMN>55</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>resize_conv_lstm_layer</FUNCTION>
    <DECORATED>resize_conv_lstm_layer</DECORATED>
    <FUNCLINE>452</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>conv_lstm_layer.c</FILENAME>
      <LINE>517</LINE>
      <COLUMN>55</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>resize_conv_lstm_layer</FUNCTION>
    <DECORATED>resize_conv_lstm_layer</DECORATED>
    <FUNCLINE>452</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>conv_lstm_layer.c</FILENAME>
      <LINE>518</LINE>
      <COLUMN>49</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>resize_conv_lstm_layer</FUNCTION>
    <DECORATED>resize_conv_lstm_layer</DECORATED>
    <FUNCLINE>452</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>conv_lstm_layer.c</FILENAME>
      <LINE>519</LINE>
      <COLUMN>49</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>resize_conv_lstm_layer</FUNCTION>
    <DECORATED>resize_conv_lstm_layer</DECORATED>
    <FUNCLINE>452</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>conv_lstm_layer.c</FILENAME>
      <LINE>520</LINE>
      <COLUMN>61</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>resize_conv_lstm_layer</FUNCTION>
    <DECORATED>resize_conv_lstm_layer</DECORATED>
    <FUNCLINE>452</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>conv_lstm_layer.c</FILENAME>
      <LINE>521</LINE>
      <COLUMN>61</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>resize_conv_lstm_layer</FUNCTION>
    <DECORATED>resize_conv_lstm_layer</DECORATED>
    <FUNCLINE>452</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>conv_lstm_layer.c</FILENAME>
      <LINE>619</LINE>
      <COLUMN>46</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>remember_state_conv_lstm</FUNCTION>
    <DECORATED>remember_state_conv_lstm</DECORATED>
    <FUNCLINE>617</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>conv_lstm_layer.c</FILENAME>
      <LINE>620</LINE>
      <COLUMN>46</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>remember_state_conv_lstm</FUNCTION>
    <DECORATED>remember_state_conv_lstm</DECORATED>
    <FUNCLINE>617</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>conv_lstm_layer.c</FILENAME>
      <LINE>630</LINE>
      <COLUMN>46</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>restore_state_conv_lstm</FUNCTION>
    <DECORATED>restore_state_conv_lstm</DECORATED>
    <FUNCLINE>628</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>conv_lstm_layer.c</FILENAME>
      <LINE>631</LINE>
      <COLUMN>46</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>restore_state_conv_lstm</FUNCTION>
    <DECORATED>restore_state_conv_lstm</DECORATED>
    <FUNCLINE>628</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>conv_lstm_layer.c</FILENAME>
      <LINE>639</LINE>
      <COLUMN>5</COLUMN>
    </SFA>
    <DEFECTCODE>6262</DEFECTCODE>
    <DESCRIPTION>함수에서 '32788'바이트의 스택을 사용하는데 이 크기가 /analyze:stacksize '16384'을(를) 초과합니다. 일부 데이터를 힙으로 이동하십시오.</DESCRIPTION>
    <FUNCTION>forward_conv_lstm_layer</FUNCTION>
    <DECORATED>forward_conv_lstm_layer</DECORATED>
    <FUNCLINE>639</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>conv_lstm_layer.c</FILENAME>
      <LINE>748</LINE>
      <COLUMN>46</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>forward_conv_lstm_layer</FUNCTION>
    <DECORATED>forward_conv_lstm_layer</DECORATED>
    <FUNCLINE>639</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>conv_lstm_layer.c</FILENAME>
      <LINE>749</LINE>
      <COLUMN>46</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>forward_conv_lstm_layer</FUNCTION>
    <DECORATED>forward_conv_lstm_layer</DECORATED>
    <FUNCLINE>639</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>conv_lstm_layer.c</FILENAME>
      <LINE>754</LINE>
      <COLUMN>31</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>forward_conv_lstm_layer</FUNCTION>
    <DECORATED>forward_conv_lstm_layer</DECORATED>
    <FUNCLINE>639</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>conv_lstm_layer.c</FILENAME>
      <LINE>755</LINE>
      <COLUMN>32</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>forward_conv_lstm_layer</FUNCTION>
    <DECORATED>forward_conv_lstm_layer</DECORATED>
    <FUNCLINE>639</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>conv_lstm_layer.c</FILENAME>
      <LINE>756</LINE>
      <COLUMN>36</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>forward_conv_lstm_layer</FUNCTION>
    <DECORATED>forward_conv_lstm_layer</DECORATED>
    <FUNCLINE>639</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>conv_lstm_layer.c</FILENAME>
      <LINE>776</LINE>
      <COLUMN>5</COLUMN>
    </SFA>
    <DEFECTCODE>6262</DEFECTCODE>
    <DESCRIPTION>함수에서 '32788'바이트의 스택을 사용하는데 이 크기가 /analyze:stacksize '16384'을(를) 초과합니다. 일부 데이터를 힙으로 이동하십시오.</DESCRIPTION>
    <FUNCTION>backward_conv_lstm_layer</FUNCTION>
    <DECORATED>backward_conv_lstm_layer</DECORATED>
    <FUNCLINE>776</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>conv_lstm_layer.c</FILENAME>
      <LINE>812</LINE>
      <COLUMN>35</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>backward_conv_lstm_layer</FUNCTION>
    <DECORATED>backward_conv_lstm_layer</DECORATED>
    <FUNCLINE>776</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>conv_lstm_layer.c</FILENAME>
      <LINE>812</LINE>
      <COLUMN>27</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>backward_conv_lstm_layer</FUNCTION>
    <DECORATED>backward_conv_lstm_layer</DECORATED>
    <FUNCLINE>776</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>conv_lstm_layer.c</FILENAME>
      <LINE>813</LINE>
      <COLUMN>52</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>backward_conv_lstm_layer</FUNCTION>
    <DECORATED>backward_conv_lstm_layer</DECORATED>
    <FUNCLINE>776</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>conv_lstm_layer.c</FILENAME>
      <LINE>813</LINE>
      <COLUMN>44</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>backward_conv_lstm_layer</FUNCTION>
    <DECORATED>backward_conv_lstm_layer</DECORATED>
    <FUNCLINE>776</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>conv_lstm_layer.c</FILENAME>
      <LINE>815</LINE>
      <COLUMN>33</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>backward_conv_lstm_layer</FUNCTION>
    <DECORATED>backward_conv_lstm_layer</DECORATED>
    <FUNCLINE>776</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>conv_lstm_layer.c</FILENAME>
      <LINE>815</LINE>
      <COLUMN>25</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>backward_conv_lstm_layer</FUNCTION>
    <DECORATED>backward_conv_lstm_layer</DECORATED>
    <FUNCLINE>776</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>conv_lstm_layer.c</FILENAME>
      <LINE>816</LINE>
      <COLUMN>35</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>backward_conv_lstm_layer</FUNCTION>
    <DECORATED>backward_conv_lstm_layer</DECORATED>
    <FUNCLINE>776</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>conv_lstm_layer.c</FILENAME>
      <LINE>816</LINE>
      <COLUMN>27</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>backward_conv_lstm_layer</FUNCTION>
    <DECORATED>backward_conv_lstm_layer</DECORATED>
    <FUNCLINE>776</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>conv_lstm_layer.c</FILENAME>
      <LINE>817</LINE>
      <COLUMN>32</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>backward_conv_lstm_layer</FUNCTION>
    <DECORATED>backward_conv_lstm_layer</DECORATED>
    <FUNCLINE>776</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>conv_lstm_layer.c</FILENAME>
      <LINE>817</LINE>
      <COLUMN>24</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>backward_conv_lstm_layer</FUNCTION>
    <DECORATED>backward_conv_lstm_layer</DECORATED>
    <FUNCLINE>776</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>conv_lstm_layer.c</FILENAME>
      <LINE>820</LINE>
      <COLUMN>70</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>backward_conv_lstm_layer</FUNCTION>
    <DECORATED>backward_conv_lstm_layer</DECORATED>
    <FUNCLINE>776</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>conv_lstm_layer.c</FILENAME>
      <LINE>822</LINE>
      <COLUMN>68</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>backward_conv_lstm_layer</FUNCTION>
    <DECORATED>backward_conv_lstm_layer</DECORATED>
    <FUNCLINE>776</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>conv_lstm_layer.c</FILENAME>
      <LINE>825</LINE>
      <COLUMN>53</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>backward_conv_lstm_layer</FUNCTION>
    <DECORATED>backward_conv_lstm_layer</DECORATED>
    <FUNCLINE>776</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>conv_lstm_layer.c</FILENAME>
      <LINE>958</LINE>
      <COLUMN>31</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>backward_conv_lstm_layer</FUNCTION>
    <DECORATED>backward_conv_lstm_layer</DECORATED>
    <FUNCLINE>776</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>conv_lstm_layer.c</FILENAME>
      <LINE>959</LINE>
      <COLUMN>48</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>backward_conv_lstm_layer</FUNCTION>
    <DECORATED>backward_conv_lstm_layer</DECORATED>
    <FUNCLINE>776</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>conv_lstm_layer.c</FILENAME>
      <LINE>960</LINE>
      <COLUMN>29</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>backward_conv_lstm_layer</FUNCTION>
    <DECORATED>backward_conv_lstm_layer</DECORATED>
    <FUNCLINE>776</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>conv_lstm_layer.c</FILENAME>
      <LINE>961</LINE>
      <COLUMN>31</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>backward_conv_lstm_layer</FUNCTION>
    <DECORATED>backward_conv_lstm_layer</DECORATED>
    <FUNCLINE>776</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>conv_lstm_layer.c</FILENAME>
      <LINE>962</LINE>
      <COLUMN>28</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>backward_conv_lstm_layer</FUNCTION>
    <DECORATED>backward_conv_lstm_layer</DECORATED>
    <FUNCLINE>776</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>cost_layer.c</FILENAME>
      <LINE>44</LINE>
      <COLUMN>37</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_cost_layer</FUNCTION>
    <DECORATED>make_cost_layer</DECORATED>
    <FUNCLINE>33</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>cost_layer.c</FILENAME>
      <LINE>45</LINE>
      <COLUMN>38</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_cost_layer</FUNCTION>
    <DECORATED>make_cost_layer</DECORATED>
    <FUNCLINE>33</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>cost_layer.c</FILENAME>
      <LINE>64</LINE>
      <COLUMN>49</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>resize_cost_layer</FUNCTION>
    <DECORATED>resize_cost_layer</DECORATED>
    <FUNCLINE>60</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>cost_layer.c</FILENAME>
      <LINE>65</LINE>
      <COLUMN>51</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>resize_cost_layer</FUNCTION>
    <DECORATED>resize_cost_layer</DECORATED>
    <FUNCLINE>60</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>crnn_layer.c</FILENAME>
      <LINE>51</LINE>
      <COLUMN>49</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_crnn_layer</FUNCTION>
    <DECORATED>make_crnn_layer</DECORATED>
    <FUNCLINE>29</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>crnn_layer.c</FILENAME>
      <LINE>51</LINE>
      <COLUMN>39</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_crnn_layer</FUNCTION>
    <DECORATED>make_crnn_layer</DECORATED>
    <FUNCLINE>29</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>crnn_layer.c</FILENAME>
      <LINE>125</LINE>
      <COLUMN>60</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>resize_crnn_layer</FUNCTION>
    <DECORATED>resize_crnn_layer</DECORATED>
    <FUNCLINE>96</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>crnn_layer.c</FILENAME>
      <LINE>125</LINE>
      <COLUMN>50</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>resize_crnn_layer</FUNCTION>
    <DECORATED>resize_crnn_layer</DECORATED>
    <FUNCLINE>96</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>crnn_layer.c</FILENAME>
      <LINE>180</LINE>
      <COLUMN>43</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>forward_crnn_layer</FUNCTION>
    <DECORATED>forward_crnn_layer</DECORATED>
    <FUNCLINE>153</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>crnn_layer.c</FILENAME>
      <LINE>192</LINE>
      <COLUMN>31</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>forward_crnn_layer</FUNCTION>
    <DECORATED>forward_crnn_layer</DECORATED>
    <FUNCLINE>153</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>crnn_layer.c</FILENAME>
      <LINE>215</LINE>
      <COLUMN>31</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>backward_crnn_layer</FUNCTION>
    <DECORATED>backward_crnn_layer</DECORATED>
    <FUNCLINE>199</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>crnn_layer.c</FILENAME>
      <LINE>215</LINE>
      <COLUMN>23</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>backward_crnn_layer</FUNCTION>
    <DECORATED>backward_crnn_layer</DECORATED>
    <FUNCLINE>199</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>crnn_layer.c</FILENAME>
      <LINE>224</LINE>
      <COLUMN>27</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>backward_crnn_layer</FUNCTION>
    <DECORATED>backward_crnn_layer</DECORATED>
    <FUNCLINE>199</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>crnn_layer.c</FILENAME>
      <LINE>235</LINE>
      <COLUMN>45</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>backward_crnn_layer</FUNCTION>
    <DECORATED>backward_crnn_layer</DECORATED>
    <FUNCLINE>199</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>crnn_layer.c</FILENAME>
      <LINE>240</LINE>
      <COLUMN>111</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>backward_crnn_layer</FUNCTION>
    <DECORATED>backward_crnn_layer</DECORATED>
    <FUNCLINE>199</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>crnn_layer.c</FILENAME>
      <LINE>241</LINE>
      <COLUMN>42</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>backward_crnn_layer</FUNCTION>
    <DECORATED>backward_crnn_layer</DECORATED>
    <FUNCLINE>199</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>crnn_layer.c</FILENAME>
      <LINE>241</LINE>
      <COLUMN>33</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>backward_crnn_layer</FUNCTION>
    <DECORATED>backward_crnn_layer</DECORATED>
    <FUNCLINE>199</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>crnn_layer.c</FILENAME>
      <LINE>242</LINE>
      <COLUMN>58</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>backward_crnn_layer</FUNCTION>
    <DECORATED>backward_crnn_layer</DECORATED>
    <FUNCLINE>199</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>crnn_layer.c</FILENAME>
      <LINE>242</LINE>
      <COLUMN>49</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>backward_crnn_layer</FUNCTION>
    <DECORATED>backward_crnn_layer</DECORATED>
    <FUNCLINE>199</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>crop_layer.c</FILENAME>
      <LINE>36</LINE>
      <COLUMN>41</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_crop_layer</FUNCTION>
    <DECORATED>make_crop_layer</DECORATED>
    <FUNCLINE>17</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>crop_layer.c</FILENAME>
      <LINE>60</LINE>
      <COLUMN>53</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>resize_crop_layer</FUNCTION>
    <DECORATED>resize_crop_layer</DECORATED>
    <FUNCLINE>49</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>darknet.c</FILENAME>
      <LINE>154</LINE>
      <COLUMN>38</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>oneoff</FUNCTION>
    <DECORATED>oneoff</DECORATED>
    <FUNCLINE>146</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>darknet.c</FILENAME>
      <LINE>159</LINE>
      <COLUMN>38</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>oneoff</FUNCTION>
    <DECORATED>oneoff</DECORATED>
    <FUNCLINE>146</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>darknet.c</FILENAME>
      <LINE>165</LINE>
      <COLUMN>57</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>oneoff</FUNCTION>
    <DECORATED>oneoff</DECORATED>
    <FUNCLINE>146</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>darknet.c</FILENAME>
      <LINE>166</LINE>
      <COLUMN>57</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>oneoff</FUNCTION>
    <DECORATED>oneoff</DECORATED>
    <FUNCLINE>146</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>darknet.c</FILENAME>
      <LINE>484</LINE>
      <COLUMN>10</COLUMN>
    </SFA>
    <DEFECTCODE>28183</DEFECTCODE>
    <DESCRIPTION>'argv[1]'이(가) '0'일 수 있으며 'argv[i]'에 있는 값의 복사본입니다.  이 경우 'strcmp' 함수의 사양과 일치하지 않습니다. </DESCRIPTION>
    <FUNCTION>main</FUNCTION>
    <DECORATED>main</DECORATED>
    <FUNCLINE>432</FUNCLINE>
    <PATH>
      <SFA>
        <FILEPATH>d:\yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>darknet.c</FILENAME>
        <LINE>443</LINE>
        <COLUMN>5</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>d:\yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>darknet.c</FILENAME>
        <LINE>444</LINE>
        <COLUMN>8</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>d:\yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>darknet.c</FILENAME>
        <LINE>444</LINE>
        <COLUMN>15</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>d:\yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>darknet.c</FILENAME>
        <LINE>445</LINE>
        <COLUMN>6</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>d:\yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>darknet.c</FILENAME>
        <LINE>444</LINE>
        <COLUMN>23</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>d:\yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>darknet.c</FILENAME>
        <LINE>444</LINE>
        <COLUMN>15</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>d:\yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>darknet.c</FILENAME>
        <LINE>445</LINE>
        <COLUMN>6</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>d:\yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>darknet.c</FILENAME>
        <LINE>444</LINE>
        <COLUMN>23</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>d:\yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>darknet.c</FILENAME>
        <LINE>444</LINE>
        <COLUMN>15</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>d:\yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>darknet.c</FILENAME>
        <LINE>452</LINE>
        <COLUMN>12</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>d:\yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>darknet.c</FILENAME>
        <LINE>456</LINE>
        <COLUMN>14</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>d:\yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>darknet.c</FILENAME>
        <LINE>457</LINE>
        <COLUMN>15</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>d:\yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>darknet.c</FILENAME>
        <LINE>464</LINE>
        <COLUMN>14</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>d:\yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>darknet.c</FILENAME>
        <LINE>465</LINE>
        <COLUMN>10</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>d:\yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>darknet.c</FILENAME>
        <LINE>466</LINE>
        <COLUMN>12</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>d:\yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>darknet.c</FILENAME>
        <LINE>482</LINE>
        <COLUMN>20</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>d:\yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>darknet.c</FILENAME>
        <LINE>484</LINE>
        <COLUMN>10</COLUMN>
      </SFA>
    </PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>darknet.c</FILENAME>
      <LINE>484</LINE>
      <COLUMN>10</COLUMN>
    </SFA>
    <DEFECTCODE>6387</DEFECTCODE>
    <DESCRIPTION>'argv[1]'이(가) '0'일 수 있습니다.  이 경우 'strcmp' 함수의 사양과 일치하지 않습니다. </DESCRIPTION>
    <FUNCTION>main</FUNCTION>
    <DECORATED>main</DECORATED>
    <FUNCLINE>432</FUNCLINE>
    <PROBABILITY>1</PROBABILITY>
    <RANK>4</RANK>
    <CATEGORY>
      <RULECATEGORY>mspft</RULECATEGORY>
    </CATEGORY>
    <PATH>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>darknet.c</FILENAME>
        <LINE>443</LINE>
        <COLUMN>5</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>darknet.c</FILENAME>
        <LINE>444</LINE>
        <COLUMN>8</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>darknet.c</FILENAME>
        <LINE>444</LINE>
        <COLUMN>15</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>darknet.c</FILENAME>
        <LINE>445</LINE>
        <COLUMN>6</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>darknet.c</FILENAME>
        <LINE>444</LINE>
        <COLUMN>23</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>darknet.c</FILENAME>
        <LINE>444</LINE>
        <COLUMN>15</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>darknet.c</FILENAME>
        <LINE>445</LINE>
        <COLUMN>6</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>darknet.c</FILENAME>
        <LINE>444</LINE>
        <COLUMN>23</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>darknet.c</FILENAME>
        <LINE>444</LINE>
        <COLUMN>15</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>darknet.c</FILENAME>
        <LINE>452</LINE>
        <COLUMN>12</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>darknet.c</FILENAME>
        <LINE>456</LINE>
        <COLUMN>14</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>darknet.c</FILENAME>
        <LINE>457</LINE>
        <COLUMN>15</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>darknet.c</FILENAME>
        <LINE>464</LINE>
        <COLUMN>14</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>darknet.c</FILENAME>
        <LINE>465</LINE>
        <COLUMN>10</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>darknet.c</FILENAME>
        <LINE>466</LINE>
        <COLUMN>12</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>darknet.c</FILENAME>
        <LINE>482</LINE>
        <COLUMN>20</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>darknet.c</FILENAME>
        <LINE>484</LINE>
        <COLUMN>10</COLUMN>
      </SFA>
    </PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>data.c</FILENAME>
      <LINE>27</LINE>
      <COLUMN>10</COLUMN>
    </SFA>
    <DEFECTCODE>6387</DEFECTCODE>
    <DESCRIPTION>'file'이(가) '0'일 수 있습니다.  이 경우 'fclose' 함수의 사양과 일치하지 않습니다. </DESCRIPTION>
    <FUNCTION>get_paths</FUNCTION>
    <DECORATED>get_paths</DECORATED>
    <FUNCLINE>18</FUNCLINE>
    <PROBABILITY>1</PROBABILITY>
    <RANK>4</RANK>
    <CATEGORY>
      <RULECATEGORY>mspft</RULECATEGORY>
    </CATEGORY>
    <PATH>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>data.c</FILENAME>
        <LINE>20</LINE>
        <COLUMN>10</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>data.c</FILENAME>
        <LINE>21</LINE>
        <COLUMN>10</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>data.c</FILENAME>
        <LINE>22</LINE>
        <COLUMN>7</COLUMN>
        <KEYEVENT>
          <ID>1</ID>
          <KIND>분기</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>'file'은(는) NULL일 수 있습니다. (이 분기 시작)</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>data.c</FILENAME>
        <LINE>22</LINE>
        <COLUMN>24</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>data.c</FILENAME>
        <LINE>23</LINE>
        <COLUMN>10</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>data.c</FILENAME>
        <LINE>24</LINE>
        <COLUMN>15</COLUMN>
        <KEYEVENT>
          <ID>2</ID>
          <KIND>선언</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>'file'은(는) 'fgetl'(d:\yolo_v4\darknet\src\utils.h:47에서 선언됨)에 대한 In/Out 인수입니다.</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>data.c</FILENAME>
        <LINE>24</LINE>
        <COLUMN>15</COLUMN>
        <KEYEVENT>
          <ID>3</ID>
          <KIND>분기</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>이 루프 건너뛰기, ('path=fgetl(file)'이(가) false라고 가정)</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>data.c</FILENAME>
        <LINE>27</LINE>
        <COLUMN>10</COLUMN>
        <KEYEVENT>
          <ID>4</ID>
          <KIND>사용법</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>'file'은(는) 'fclose'(c:\program files (x86)\windows kits\10\include\10.0.19041.0\ucrt\stdio.h:152에서 선언됨)에 대한 입력입니다.</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>data.c</FILENAME>
        <LINE>27</LINE>
        <COLUMN>10</COLUMN>
        <KEYEVENT>
          <ID>5</ID>
          <KIND>사용법</KIND>
          <IMPORTANCE>Essential</IMPORTANCE>
          <MESSAGE>'file'은(는) NULL(이)면 안 됩니다. 이는 'fclose'의 SAL 주석과 일치하지 않습니다.</MESSAGE>
        </KEYEVENT>
      </SFA>
    </PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>data.c</FILENAME>
      <LINE>211</LINE>
      <COLUMN>19</COLUMN>
    </SFA>
    <DEFECTCODE>6031</DEFECTCODE>
    <DESCRIPTION>반환 값이 무시되었습니다. 'getchar'.</DESCRIPTION>
    <FUNCTION>read_boxes</FUNCTION>
    <DECORATED>read_boxes</DECORATED>
    <FUNCLINE>197</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>data.c</FILENAME>
      <LINE>224</LINE>
      <COLUMN>51</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '+' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '+' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>read_boxes</FUNCTION>
    <DECORATED>read_boxes</DECORATED>
    <FUNCLINE>197</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>data.c</FILENAME>
      <LINE>412</LINE>
      <COLUMN>39</COLUMN>
    </SFA>
    <DEFECTCODE>6031</DEFECTCODE>
    <DESCRIPTION>반환 값이 무시되었습니다. 'getchar'.</DESCRIPTION>
    <FUNCTION>fill_truth_detection</FUNCTION>
    <DECORATED>fill_truth_detection</DECORATED>
    <FUNCLINE>377</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>data.c</FILENAME>
      <LINE>427</LINE>
      <COLUMN>39</COLUMN>
    </SFA>
    <DEFECTCODE>6031</DEFECTCODE>
    <DESCRIPTION>반환 값이 무시되었습니다. 'getchar'.</DESCRIPTION>
    <FUNCTION>fill_truth_detection</FUNCTION>
    <DECORATED>fill_truth_detection</DECORATED>
    <FUNCLINE>377</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>data.c</FILENAME>
      <LINE>435</LINE>
      <COLUMN>39</COLUMN>
    </SFA>
    <DEFECTCODE>6031</DEFECTCODE>
    <DESCRIPTION>반환 값이 무시되었습니다. 'getchar'.</DESCRIPTION>
    <FUNCTION>fill_truth_detection</FUNCTION>
    <DECORATED>fill_truth_detection</DECORATED>
    <FUNCLINE>377</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>data.c</FILENAME>
      <LINE>443</LINE>
      <COLUMN>39</COLUMN>
    </SFA>
    <DEFECTCODE>6031</DEFECTCODE>
    <DESCRIPTION>반환 값이 무시되었습니다. 'getchar'.</DESCRIPTION>
    <FUNCTION>fill_truth_detection</FUNCTION>
    <DECORATED>fill_truth_detection</DECORATED>
    <FUNCLINE>377</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>data.c</FILENAME>
      <LINE>450</LINE>
      <COLUMN>39</COLUMN>
    </SFA>
    <DEFECTCODE>6031</DEFECTCODE>
    <DESCRIPTION>반환 값이 무시되었습니다. 'getchar'.</DESCRIPTION>
    <FUNCTION>fill_truth_detection</FUNCTION>
    <DECORATED>fill_truth_detection</DECORATED>
    <FUNCLINE>377</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>data.c</FILENAME>
      <LINE>477</LINE>
      <COLUMN>36</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>print_letters</FUNCTION>
    <DECORATED>print_letters</DECORATED>
    <FUNCLINE>473</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>data.c</FILENAME>
      <LINE>772</LINE>
      <COLUMN>49</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>load_data_compare</FUNCTION>
    <DECORATED>load_data_compare</DECORATED>
    <FUNCLINE>754</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>data.c</FILENAME>
      <LINE>772</LINE>
      <COLUMN>47</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>load_data_compare</FUNCTION>
    <DECORATED>load_data_compare</DECORATED>
    <FUNCLINE>754</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>data.c</FILENAME>
      <LINE>773</LINE>
      <COLUMN>32</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>load_data_compare</FUNCTION>
    <DECORATED>load_data_compare</DECORATED>
    <FUNCLINE>754</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>data.c</FILENAME>
      <LINE>773</LINE>
      <COLUMN>30</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>load_data_compare</FUNCTION>
    <DECORATED>load_data_compare</DECORATED>
    <FUNCLINE>754</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>data.c</FILENAME>
      <LINE>773</LINE>
      <COLUMN>49</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>load_data_compare</FUNCTION>
    <DECORATED>load_data_compare</DECORATED>
    <FUNCLINE>754</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>data.c</FILENAME>
      <LINE>773</LINE>
      <COLUMN>47</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>load_data_compare</FUNCTION>
    <DECORATED>load_data_compare</DECORATED>
    <FUNCLINE>754</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>data.c</FILENAME>
      <LINE>882</LINE>
      <COLUMN>44</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>blend_truth</FUNCTION>
    <DECORATED>blend_truth</DECORATED>
    <FUNCLINE>871</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>data.c</FILENAME>
      <LINE>883</LINE>
      <COLUMN>64</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>blend_truth</FUNCTION>
    <DECORATED>blend_truth</DECORATED>
    <FUNCLINE>871</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>data.c</FILENAME>
      <LINE>883</LINE>
      <COLUMN>46</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '-' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '-' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>blend_truth</FUNCTION>
    <DECORATED>blend_truth</DECORATED>
    <FUNCLINE>871</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>data.c</FILENAME>
      <LINE>914</LINE>
      <COLUMN>48</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>blend_truth_mosaic</FUNCTION>
    <DECORATED>blend_truth_mosaic</DECORATED>
    <FUNCLINE>897</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>data.c</FILENAME>
      <LINE>916</LINE>
      <COLUMN>64</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>blend_truth_mosaic</FUNCTION>
    <DECORATED>blend_truth_mosaic</DECORATED>
    <FUNCLINE>897</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>data.c</FILENAME>
      <LINE>916</LINE>
      <COLUMN>46</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '-' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '-' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>blend_truth_mosaic</FUNCTION>
    <DECORATED>blend_truth_mosaic</DECORATED>
    <FUNCLINE>897</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>data.c</FILENAME>
      <LINE>1370</LINE>
      <COLUMN>12</COLUMN>
    </SFA>
    <DEFECTCODE>6993</DEFECTCODE>
    <DESCRIPTION>코드 분석에서 OpenMP 구문이 무시되고 단일 스레드 코드를 분석합니다.</DESCRIPTION>
    <FUNCTION></FUNCTION>
    <DECORATED></DECORATED>
    <FUNCLINE>0</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>data.c</FILENAME>
      <LINE>1419</LINE>
      <COLUMN>54</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>load_data_detection</FUNCTION>
    <DECORATED>load_data_detection</DECORATED>
    <FUNCLINE>1375</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>data.c</FILENAME>
      <LINE>1538</LINE>
      <COLUMN>50</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>load_data_detection</FUNCTION>
    <DECORATED>load_data_detection</DECORATED>
    <FUNCLINE>1375</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>data.c</FILENAME>
      <LINE>1547</LINE>
      <COLUMN>63</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>load_data_detection</FUNCTION>
    <DECORATED>load_data_detection</DECORATED>
    <FUNCLINE>1375</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>data.c</FILENAME>
      <LINE>2027</LINE>
      <COLUMN>38</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '+' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '+' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>concat_matrix</FUNCTION>
    <DECORATED>concat_matrix</DECORATED>
    <FUNCLINE>2021</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>data.c</FILENAME>
      <LINE>2089</LINE>
      <COLUMN>13</COLUMN>
    </SFA>
    <DEFECTCODE>6387</DEFECTCODE>
    <DESCRIPTION>'fp'이(가) '0'일 수 있습니다.  이 경우 'fread' 함수의 사양과 일치하지 않습니다. </DESCRIPTION>
    <FUNCTION>load_cifar10_data</FUNCTION>
    <DECORATED>load_cifar10_data</DECORATED>
    <FUNCLINE>2075</FUNCLINE>
    <PROBABILITY>1</PROBABILITY>
    <RANK>4</RANK>
    <CATEGORY>
      <RULECATEGORY>mspft</RULECATEGORY>
    </CATEGORY>
    <PATH>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>data.c</FILENAME>
        <LINE>2077</LINE>
        <COLUMN>9</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>data.c</FILENAME>
        <LINE>2078</LINE>
        <COLUMN>14</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>data.c</FILENAME>
        <LINE>2079</LINE>
        <COLUMN>9</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>data.c</FILENAME>
        <LINE>2079</LINE>
        <COLUMN>11</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>data.c</FILENAME>
        <LINE>2080</LINE>
        <COLUMN>11</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>data.c</FILENAME>
        <LINE>2081</LINE>
        <COLUMN>11</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>data.c</FILENAME>
        <LINE>2082</LINE>
        <COLUMN>8</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>data.c</FILENAME>
        <LINE>2083</LINE>
        <COLUMN>8</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>data.c</FILENAME>
        <LINE>2085</LINE>
        <COLUMN>10</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>data.c</FILENAME>
        <LINE>2086</LINE>
        <COLUMN>7</COLUMN>
        <KEYEVENT>
          <ID>1</ID>
          <KIND>분기</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>'fp'은(는) NULL일 수 있습니다. (이 분기 시작)</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>data.c</FILENAME>
        <LINE>2086</LINE>
        <COLUMN>22</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>data.c</FILENAME>
        <LINE>2087</LINE>
        <COLUMN>10</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>data.c</FILENAME>
        <LINE>2087</LINE>
        <COLUMN>17</COLUMN>
        <KEYEVENT>
          <ID>2</ID>
          <KIND>분기</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>이 루프 시작, ('i&lt;10000' 가정)</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>data.c</FILENAME>
        <LINE>2088</LINE>
        <COLUMN>22</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>data.c</FILENAME>
        <LINE>2089</LINE>
        <COLUMN>13</COLUMN>
        <KEYEVENT>
          <ID>3</ID>
          <KIND>선언</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>'fp'은(는) 'fread'(c:\program files (x86)\windows kits\10\include\10.0.19041.0\ucrt\stdio.h:239에서 선언됨)에 대한 In/Out 인수입니다.</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>data.c</FILENAME>
        <LINE>2089</LINE>
        <COLUMN>13</COLUMN>
        <KEYEVENT>
          <ID>4</ID>
          <KIND>사용법</KIND>
          <IMPORTANCE>Essential</IMPORTANCE>
          <MESSAGE>'fp'은(는) NULL(이)면 안 됩니다. 이는 'fread'의 SAL 주석과 일치하지 않습니다.</MESSAGE>
        </KEYEVENT>
      </SFA>
    </PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>data.c</FILENAME>
      <LINE>2099</LINE>
      <COLUMN>10</COLUMN>
    </SFA>
    <DEFECTCODE>6387</DEFECTCODE>
    <DESCRIPTION>'fp'이(가) '0'일 수 있습니다.  이 경우 'fclose' 함수의 사양과 일치하지 않습니다. 이 오류가 발생할 수 있는 이전 위치는 줄 2089을(를) 참조하십시오.</DESCRIPTION>
    <FUNCTION>load_cifar10_data</FUNCTION>
    <DECORATED>load_cifar10_data</DECORATED>
    <FUNCLINE>2075</FUNCLINE>
    <PROBABILITY>1</PROBABILITY>
    <RANK>4</RANK>
    <CATEGORY>
      <RULECATEGORY>mspft</RULECATEGORY>
    </CATEGORY>
    <PATH>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>data.c</FILENAME>
        <LINE>2077</LINE>
        <COLUMN>9</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>data.c</FILENAME>
        <LINE>2078</LINE>
        <COLUMN>14</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>data.c</FILENAME>
        <LINE>2079</LINE>
        <COLUMN>9</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>data.c</FILENAME>
        <LINE>2079</LINE>
        <COLUMN>11</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>data.c</FILENAME>
        <LINE>2080</LINE>
        <COLUMN>11</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>data.c</FILENAME>
        <LINE>2081</LINE>
        <COLUMN>11</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>data.c</FILENAME>
        <LINE>2082</LINE>
        <COLUMN>8</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>data.c</FILENAME>
        <LINE>2083</LINE>
        <COLUMN>8</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>data.c</FILENAME>
        <LINE>2085</LINE>
        <COLUMN>10</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>data.c</FILENAME>
        <LINE>2086</LINE>
        <COLUMN>7</COLUMN>
        <KEYEVENT>
          <ID>1</ID>
          <KIND>분기</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>'fp'은(는) NULL일 수 있습니다. (이 분기 시작)</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>data.c</FILENAME>
        <LINE>2086</LINE>
        <COLUMN>22</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>data.c</FILENAME>
        <LINE>2087</LINE>
        <COLUMN>10</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>data.c</FILENAME>
        <LINE>2087</LINE>
        <COLUMN>17</COLUMN>
        <KEYEVENT>
          <ID>2</ID>
          <KIND>분기</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>이 루프 시작, ('i&lt;10000' 가정)</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>data.c</FILENAME>
        <LINE>2088</LINE>
        <COLUMN>22</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>data.c</FILENAME>
        <LINE>2089</LINE>
        <COLUMN>13</COLUMN>
        <KEYEVENT>
          <ID>3</ID>
          <KIND>선언</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>'fp'은(는) 'fread'(c:\program files (x86)\windows kits\10\include\10.0.19041.0\ucrt\stdio.h:239에서 선언됨)에 대한 In/Out 인수입니다.</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>data.c</FILENAME>
        <LINE>2090</LINE>
        <COLUMN>12</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>data.c</FILENAME>
        <LINE>2091</LINE>
        <COLUMN>28</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>data.c</FILENAME>
        <LINE>2092</LINE>
        <COLUMN>14</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>data.c</FILENAME>
        <LINE>2092</LINE>
        <COLUMN>21</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>data.c</FILENAME>
        <LINE>2087</LINE>
        <COLUMN>26</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>data.c</FILENAME>
        <LINE>2087</LINE>
        <COLUMN>17</COLUMN>
        <KEYEVENT>
          <ID>4</ID>
          <KIND>분기</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>이 루프 시작, ('i&lt;10000' 가정)</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>data.c</FILENAME>
        <LINE>2088</LINE>
        <COLUMN>22</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>data.c</FILENAME>
        <LINE>2089</LINE>
        <COLUMN>13</COLUMN>
        <KEYEVENT>
          <ID>5</ID>
          <KIND>선언</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>'fp'은(는) 'fread'(c:\program files (x86)\windows kits\10\include\10.0.19041.0\ucrt\stdio.h:239에서 선언됨)에 대한 In/Out 인수입니다.</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>data.c</FILENAME>
        <LINE>2090</LINE>
        <COLUMN>12</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>data.c</FILENAME>
        <LINE>2091</LINE>
        <COLUMN>28</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>data.c</FILENAME>
        <LINE>2092</LINE>
        <COLUMN>14</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>data.c</FILENAME>
        <LINE>2092</LINE>
        <COLUMN>21</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>data.c</FILENAME>
        <LINE>2087</LINE>
        <COLUMN>26</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>data.c</FILENAME>
        <LINE>2087</LINE>
        <COLUMN>17</COLUMN>
        <KEYEVENT>
          <ID>6</ID>
          <KIND>분기</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>이 루프 계속, ('i&lt;10000' 가정)</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>data.c</FILENAME>
        <LINE>2097</LINE>
        <COLUMN>19</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>data.c</FILENAME>
        <LINE>2099</LINE>
        <COLUMN>10</COLUMN>
        <KEYEVENT>
          <ID>7</ID>
          <KIND>사용법</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>'fp'은(는) 'fclose'(c:\program files (x86)\windows kits\10\include\10.0.19041.0\ucrt\stdio.h:152에서 선언됨)에 대한 입력입니다.</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>data.c</FILENAME>
        <LINE>2099</LINE>
        <COLUMN>10</COLUMN>
        <KEYEVENT>
          <ID>8</ID>
          <KIND>사용법</KIND>
          <IMPORTANCE>Essential</IMPORTANCE>
          <MESSAGE>'fp'은(는) NULL(이)면 안 됩니다. 이는 'fclose'의 SAL 주석과 일치하지 않습니다.</MESSAGE>
        </KEYEVENT>
      </SFA>
    </PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>data.c</FILENAME>
      <LINE>2108</LINE>
      <COLUMN>18</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>get_random_batch</FUNCTION>
    <DECORATED>get_random_batch</DECORATED>
    <FUNCLINE>2103</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>data.c</FILENAME>
      <LINE>2109</LINE>
      <COLUMN>18</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>get_random_batch</FUNCTION>
    <DECORATED>get_random_batch</DECORATED>
    <FUNCLINE>2103</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>data.c</FILENAME>
      <LINE>2118</LINE>
      <COLUMN>18</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>get_next_batch</FUNCTION>
    <DECORATED>get_next_batch</DECORATED>
    <FUNCLINE>2113</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>data.c</FILENAME>
      <LINE>2119</LINE>
      <COLUMN>18</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>get_next_batch</FUNCTION>
    <DECORATED>get_next_batch</DECORATED>
    <FUNCLINE>2113</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>data.c</FILENAME>
      <LINE>2160</LINE>
      <COLUMN>14</COLUMN>
    </SFA>
    <DEFECTCODE>6387</DEFECTCODE>
    <DESCRIPTION>'fp'이(가) '0'일 수 있습니다.  이 경우 'fclose' 함수의 사양과 일치하지 않습니다. 이 오류가 발생할 수 있는 이전 위치는 줄 2153을(를) 참조하십시오.</DESCRIPTION>
    <FUNCTION>load_all_cifar10</FUNCTION>
    <DECORATED>load_all_cifar10</DECORATED>
    <FUNCLINE>2135</FUNCLINE>
    <PROBABILITY>1</PROBABILITY>
    <RANK>4</RANK>
    <CATEGORY>
      <RULECATEGORY>mspft</RULECATEGORY>
    </CATEGORY>
    <PATH>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>data.c</FILENAME>
        <LINE>2137</LINE>
        <COLUMN>9</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>data.c</FILENAME>
        <LINE>2138</LINE>
        <COLUMN>14</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>data.c</FILENAME>
        <LINE>2139</LINE>
        <COLUMN>8</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>data.c</FILENAME>
        <LINE>2139</LINE>
        <COLUMN>10</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>data.c</FILENAME>
        <LINE>2139</LINE>
        <COLUMN>12</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>data.c</FILENAME>
        <LINE>2140</LINE>
        <COLUMN>11</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>data.c</FILENAME>
        <LINE>2141</LINE>
        <COLUMN>11</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>data.c</FILENAME>
        <LINE>2142</LINE>
        <COLUMN>8</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>data.c</FILENAME>
        <LINE>2143</LINE>
        <COLUMN>8</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>data.c</FILENAME>
        <LINE>2146</LINE>
        <COLUMN>10</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>data.c</FILENAME>
        <LINE>2146</LINE>
        <COLUMN>17</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>data.c</FILENAME>
        <LINE>2147</LINE>
        <COLUMN>13</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>data.c</FILENAME>
        <LINE>2148</LINE>
        <COLUMN>15</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>data.c</FILENAME>
        <LINE>2149</LINE>
        <COLUMN>14</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>data.c</FILENAME>
        <LINE>2150</LINE>
        <COLUMN>11</COLUMN>
        <KEYEVENT>
          <ID>1</ID>
          <KIND>분기</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>'fp'은(는) NULL일 수 있습니다. (이 분기 시작)</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>data.c</FILENAME>
        <LINE>2150</LINE>
        <COLUMN>26</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>data.c</FILENAME>
        <LINE>2151</LINE>
        <COLUMN>14</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>data.c</FILENAME>
        <LINE>2151</LINE>
        <COLUMN>21</COLUMN>
        <KEYEVENT>
          <ID>2</ID>
          <KIND>분기</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>이 루프 시작, ('i&lt;10000' 가정)</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>data.c</FILENAME>
        <LINE>2152</LINE>
        <COLUMN>26</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>data.c</FILENAME>
        <LINE>2153</LINE>
        <COLUMN>17</COLUMN>
        <KEYEVENT>
          <ID>3</ID>
          <KIND>선언</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>'fp'은(는) 'fread'(c:\program files (x86)\windows kits\10\include\10.0.19041.0\ucrt\stdio.h:239에서 선언됨)에 대한 In/Out 인수입니다.</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>data.c</FILENAME>
        <LINE>2154</LINE>
        <COLUMN>16</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>data.c</FILENAME>
        <LINE>2155</LINE>
        <COLUMN>40</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>data.c</FILENAME>
        <LINE>2156</LINE>
        <COLUMN>18</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>data.c</FILENAME>
        <LINE>2156</LINE>
        <COLUMN>25</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>data.c</FILENAME>
        <LINE>2151</LINE>
        <COLUMN>30</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>data.c</FILENAME>
        <LINE>2151</LINE>
        <COLUMN>21</COLUMN>
        <KEYEVENT>
          <ID>4</ID>
          <KIND>분기</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>이 루프 시작, ('i&lt;10000' 가정)</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>data.c</FILENAME>
        <LINE>2152</LINE>
        <COLUMN>26</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>data.c</FILENAME>
        <LINE>2153</LINE>
        <COLUMN>17</COLUMN>
        <KEYEVENT>
          <ID>5</ID>
          <KIND>선언</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>'fp'은(는) 'fread'(c:\program files (x86)\windows kits\10\include\10.0.19041.0\ucrt\stdio.h:239에서 선언됨)에 대한 In/Out 인수입니다.</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>data.c</FILENAME>
        <LINE>2154</LINE>
        <COLUMN>16</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>data.c</FILENAME>
        <LINE>2155</LINE>
        <COLUMN>40</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>data.c</FILENAME>
        <LINE>2156</LINE>
        <COLUMN>18</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>data.c</FILENAME>
        <LINE>2156</LINE>
        <COLUMN>25</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>data.c</FILENAME>
        <LINE>2151</LINE>
        <COLUMN>30</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>data.c</FILENAME>
        <LINE>2151</LINE>
        <COLUMN>21</COLUMN>
        <KEYEVENT>
          <ID>6</ID>
          <KIND>분기</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>이 루프 계속, ('i&lt;10000' 가정)</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>data.c</FILENAME>
        <LINE>2160</LINE>
        <COLUMN>14</COLUMN>
        <KEYEVENT>
          <ID>7</ID>
          <KIND>사용법</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>'fp'은(는) 'fclose'(c:\program files (x86)\windows kits\10\include\10.0.19041.0\ucrt\stdio.h:152에서 선언됨)에 대한 입력입니다.</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>data.c</FILENAME>
        <LINE>2160</LINE>
        <COLUMN>14</COLUMN>
        <KEYEVENT>
          <ID>8</ID>
          <KIND>사용법</KIND>
          <IMPORTANCE>Essential</IMPORTANCE>
          <MESSAGE>'fp'은(는) NULL(이)면 안 됩니다. 이는 'fclose'의 SAL 주석과 일치하지 않습니다.</MESSAGE>
        </KEYEVENT>
      </SFA>
    </PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>data.c</FILENAME>
      <LINE>2153</LINE>
      <COLUMN>17</COLUMN>
    </SFA>
    <DEFECTCODE>6387</DEFECTCODE>
    <DESCRIPTION>'fp'이(가) '0'일 수 있습니다.  이 경우 'fread' 함수의 사양과 일치하지 않습니다. </DESCRIPTION>
    <FUNCTION>load_all_cifar10</FUNCTION>
    <DECORATED>load_all_cifar10</DECORATED>
    <FUNCLINE>2135</FUNCLINE>
    <PROBABILITY>1</PROBABILITY>
    <RANK>4</RANK>
    <CATEGORY>
      <RULECATEGORY>mspft</RULECATEGORY>
    </CATEGORY>
    <PATH>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>data.c</FILENAME>
        <LINE>2137</LINE>
        <COLUMN>9</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>data.c</FILENAME>
        <LINE>2138</LINE>
        <COLUMN>14</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>data.c</FILENAME>
        <LINE>2139</LINE>
        <COLUMN>8</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>data.c</FILENAME>
        <LINE>2139</LINE>
        <COLUMN>10</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>data.c</FILENAME>
        <LINE>2139</LINE>
        <COLUMN>12</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>data.c</FILENAME>
        <LINE>2140</LINE>
        <COLUMN>11</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>data.c</FILENAME>
        <LINE>2141</LINE>
        <COLUMN>11</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>data.c</FILENAME>
        <LINE>2142</LINE>
        <COLUMN>8</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>data.c</FILENAME>
        <LINE>2143</LINE>
        <COLUMN>8</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>data.c</FILENAME>
        <LINE>2146</LINE>
        <COLUMN>10</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>data.c</FILENAME>
        <LINE>2146</LINE>
        <COLUMN>17</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>data.c</FILENAME>
        <LINE>2147</LINE>
        <COLUMN>13</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>data.c</FILENAME>
        <LINE>2148</LINE>
        <COLUMN>15</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>data.c</FILENAME>
        <LINE>2149</LINE>
        <COLUMN>14</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>data.c</FILENAME>
        <LINE>2150</LINE>
        <COLUMN>11</COLUMN>
        <KEYEVENT>
          <ID>1</ID>
          <KIND>분기</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>'fp'은(는) NULL일 수 있습니다. (이 분기 시작)</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>data.c</FILENAME>
        <LINE>2150</LINE>
        <COLUMN>26</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>data.c</FILENAME>
        <LINE>2151</LINE>
        <COLUMN>14</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>data.c</FILENAME>
        <LINE>2151</LINE>
        <COLUMN>21</COLUMN>
        <KEYEVENT>
          <ID>2</ID>
          <KIND>분기</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>이 루프 시작, ('i&lt;10000' 가정)</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>data.c</FILENAME>
        <LINE>2152</LINE>
        <COLUMN>26</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>data.c</FILENAME>
        <LINE>2153</LINE>
        <COLUMN>17</COLUMN>
        <KEYEVENT>
          <ID>3</ID>
          <KIND>선언</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>'fp'은(는) 'fread'(c:\program files (x86)\windows kits\10\include\10.0.19041.0\ucrt\stdio.h:239에서 선언됨)에 대한 In/Out 인수입니다.</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>data.c</FILENAME>
        <LINE>2153</LINE>
        <COLUMN>17</COLUMN>
        <KEYEVENT>
          <ID>4</ID>
          <KIND>사용법</KIND>
          <IMPORTANCE>Essential</IMPORTANCE>
          <MESSAGE>'fp'은(는) NULL(이)면 안 됩니다. 이는 'fread'의 SAL 주석과 일치하지 않습니다.</MESSAGE>
        </KEYEVENT>
      </SFA>
    </PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>data.c</FILENAME>
      <LINE>2185</LINE>
      <COLUMN>14</COLUMN>
    </SFA>
    <DEFECTCODE>6031</DEFECTCODE>
    <DESCRIPTION>반환 값이 무시되었습니다. 'sscanf'.</DESCRIPTION>
    <FUNCTION>load_go</FUNCTION>
    <DECORATED>load_go</DECORATED>
    <FUNCLINE>2169</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>data.c</FILENAME>
      <LINE>2210</LINE>
      <COLUMN>10</COLUMN>
    </SFA>
    <DEFECTCODE>6387</DEFECTCODE>
    <DESCRIPTION>'fp'이(가) '0'일 수 있습니다.  이 경우 'fclose' 함수의 사양과 일치하지 않습니다. </DESCRIPTION>
    <FUNCTION>load_go</FUNCTION>
    <DECORATED>load_go</DECORATED>
    <FUNCLINE>2169</FUNCLINE>
    <PROBABILITY>1</PROBABILITY>
    <RANK>4</RANK>
    <CATEGORY>
      <RULECATEGORY>mspft</RULECATEGORY>
    </CATEGORY>
    <PATH>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>data.c</FILENAME>
        <LINE>2171</LINE>
        <COLUMN>10</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>data.c</FILENAME>
        <LINE>2172</LINE>
        <COLUMN>11</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>data.c</FILENAME>
        <LINE>2173</LINE>
        <COLUMN>11</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>data.c</FILENAME>
        <LINE>2174</LINE>
        <COLUMN>8</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>data.c</FILENAME>
        <LINE>2174</LINE>
        <COLUMN>13</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>data.c</FILENAME>
        <LINE>2176</LINE>
        <COLUMN>7</COLUMN>
        <KEYEVENT>
          <ID>1</ID>
          <KIND>분기</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>'fp'은(는) NULL일 수 있습니다. (이 분기 시작)</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>data.c</FILENAME>
        <LINE>2176</LINE>
        <COLUMN>22</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>data.c</FILENAME>
        <LINE>2177</LINE>
        <COLUMN>10</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>data.c</FILENAME>
        <LINE>2178</LINE>
        <COLUMN>8</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>data.c</FILENAME>
        <LINE>2179</LINE>
        <COLUMN>17</COLUMN>
        <KEYEVENT>
          <ID>2</ID>
          <KIND>선언</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>'fp'은(는) 'fgetl'(d:\yolo_v4\darknet\src\utils.h:47에서 선언됨)에 대한 In/Out 인수입니다.</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>data.c</FILENAME>
        <LINE>2179</LINE>
        <COLUMN>17</COLUMN>
        <KEYEVENT>
          <ID>3</ID>
          <KIND>분기</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>이 루프 건너뛰기, ('label=fgetl(fp)'이(가) false라고 가정)</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>data.c</FILENAME>
        <LINE>2201</LINE>
        <COLUMN>6</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>data.c</FILENAME>
        <LINE>2202</LINE>
        <COLUMN>6</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>data.c</FILENAME>
        <LINE>2204</LINE>
        <COLUMN>9</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>data.c</FILENAME>
        <LINE>2205</LINE>
        <COLUMN>14</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>data.c</FILENAME>
        <LINE>2206</LINE>
        <COLUMN>8</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>data.c</FILENAME>
        <LINE>2207</LINE>
        <COLUMN>8</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>data.c</FILENAME>
        <LINE>2210</LINE>
        <COLUMN>10</COLUMN>
        <KEYEVENT>
          <ID>4</ID>
          <KIND>사용법</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>'fp'은(는) 'fclose'(c:\program files (x86)\windows kits\10\include\10.0.19041.0\ucrt\stdio.h:152에서 선언됨)에 대한 입력입니다.</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>data.c</FILENAME>
        <LINE>2210</LINE>
        <COLUMN>10</COLUMN>
        <KEYEVENT>
          <ID>5</ID>
          <KIND>사용법</KIND>
          <IMPORTANCE>Essential</IMPORTANCE>
          <MESSAGE>'fp'은(는) NULL(이)면 안 됩니다. 이는 'fclose'의 SAL 주석과 일치하지 않습니다.</MESSAGE>
        </KEYEVENT>
      </SFA>
    </PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>deconvolutional_layer.c</FILENAME>
      <LINE>60</LINE>
      <COLUMN>45</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_deconvolutional_layer</FUNCTION>
    <DECORATED>make_deconvolutional_layer</DECORATED>
    <FUNCLINE>46</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>deconvolutional_layer.c</FILENAME>
      <LINE>60</LINE>
      <COLUMN>38</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_deconvolutional_layer</FUNCTION>
    <DECORATED>make_deconvolutional_layer</DECORATED>
    <FUNCLINE>46</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>deconvolutional_layer.c</FILENAME>
      <LINE>60</LINE>
      <COLUMN>34</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_deconvolutional_layer</FUNCTION>
    <DECORATED>make_deconvolutional_layer</DECORATED>
    <FUNCLINE>46</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>deconvolutional_layer.c</FILENAME>
      <LINE>61</LINE>
      <COLUMN>52</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_deconvolutional_layer</FUNCTION>
    <DECORATED>make_deconvolutional_layer</DECORATED>
    <FUNCLINE>46</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>deconvolutional_layer.c</FILENAME>
      <LINE>61</LINE>
      <COLUMN>45</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_deconvolutional_layer</FUNCTION>
    <DECORATED>make_deconvolutional_layer</DECORATED>
    <FUNCLINE>46</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>deconvolutional_layer.c</FILENAME>
      <LINE>61</LINE>
      <COLUMN>41</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_deconvolutional_layer</FUNCTION>
    <DECORATED>make_deconvolutional_layer</DECORATED>
    <FUNCLINE>46</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>deconvolutional_layer.c</FILENAME>
      <LINE>65</LINE>
      <COLUMN>35</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_deconvolutional_layer</FUNCTION>
    <DECORATED>make_deconvolutional_layer</DECORATED>
    <FUNCLINE>46</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>deconvolutional_layer.c</FILENAME>
      <LINE>65</LINE>
      <COLUMN>30</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_deconvolutional_layer</FUNCTION>
    <DECORATED>make_deconvolutional_layer</DECORATED>
    <FUNCLINE>46</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>deconvolutional_layer.c</FILENAME>
      <LINE>79</LINE>
      <COLUMN>54</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_deconvolutional_layer</FUNCTION>
    <DECORATED>make_deconvolutional_layer</DECORATED>
    <FUNCLINE>46</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>deconvolutional_layer.c</FILENAME>
      <LINE>79</LINE>
      <COLUMN>47</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_deconvolutional_layer</FUNCTION>
    <DECORATED>make_deconvolutional_layer</DECORATED>
    <FUNCLINE>46</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>deconvolutional_layer.c</FILENAME>
      <LINE>79</LINE>
      <COLUMN>40</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_deconvolutional_layer</FUNCTION>
    <DECORATED>make_deconvolutional_layer</DECORATED>
    <FUNCLINE>46</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>deconvolutional_layer.c</FILENAME>
      <LINE>79</LINE>
      <COLUMN>36</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_deconvolutional_layer</FUNCTION>
    <DECORATED>make_deconvolutional_layer</DECORATED>
    <FUNCLINE>46</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>deconvolutional_layer.c</FILENAME>
      <LINE>80</LINE>
      <COLUMN>55</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_deconvolutional_layer</FUNCTION>
    <DECORATED>make_deconvolutional_layer</DECORATED>
    <FUNCLINE>46</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>deconvolutional_layer.c</FILENAME>
      <LINE>80</LINE>
      <COLUMN>47</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_deconvolutional_layer</FUNCTION>
    <DECORATED>make_deconvolutional_layer</DECORATED>
    <FUNCLINE>46</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>deconvolutional_layer.c</FILENAME>
      <LINE>80</LINE>
      <COLUMN>39</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_deconvolutional_layer</FUNCTION>
    <DECORATED>make_deconvolutional_layer</DECORATED>
    <FUNCLINE>46</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>deconvolutional_layer.c</FILENAME>
      <LINE>81</LINE>
      <COLUMN>54</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_deconvolutional_layer</FUNCTION>
    <DECORATED>make_deconvolutional_layer</DECORATED>
    <FUNCLINE>46</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>deconvolutional_layer.c</FILENAME>
      <LINE>81</LINE>
      <COLUMN>46</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_deconvolutional_layer</FUNCTION>
    <DECORATED>make_deconvolutional_layer</DECORATED>
    <FUNCLINE>46</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>deconvolutional_layer.c</FILENAME>
      <LINE>81</LINE>
      <COLUMN>38</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_deconvolutional_layer</FUNCTION>
    <DECORATED>make_deconvolutional_layer</DECORATED>
    <FUNCLINE>46</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>deconvolutional_layer.c</FILENAME>
      <LINE>114</LINE>
      <COLUMN>59</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>resize_deconvolutional_layer</FUNCTION>
    <DECORATED>resize_deconvolutional_layer</DECORATED>
    <FUNCLINE>106</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>deconvolutional_layer.c</FILENAME>
      <LINE>114</LINE>
      <COLUMN>51</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>resize_deconvolutional_layer</FUNCTION>
    <DECORATED>resize_deconvolutional_layer</DECORATED>
    <FUNCLINE>106</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>deconvolutional_layer.c</FILENAME>
      <LINE>114</LINE>
      <COLUMN>43</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>resize_deconvolutional_layer</FUNCTION>
    <DECORATED>resize_deconvolutional_layer</DECORATED>
    <FUNCLINE>106</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>deconvolutional_layer.c</FILENAME>
      <LINE>114</LINE>
      <COLUMN>37</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>resize_deconvolutional_layer</FUNCTION>
    <DECORATED>resize_deconvolutional_layer</DECORATED>
    <FUNCLINE>106</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>deconvolutional_layer.c</FILENAME>
      <LINE>116</LINE>
      <COLUMN>55</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>resize_deconvolutional_layer</FUNCTION>
    <DECORATED>resize_deconvolutional_layer</DECORATED>
    <FUNCLINE>106</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>deconvolutional_layer.c</FILENAME>
      <LINE>116</LINE>
      <COLUMN>47</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>resize_deconvolutional_layer</FUNCTION>
    <DECORATED>resize_deconvolutional_layer</DECORATED>
    <FUNCLINE>106</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>deconvolutional_layer.c</FILENAME>
      <LINE>116</LINE>
      <COLUMN>40</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>resize_deconvolutional_layer</FUNCTION>
    <DECORATED>resize_deconvolutional_layer</DECORATED>
    <FUNCLINE>106</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>deconvolutional_layer.c</FILENAME>
      <LINE>118</LINE>
      <COLUMN>55</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>resize_deconvolutional_layer</FUNCTION>
    <DECORATED>resize_deconvolutional_layer</DECORATED>
    <FUNCLINE>106</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>deconvolutional_layer.c</FILENAME>
      <LINE>118</LINE>
      <COLUMN>47</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>resize_deconvolutional_layer</FUNCTION>
    <DECORATED>resize_deconvolutional_layer</DECORATED>
    <FUNCLINE>106</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>deconvolutional_layer.c</FILENAME>
      <LINE>118</LINE>
      <COLUMN>40</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>resize_deconvolutional_layer</FUNCTION>
    <DECORATED>resize_deconvolutional_layer</DECORATED>
    <FUNCLINE>106</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>deconvolutional_layer.c</FILENAME>
      <LINE>145</LINE>
      <COLUMN>42</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>forward_deconvolutional_layer</FUNCTION>
    <DECORATED>forward_deconvolutional_layer</DECORATED>
    <FUNCLINE>130</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>deconvolutional_layer.c</FILENAME>
      <LINE>145</LINE>
      <COLUMN>38</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>forward_deconvolutional_layer</FUNCTION>
    <DECORATED>forward_deconvolutional_layer</DECORATED>
    <FUNCLINE>130</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>deconvolutional_layer.c</FILENAME>
      <LINE>145</LINE>
      <COLUMN>34</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>forward_deconvolutional_layer</FUNCTION>
    <DECORATED>forward_deconvolutional_layer</DECORATED>
    <FUNCLINE>130</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>deconvolutional_layer.c</FILENAME>
      <LINE>150</LINE>
      <COLUMN>76</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>forward_deconvolutional_layer</FUNCTION>
    <DECORATED>forward_deconvolutional_layer</DECORATED>
    <FUNCLINE>130</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>deconvolutional_layer.c</FILENAME>
      <LINE>150</LINE>
      <COLUMN>72</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>forward_deconvolutional_layer</FUNCTION>
    <DECORATED>forward_deconvolutional_layer</DECORATED>
    <FUNCLINE>130</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>deconvolutional_layer.c</FILENAME>
      <LINE>172</LINE>
      <COLUMN>36</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>backward_deconvolutional_layer</FUNCTION>
    <DECORATED>backward_deconvolutional_layer</DECORATED>
    <FUNCLINE>156</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>deconvolutional_layer.c</FILENAME>
      <LINE>172</LINE>
      <COLUMN>34</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>backward_deconvolutional_layer</FUNCTION>
    <DECORATED>backward_deconvolutional_layer</DECORATED>
    <FUNCLINE>156</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>deconvolutional_layer.c</FILENAME>
      <LINE>176</LINE>
      <COLUMN>34</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>backward_deconvolutional_layer</FUNCTION>
    <DECORATED>backward_deconvolutional_layer</DECORATED>
    <FUNCLINE>156</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>deconvolutional_layer.c</FILENAME>
      <LINE>176</LINE>
      <COLUMN>30</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>backward_deconvolutional_layer</FUNCTION>
    <DECORATED>backward_deconvolutional_layer</DECORATED>
    <FUNCLINE>156</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>deconvolutional_layer.c</FILENAME>
      <LINE>187</LINE>
      <COLUMN>40</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>backward_deconvolutional_layer</FUNCTION>
    <DECORATED>backward_deconvolutional_layer</DECORATED>
    <FUNCLINE>156</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>deconvolutional_layer.c</FILENAME>
      <LINE>187</LINE>
      <COLUMN>38</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>backward_deconvolutional_layer</FUNCTION>
    <DECORATED>backward_deconvolutional_layer</DECORATED>
    <FUNCLINE>156</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>detection_layer.c</FILENAME>
      <LINE>31</LINE>
      <COLUMN>37</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_detection_layer</FUNCTION>
    <DECORATED>make_detection_layer</DECORATED>
    <FUNCLINE>13</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>detection_layer.c</FILENAME>
      <LINE>32</LINE>
      <COLUMN>36</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_detection_layer</FUNCTION>
    <DECORATED>make_detection_layer</DECORATED>
    <FUNCLINE>13</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>detection_layer.c</FILENAME>
      <LINE>53</LINE>
      <COLUMN>43</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>forward_detection_layer</FUNCTION>
    <DECORATED>forward_detection_layer</DECORATED>
    <FUNCLINE>49</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>detection_layer.c</FILENAME>
      <LINE>99</LINE>
      <COLUMN>82</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '-' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '-' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>forward_detection_layer</FUNCTION>
    <DECORATED>forward_detection_layer</DECORATED>
    <FUNCLINE>49</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>detection_layer.c</FILENAME>
      <LINE>136</LINE>
      <COLUMN>30</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>forward_detection_layer</FUNCTION>
    <DECORATED>forward_detection_layer</DECORATED>
    <FUNCLINE>49</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>detection_layer.c</FILENAME>
      <LINE>161</LINE>
      <COLUMN>51</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '-' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '-' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>forward_detection_layer</FUNCTION>
    <DECORATED>forward_detection_layer</DECORATED>
    <FUNCLINE>49</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>detection_layer.c</FILENAME>
      <LINE>178</LINE>
      <COLUMN>34</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '-' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '-' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>forward_detection_layer</FUNCTION>
    <DECORATED>forward_detection_layer</DECORATED>
    <FUNCLINE>49</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>detection_layer.c</FILENAME>
      <LINE>185</LINE>
      <COLUMN>63</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>forward_detection_layer</FUNCTION>
    <DECORATED>forward_detection_layer</DECORATED>
    <FUNCLINE>49</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>detection_layer.c</FILENAME>
      <LINE>185</LINE>
      <COLUMN>51</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>forward_detection_layer</FUNCTION>
    <DECORATED>forward_detection_layer</DECORATED>
    <FUNCLINE>49</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>detector.c</FILENAME>
      <LINE>38</LINE>
      <COLUMN>19</COLUMN>
    </SFA>
    <DEFECTCODE>6031</DEFECTCODE>
    <DESCRIPTION>반환 값이 무시되었습니다. 'getchar'.</DESCRIPTION>
    <FUNCTION>train_detector</FUNCTION>
    <DECORATED>train_detector</DECORATED>
    <FUNCLINE>26</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>detector.c</FILENAME>
      <LINE>58</LINE>
      <COLUMN>49</COLUMN>
    </SFA>
    <DEFECTCODE>6031</DEFECTCODE>
    <DESCRIPTION>반환 값이 무시되었습니다. 'getchar'.</DESCRIPTION>
    <FUNCTION>train_detector</FUNCTION>
    <DECORATED>train_detector</DECORATED>
    <FUNCLINE>26</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>detector.c</FILENAME>
      <LINE>95</LINE>
      <COLUMN>15</COLUMN>
    </SFA>
    <DEFECTCODE>6031</DEFECTCODE>
    <DESCRIPTION>반환 값이 무시되었습니다. 'getchar'.</DESCRIPTION>
    <FUNCTION>train_detector</FUNCTION>
    <DECORATED>train_detector</DECORATED>
    <FUNCLINE>26</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>detector.c</FILENAME>
      <LINE>200</LINE>
      <COLUMN>67</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '+' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '+' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>train_detector</FUNCTION>
    <DECORATED>train_detector</DECORATED>
    <FUNCLINE>26</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>detector.c</FILENAME>
      <LINE>201</LINE>
      <COLUMN>67</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '+' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '+' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>train_detector</FUNCTION>
    <DECORATED>train_detector</DECORATED>
    <FUNCLINE>26</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>detector.c</FILENAME>
      <LINE>204</LINE>
      <COLUMN>70</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '+' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '+' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>train_detector</FUNCTION>
    <DECORATED>train_detector</DECORATED>
    <FUNCLINE>26</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>detector.c</FILENAME>
      <LINE>205</LINE>
      <COLUMN>70</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '+' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '+' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>train_detector</FUNCTION>
    <DECORATED>train_detector</DECORATED>
    <FUNCLINE>26</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>detector.c</FILENAME>
      <LINE>208</LINE>
      <COLUMN>77</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '-' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '-' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>train_detector</FUNCTION>
    <DECORATED>train_detector</DECORATED>
    <FUNCLINE>26</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>detector.c</FILENAME>
      <LINE>225</LINE>
      <COLUMN>45</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>train_detector</FUNCTION>
    <DECORATED>train_detector</DECORATED>
    <FUNCLINE>26</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>detector.c</FILENAME>
      <LINE>308</LINE>
      <COLUMN>131</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>train_detector</FUNCTION>
    <DECORATED>train_detector</DECORATED>
    <FUNCLINE>26</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>detector.c</FILENAME>
      <LINE>308</LINE>
      <COLUMN>147</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>train_detector</FUNCTION>
    <DECORATED>train_detector</DECORATED>
    <FUNCLINE>26</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>detector.c</FILENAME>
      <LINE>965</LINE>
      <COLUMN>15</COLUMN>
    </SFA>
    <DEFECTCODE>6031</DEFECTCODE>
    <DESCRIPTION>반환 값이 무시되었습니다. 'getchar'.</DESCRIPTION>
    <FUNCTION>validate_detector_map</FUNCTION>
    <DECORATED>validate_detector_map</DECORATED>
    <FUNCLINE>930</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>detector.c</FILENAME>
      <LINE>1261</LINE>
      <COLUMN>80</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '+' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '+' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>validate_detector_map</FUNCTION>
    <DECORATED>validate_detector_map</DECORATED>
    <FUNCLINE>930</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>detector.c</FILENAME>
      <LINE>1264</LINE>
      <COLUMN>77</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '+' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '+' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>validate_detector_map</FUNCTION>
    <DECORATED>validate_detector_map</DECORATED>
    <FUNCLINE>930</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>detector.c</FILENAME>
      <LINE>1311</LINE>
      <COLUMN>61</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '-' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '-' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>validate_detector_map</FUNCTION>
    <DECORATED>validate_detector_map</DECORATED>
    <FUNCLINE>930</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>detector.c</FILENAME>
      <LINE>1345</LINE>
      <COLUMN>103</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>validate_detector_map</FUNCTION>
    <DECORATED>validate_detector_map</DECORATED>
    <FUNCLINE>930</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>detector.c</FILENAME>
      <LINE>1348</LINE>
      <COLUMN>55</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>validate_detector_map</FUNCTION>
    <DECORATED>validate_detector_map</DECORATED>
    <FUNCLINE>930</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>detector.c</FILENAME>
      <LINE>1467</LINE>
      <COLUMN>43</COLUMN>
    </SFA>
    <DEFECTCODE>6031</DEFECTCODE>
    <DESCRIPTION>반환 값이 무시되었습니다. 'getchar'.</DESCRIPTION>
    <FUNCTION>calc_anchors</FUNCTION>
    <DECORATED>calc_anchors</DECORATED>
    <FUNCLINE>1421</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>detector.c</FILENAME>
      <LINE>1599</LINE>
      <COLUMN>11</COLUMN>
    </SFA>
    <DEFECTCODE>6031</DEFECTCODE>
    <DESCRIPTION>반환 값이 무시되었습니다. 'getchar'.</DESCRIPTION>
    <FUNCTION>calc_anchors</FUNCTION>
    <DECORATED>calc_anchors</DECORATED>
    <FUNCLINE>1421</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>detector.c</FILENAME>
      <LINE>1476</LINE>
      <COLUMN>80</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>calc_anchors</FUNCTION>
    <DECORATED>calc_anchors</DECORATED>
    <FUNCLINE>1421</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>detector.c</FILENAME>
      <LINE>1623</LINE>
      <COLUMN>63</COLUMN>
    </SFA>
    <DEFECTCODE>6031</DEFECTCODE>
    <DESCRIPTION>반환 값이 무시되었습니다. 'getchar'.</DESCRIPTION>
    <FUNCTION>test_detector</FUNCTION>
    <DECORATED>test_detector</DECORATED>
    <FUNCLINE>1603</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>detector.c</FILENAME>
      <LINE>1652</LINE>
      <COLUMN>18</COLUMN>
    </SFA>
    <DEFECTCODE>6031</DEFECTCODE>
    <DESCRIPTION>반환 값이 무시되었습니다. 'strtok'.</DESCRIPTION>
    <FUNCTION>test_detector</FUNCTION>
    <DECORATED>test_detector</DECORATED>
    <FUNCLINE>1603</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>detector.c</FILENAME>
      <LINE>1939</LINE>
      <COLUMN>11</COLUMN>
    </SFA>
    <DEFECTCODE>6031</DEFECTCODE>
    <DESCRIPTION>반환 값이 무시되었습니다. 'getchar'.</DESCRIPTION>
    <FUNCTION>draw_object</FUNCTION>
    <DECORATED>draw_object</DECORATED>
    <FUNCLINE>1935</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>dice.c</FILENAME>
      <LINE>36</LINE>
      <COLUMN>14</COLUMN>
    </SFA>
    <DEFECTCODE>6328</DEFECTCODE>
    <DESCRIPTION>크기 불일치: 'unsigned __int64'이(가) _Param_(6)으로 전달되었습니다. 다음 호출에는 'int'이(가) 필요합니다. 'printf'. </DESCRIPTION>
    <FUNCTION>train_dice</FUNCTION>
    <DECORATED>train_dice</DECORATED>
    <FUNCLINE>7</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>dice.c</FILENAME>
      <LINE>89</LINE>
      <COLUMN>18</COLUMN>
    </SFA>
    <DEFECTCODE>6031</DEFECTCODE>
    <DESCRIPTION>반환 값이 무시되었습니다. 'strtok'.</DESCRIPTION>
    <FUNCTION>test_dice</FUNCTION>
    <DECORATED>test_dice</DECORATED>
    <FUNCLINE>68</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>dropout_layer.c</FILENAME>
      <LINE>28</LINE>
      <COLUMN>36</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_dropout_layer</FUNCTION>
    <DECORATED>make_dropout_layer</DECORATED>
    <FUNCLINE>7</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>dropout_layer.c</FILENAME>
      <LINE>52</LINE>
      <COLUMN>50</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>resize_dropout_layer</FUNCTION>
    <DECORATED>resize_dropout_layer</DECORATED>
    <FUNCLINE>49</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>gaussian_yolo_layer.c</FILENAME>
      <LINE>103</LINE>
      <COLUMN>54</COLUMN>
    </SFA>
    <DEFECTCODE>6308</DEFECTCODE>
    <DESCRIPTION>'realloc'는 null 포인터를 반환할 수 있습니다. 'realloc'에 인수로 전달되는 'l-&gt;output'에 null 포인터를 할당하면 원래 메모리 블록에서 누수가 발생할 수 있습니다.</DESCRIPTION>
    <FUNCTION>resize_gaussian_yolo_layer</FUNCTION>
    <DECORATED>resize_gaussian_yolo_layer</DECORATED>
    <FUNCLINE>92</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>gaussian_yolo_layer.c</FILENAME>
      <LINE>104</LINE>
      <COLUMN>52</COLUMN>
    </SFA>
    <DEFECTCODE>6308</DEFECTCODE>
    <DESCRIPTION>'realloc'는 null 포인터를 반환할 수 있습니다. 'realloc'에 인수로 전달되는 'l-&gt;delta'에 null 포인터를 할당하면 원래 메모리 블록에서 누수가 발생할 수 있습니다.</DESCRIPTION>
    <FUNCTION>resize_gaussian_yolo_layer</FUNCTION>
    <DECORATED>resize_gaussian_yolo_layer</DECORATED>
    <FUNCLINE>92</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>gaussian_yolo_layer.c</FILENAME>
      <LINE>103</LINE>
      <COLUMN>74</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>resize_gaussian_yolo_layer</FUNCTION>
    <DECORATED>resize_gaussian_yolo_layer</DECORATED>
    <FUNCLINE>92</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>gaussian_yolo_layer.c</FILENAME>
      <LINE>104</LINE>
      <COLUMN>71</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>resize_gaussian_yolo_layer</FUNCTION>
    <DECORATED>resize_gaussian_yolo_layer</DECORATED>
    <FUNCLINE>92</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>gaussian_yolo_layer.c</FILENAME>
      <LINE>218</LINE>
      <COLUMN>87</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '+' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '+' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>delta_gaussian_yolo_box</FUNCTION>
    <DECORATED>delta_gaussian_yolo_box</DECORATED>
    <FUNCLINE>171</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>gaussian_yolo_layer.c</FILENAME>
      <LINE>222</LINE>
      <COLUMN>87</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '+' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '+' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>delta_gaussian_yolo_box</FUNCTION>
    <DECORATED>delta_gaussian_yolo_box</DECORATED>
    <FUNCLINE>171</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>gaussian_yolo_layer.c</FILENAME>
      <LINE>226</LINE>
      <COLUMN>87</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '+' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '+' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>delta_gaussian_yolo_box</FUNCTION>
    <DECORATED>delta_gaussian_yolo_box</DECORATED>
    <FUNCLINE>171</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>gaussian_yolo_layer.c</FILENAME>
      <LINE>230</LINE>
      <COLUMN>87</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '+' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '+' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>delta_gaussian_yolo_box</FUNCTION>
    <DECORATED>delta_gaussian_yolo_box</DECORATED>
    <FUNCLINE>171</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>gaussian_yolo_layer.c</FILENAME>
      <LINE>232</LINE>
      <COLUMN>46</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '+' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '+' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>delta_gaussian_yolo_box</FUNCTION>
    <DECORATED>delta_gaussian_yolo_box</DECORATED>
    <FUNCLINE>171</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>gaussian_yolo_layer.c</FILENAME>
      <LINE>233</LINE>
      <COLUMN>46</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '+' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '+' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>delta_gaussian_yolo_box</FUNCTION>
    <DECORATED>delta_gaussian_yolo_box</DECORATED>
    <FUNCLINE>171</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>gaussian_yolo_layer.c</FILENAME>
      <LINE>234</LINE>
      <COLUMN>46</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '+' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '+' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>delta_gaussian_yolo_box</FUNCTION>
    <DECORATED>delta_gaussian_yolo_box</DECORATED>
    <FUNCLINE>171</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>gaussian_yolo_layer.c</FILENAME>
      <LINE>235</LINE>
      <COLUMN>46</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '+' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '+' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>delta_gaussian_yolo_box</FUNCTION>
    <DECORATED>delta_gaussian_yolo_box</DECORATED>
    <FUNCLINE>171</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>gaussian_yolo_layer.c</FILENAME>
      <LINE>253</LINE>
      <COLUMN>96</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '+' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '+' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>delta_gaussian_yolo_box</FUNCTION>
    <DECORATED>delta_gaussian_yolo_box</DECORATED>
    <FUNCLINE>171</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>gaussian_yolo_layer.c</FILENAME>
      <LINE>254</LINE>
      <COLUMN>96</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '+' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '+' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>delta_gaussian_yolo_box</FUNCTION>
    <DECORATED>delta_gaussian_yolo_box</DECORATED>
    <FUNCLINE>171</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>gaussian_yolo_layer.c</FILENAME>
      <LINE>255</LINE>
      <COLUMN>96</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '+' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '+' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>delta_gaussian_yolo_box</FUNCTION>
    <DECORATED>delta_gaussian_yolo_box</DECORATED>
    <FUNCLINE>171</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>gaussian_yolo_layer.c</FILENAME>
      <LINE>256</LINE>
      <COLUMN>96</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '+' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '+' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>delta_gaussian_yolo_box</FUNCTION>
    <DECORATED>delta_gaussian_yolo_box</DECORATED>
    <FUNCLINE>171</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>gaussian_yolo_layer.c</FILENAME>
      <LINE>472</LINE>
      <COLUMN>55</COLUMN>
    </SFA>
    <DEFECTCODE>6031</DEFECTCODE>
    <DESCRIPTION>반환 값이 무시되었습니다. 'getchar'.</DESCRIPTION>
    <FUNCTION>forward_gaussian_yolo_layer</FUNCTION>
    <DECORATED>forward_gaussian_yolo_layer</DECORATED>
    <FUNCLINE>413</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>gaussian_yolo_layer.c</FILENAME>
      <LINE>642</LINE>
      <COLUMN>10</COLUMN>
    </SFA>
    <DEFECTCODE>6387</DEFECTCODE>
    <DESCRIPTION>'classification_lost'이(가) '0'일 수 있습니다.  이 경우 'memcpy' 함수의 사양과 일치하지 않습니다. </DESCRIPTION>
    <FUNCTION>forward_gaussian_yolo_layer</FUNCTION>
    <DECORATED>forward_gaussian_yolo_layer</DECORATED>
    <FUNCLINE>413</FUNCLINE>
    <PROBABILITY>1</PROBABILITY>
    <RANK>4</RANK>
    <CATEGORY>
      <RULECATEGORY>mspft</RULECATEGORY>
    </CATEGORY>
    <PATH>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>gaussian_yolo_layer.c</FILENAME>
        <LINE>415</LINE>
        <COLUMN>8</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>gaussian_yolo_layer.c</FILENAME>
        <LINE>415</LINE>
        <COLUMN>10</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>gaussian_yolo_layer.c</FILENAME>
        <LINE>415</LINE>
        <COLUMN>12</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>gaussian_yolo_layer.c</FILENAME>
        <LINE>415</LINE>
        <COLUMN>14</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>gaussian_yolo_layer.c</FILENAME>
        <LINE>415</LINE>
        <COLUMN>16</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>gaussian_yolo_layer.c</FILENAME>
        <LINE>416</LINE>
        <COLUMN>10</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>gaussian_yolo_layer.c</FILENAME>
        <LINE>419</LINE>
        <COLUMN>11</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>gaussian_yolo_layer.c</FILENAME>
        <LINE>419</LINE>
        <COLUMN>18</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>gaussian_yolo_layer.c</FILENAME>
        <LINE>442</LINE>
        <COLUMN>10</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>gaussian_yolo_layer.c</FILENAME>
        <LINE>443</LINE>
        <COLUMN>8</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>gaussian_yolo_layer.c</FILENAME>
        <LINE>444</LINE>
        <COLUMN>10</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>gaussian_yolo_layer.c</FILENAME>
        <LINE>445</LINE>
        <COLUMN>10</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>gaussian_yolo_layer.c</FILENAME>
        <LINE>446</LINE>
        <COLUMN>10</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>gaussian_yolo_layer.c</FILENAME>
        <LINE>447</LINE>
        <COLUMN>10</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>gaussian_yolo_layer.c</FILENAME>
        <LINE>448</LINE>
        <COLUMN>10</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>gaussian_yolo_layer.c</FILENAME>
        <LINE>449</LINE>
        <COLUMN>10</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>gaussian_yolo_layer.c</FILENAME>
        <LINE>450</LINE>
        <COLUMN>8</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>gaussian_yolo_layer.c</FILENAME>
        <LINE>451</LINE>
        <COLUMN>8</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>gaussian_yolo_layer.c</FILENAME>
        <LINE>452</LINE>
        <COLUMN>14</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>gaussian_yolo_layer.c</FILENAME>
        <LINE>453</LINE>
        <COLUMN>11</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>gaussian_yolo_layer.c</FILENAME>
        <LINE>453</LINE>
        <COLUMN>18</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>gaussian_yolo_layer.c</FILENAME>
        <LINE>640</LINE>
        <COLUMN>14</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>gaussian_yolo_layer.c</FILENAME>
        <LINE>641</LINE>
        <COLUMN>11</COLUMN>
        <KEYEVENT>
          <ID>1</ID>
          <KIND>선언</KIND>
          <IMPORTANCE>Essential</IMPORTANCE>
          <MESSAGE>'classification_lost'은(는) NULL일 수 있습니다.</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>gaussian_yolo_layer.c</FILENAME>
        <LINE>642</LINE>
        <COLUMN>10</COLUMN>
        <KEYEVENT>
          <ID>2</ID>
          <KIND>선언</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>'classification_lost'은(는) 'memcpy'(&lt;no file&gt;:0에서 선언됨)에 대한 In/Out 인수입니다.</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>gaussian_yolo_layer.c</FILENAME>
        <LINE>642</LINE>
        <COLUMN>10</COLUMN>
        <KEYEVENT>
          <ID>3</ID>
          <KIND>사용법</KIND>
          <IMPORTANCE>Essential</IMPORTANCE>
          <MESSAGE>'classification_lost'은(는) NULL(이)면 안 됩니다. 이는 'memcpy'의 SAL 주석과 일치하지 않습니다.</MESSAGE>
        </KEYEVENT>
      </SFA>
    </PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>gaussian_yolo_layer.c</FILENAME>
      <LINE>668</LINE>
      <COLUMN>10</COLUMN>
    </SFA>
    <DEFECTCODE>6387</DEFECTCODE>
    <DESCRIPTION>'except_uncertainty_lost'이(가) '0'일 수 있습니다.  이 경우 'memcpy' 함수의 사양과 일치하지 않습니다. </DESCRIPTION>
    <FUNCTION>forward_gaussian_yolo_layer</FUNCTION>
    <DECORATED>forward_gaussian_yolo_layer</DECORATED>
    <FUNCLINE>413</FUNCLINE>
    <PROBABILITY>1</PROBABILITY>
    <RANK>4</RANK>
    <CATEGORY>
      <RULECATEGORY>mspft</RULECATEGORY>
    </CATEGORY>
    <PATH>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>gaussian_yolo_layer.c</FILENAME>
        <LINE>415</LINE>
        <COLUMN>8</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>gaussian_yolo_layer.c</FILENAME>
        <LINE>415</LINE>
        <COLUMN>10</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>gaussian_yolo_layer.c</FILENAME>
        <LINE>415</LINE>
        <COLUMN>12</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>gaussian_yolo_layer.c</FILENAME>
        <LINE>415</LINE>
        <COLUMN>14</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>gaussian_yolo_layer.c</FILENAME>
        <LINE>415</LINE>
        <COLUMN>16</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>gaussian_yolo_layer.c</FILENAME>
        <LINE>416</LINE>
        <COLUMN>10</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>gaussian_yolo_layer.c</FILENAME>
        <LINE>419</LINE>
        <COLUMN>11</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>gaussian_yolo_layer.c</FILENAME>
        <LINE>419</LINE>
        <COLUMN>18</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>gaussian_yolo_layer.c</FILENAME>
        <LINE>442</LINE>
        <COLUMN>10</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>gaussian_yolo_layer.c</FILENAME>
        <LINE>443</LINE>
        <COLUMN>8</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>gaussian_yolo_layer.c</FILENAME>
        <LINE>444</LINE>
        <COLUMN>10</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>gaussian_yolo_layer.c</FILENAME>
        <LINE>445</LINE>
        <COLUMN>10</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>gaussian_yolo_layer.c</FILENAME>
        <LINE>446</LINE>
        <COLUMN>10</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>gaussian_yolo_layer.c</FILENAME>
        <LINE>447</LINE>
        <COLUMN>10</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>gaussian_yolo_layer.c</FILENAME>
        <LINE>448</LINE>
        <COLUMN>10</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>gaussian_yolo_layer.c</FILENAME>
        <LINE>449</LINE>
        <COLUMN>10</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>gaussian_yolo_layer.c</FILENAME>
        <LINE>450</LINE>
        <COLUMN>8</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>gaussian_yolo_layer.c</FILENAME>
        <LINE>451</LINE>
        <COLUMN>8</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>gaussian_yolo_layer.c</FILENAME>
        <LINE>452</LINE>
        <COLUMN>14</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>gaussian_yolo_layer.c</FILENAME>
        <LINE>453</LINE>
        <COLUMN>11</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>gaussian_yolo_layer.c</FILENAME>
        <LINE>453</LINE>
        <COLUMN>18</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>gaussian_yolo_layer.c</FILENAME>
        <LINE>640</LINE>
        <COLUMN>14</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>gaussian_yolo_layer.c</FILENAME>
        <LINE>641</LINE>
        <COLUMN>11</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>gaussian_yolo_layer.c</FILENAME>
        <LINE>642</LINE>
        <COLUMN>10</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>gaussian_yolo_layer.c</FILENAME>
        <LINE>645</LINE>
        <COLUMN>11</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>gaussian_yolo_layer.c</FILENAME>
        <LINE>645</LINE>
        <COLUMN>18</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>gaussian_yolo_layer.c</FILENAME>
        <LINE>663</LINE>
        <COLUMN>10</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>gaussian_yolo_layer.c</FILENAME>
        <LINE>664</LINE>
        <COLUMN>8</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>gaussian_yolo_layer.c</FILENAME>
        <LINE>667</LINE>
        <COLUMN>11</COLUMN>
        <KEYEVENT>
          <ID>1</ID>
          <KIND>선언</KIND>
          <IMPORTANCE>Essential</IMPORTANCE>
          <MESSAGE>'except_uncertainty_lost'은(는) NULL일 수 있습니다.</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>gaussian_yolo_layer.c</FILENAME>
        <LINE>668</LINE>
        <COLUMN>10</COLUMN>
        <KEYEVENT>
          <ID>2</ID>
          <KIND>선언</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>'except_uncertainty_lost'은(는) 'memcpy'(&lt;no file&gt;:0에서 선언됨)에 대한 In/Out 인수입니다.</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>gaussian_yolo_layer.c</FILENAME>
        <LINE>668</LINE>
        <COLUMN>10</COLUMN>
        <KEYEVENT>
          <ID>3</ID>
          <KIND>사용법</KIND>
          <IMPORTANCE>Essential</IMPORTANCE>
          <MESSAGE>'except_uncertainty_lost'은(는) NULL(이)면 안 됩니다. 이는 'memcpy'의 SAL 주석과 일치하지 않습니다.</MESSAGE>
        </KEYEVENT>
      </SFA>
    </PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>gaussian_yolo_layer.c</FILENAME>
      <LINE>416</LINE>
      <COLUMN>43</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>forward_gaussian_yolo_layer</FUNCTION>
    <DECORATED>forward_gaussian_yolo_layer</DECORATED>
    <FUNCLINE>413</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>gaussian_yolo_layer.c</FILENAME>
      <LINE>424</LINE>
      <COLUMN>65</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '-' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '-' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>forward_gaussian_yolo_layer</FUNCTION>
    <DECORATED>forward_gaussian_yolo_layer</DECORATED>
    <FUNCLINE>413</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>gaussian_yolo_layer.c</FILENAME>
      <LINE>428</LINE>
      <COLUMN>65</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '-' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '-' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>forward_gaussian_yolo_layer</FUNCTION>
    <DECORATED>forward_gaussian_yolo_layer</DECORATED>
    <FUNCLINE>413</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>gaussian_yolo_layer.c</FILENAME>
      <LINE>442</LINE>
      <COLUMN>33</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>forward_gaussian_yolo_layer</FUNCTION>
    <DECORATED>forward_gaussian_yolo_layer</DECORATED>
    <FUNCLINE>413</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>gaussian_yolo_layer.c</FILENAME>
      <LINE>467</LINE>
      <COLUMN>71</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>forward_gaussian_yolo_layer</FUNCTION>
    <DECORATED>forward_gaussian_yolo_layer</DECORATED>
    <FUNCLINE>413</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>gaussian_yolo_layer.c</FILENAME>
      <LINE>467</LINE>
      <COLUMN>83</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>forward_gaussian_yolo_layer</FUNCTION>
    <DECORATED>forward_gaussian_yolo_layer</DECORATED>
    <FUNCLINE>413</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>gaussian_yolo_layer.c</FILENAME>
      <LINE>511</LINE>
      <COLUMN>69</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>forward_gaussian_yolo_layer</FUNCTION>
    <DECORATED>forward_gaussian_yolo_layer</DECORATED>
    <FUNCLINE>413</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>gaussian_yolo_layer.c</FILENAME>
      <LINE>526</LINE>
      <COLUMN>76</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>forward_gaussian_yolo_layer</FUNCTION>
    <DECORATED>forward_gaussian_yolo_layer</DECORATED>
    <FUNCLINE>413</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>gaussian_yolo_layer.c</FILENAME>
      <LINE>526</LINE>
      <COLUMN>88</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>forward_gaussian_yolo_layer</FUNCTION>
    <DECORATED>forward_gaussian_yolo_layer</DECORATED>
    <FUNCLINE>413</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>gaussian_yolo_layer.c</FILENAME>
      <LINE>533</LINE>
      <COLUMN>59</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>forward_gaussian_yolo_layer</FUNCTION>
    <DECORATED>forward_gaussian_yolo_layer</DECORATED>
    <FUNCLINE>413</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>gaussian_yolo_layer.c</FILENAME>
      <LINE>533</LINE>
      <COLUMN>71</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>forward_gaussian_yolo_layer</FUNCTION>
    <DECORATED>forward_gaussian_yolo_layer</DECORATED>
    <FUNCLINE>413</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>gaussian_yolo_layer.c</FILENAME>
      <LINE>642</LINE>
      <COLUMN>49</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>forward_gaussian_yolo_layer</FUNCTION>
    <DECORATED>forward_gaussian_yolo_layer</DECORATED>
    <FUNCLINE>413</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>gaussian_yolo_layer.c</FILENAME>
      <LINE>668</LINE>
      <COLUMN>53</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>forward_gaussian_yolo_layer</FUNCTION>
    <DECORATED>forward_gaussian_yolo_layer</DECORATED>
    <FUNCLINE>413</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>gaussian_yolo_layer.c</FILENAME>
      <LINE>736</LINE>
      <COLUMN>28</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '-' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '-' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>correct_gaussian_yolo_boxes</FUNCTION>
    <DECORATED>correct_gaussian_yolo_boxes</DECORATED>
    <FUNCLINE>706</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>gaussian_yolo_layer.c</FILENAME>
      <LINE>737</LINE>
      <COLUMN>28</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '-' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '-' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>correct_gaussian_yolo_boxes</FUNCTION>
    <DECORATED>correct_gaussian_yolo_boxes</DECORATED>
    <FUNCLINE>706</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>gaussian_yolo_layer.c</FILENAME>
      <LINE>823</LINE>
      <COLUMN>95</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '+' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '+' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>get_gaussian_yolo_detections</FUNCTION>
    <DECORATED>get_gaussian_yolo_detections</DECORATED>
    <FUNCLINE>793</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>gaussian_yolo_layer.c</FILENAME>
      <LINE>823</LINE>
      <COLUMN>75</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '+' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '+' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>get_gaussian_yolo_detections</FUNCTION>
    <DECORATED>get_gaussian_yolo_detections</DECORATED>
    <FUNCLINE>793</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>gaussian_yolo_layer.c</FILENAME>
      <LINE>823</LINE>
      <COLUMN>55</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '+' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '+' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>get_gaussian_yolo_detections</FUNCTION>
    <DECORATED>get_gaussian_yolo_detections</DECORATED>
    <FUNCLINE>793</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>gemm.c</FILENAME>
      <LINE>52</LINE>
      <COLUMN>36</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>random_matrix</FUNCTION>
    <DECORATED>random_matrix</DECORATED>
    <FUNCLINE>49</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>gemm.c</FILENAME>
      <LINE>491</LINE>
      <COLUMN>12</COLUMN>
    </SFA>
    <DEFECTCODE>6993</DEFECTCODE>
    <DESCRIPTION>코드 분석에서 OpenMP 구문이 무시되고 단일 스레드 코드를 분석합니다.</DESCRIPTION>
    <FUNCTION></FUNCTION>
    <DECORATED></DECORATED>
    <FUNCLINE>0</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>gemm.c</FILENAME>
      <LINE>501</LINE>
      <COLUMN>63</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '+' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '+' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>transpose_bin</FUNCTION>
    <DECORATED>transpose_bin</DECORATED>
    <FUNCLINE>485</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>gemm.c</FILENAME>
      <LINE>501</LINE>
      <COLUMN>57</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>transpose_bin</FUNCTION>
    <DECORATED>transpose_bin</DECORATED>
    <FUNCLINE>485</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>gemm.c</FILENAME>
      <LINE>501</LINE>
      <COLUMN>110</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '+' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '+' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>transpose_bin</FUNCTION>
    <DECORATED>transpose_bin</DECORATED>
    <FUNCLINE>485</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>gemm.c</FILENAME>
      <LINE>501</LINE>
      <COLUMN>104</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>transpose_bin</FUNCTION>
    <DECORATED>transpose_bin</DECORATED>
    <FUNCLINE>485</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>gemm.c</FILENAME>
      <LINE>2674</LINE>
      <COLUMN>65</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>gemm_cpu</FUNCTION>
    <DECORATED>gemm_cpu</DECORATED>
    <FUNCLINE>2647</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>gemm.c</FILENAME>
      <LINE>2676</LINE>
      <COLUMN>45</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>gemm_cpu</FUNCTION>
    <DECORATED>gemm_cpu</DECORATED>
    <FUNCLINE>2647</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>gemm.c</FILENAME>
      <LINE>2676</LINE>
      <COLUMN>69</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>gemm_cpu</FUNCTION>
    <DECORATED>gemm_cpu</DECORATED>
    <FUNCLINE>2647</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>gemm.c</FILENAME>
      <LINE>2678</LINE>
      <COLUMN>65</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>gemm_cpu</FUNCTION>
    <DECORATED>gemm_cpu</DECORATED>
    <FUNCLINE>2647</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>gemm.c</FILENAME>
      <LINE>2672</LINE>
      <COLUMN>45</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>gemm_cpu</FUNCTION>
    <DECORATED>gemm_cpu</DECORATED>
    <FUNCLINE>2647</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>gemm.c</FILENAME>
      <LINE>2672</LINE>
      <COLUMN>69</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>gemm_cpu</FUNCTION>
    <DECORATED>gemm_cpu</DECORATED>
    <FUNCLINE>2647</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>go.c</FILENAME>
      <LINE>93</LINE>
      <COLUMN>27</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>random_go_moves</FUNCTION>
    <DECORATED>random_go_moves</DECORATED>
    <FUNCLINE>90</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>go.c</FILENAME>
      <LINE>99</LINE>
      <COLUMN>40</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>random_go_moves</FUNCTION>
    <DECORATED>random_go_moves</DECORATED>
    <FUNCLINE>90</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>go.c</FILENAME>
      <LINE>99</LINE>
      <COLUMN>37</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>random_go_moves</FUNCTION>
    <DECORATED>random_go_moves</DECORATED>
    <FUNCLINE>90</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>go.c</FILENAME>
      <LINE>104</LINE>
      <COLUMN>56</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>random_go_moves</FUNCTION>
    <DECORATED>random_go_moves</DECORATED>
    <FUNCLINE>90</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>go.c</FILENAME>
      <LINE>104</LINE>
      <COLUMN>53</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>random_go_moves</FUNCTION>
    <DECORATED>random_go_moves</DECORATED>
    <FUNCLINE>90</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>go.c</FILENAME>
      <LINE>105</LINE>
      <COLUMN>57</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>random_go_moves</FUNCTION>
    <DECORATED>random_go_moves</DECORATED>
    <FUNCLINE>90</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>go.c</FILENAME>
      <LINE>105</LINE>
      <COLUMN>54</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>random_go_moves</FUNCTION>
    <DECORATED>random_go_moves</DECORATED>
    <FUNCLINE>90</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>go.c</FILENAME>
      <LINE>145</LINE>
      <COLUMN>14</COLUMN>
    </SFA>
    <DEFECTCODE>6328</DEFECTCODE>
    <DESCRIPTION>크기 불일치: 'unsigned __int64'이(가) _Param_(8)으로 전달되었습니다. 다음 호출에는 'int'이(가) 필요합니다. 'printf'. </DESCRIPTION>
    <FUNCTION>train_go</FUNCTION>
    <DECORATED>train_go</DECORATED>
    <FUNCLINE>116</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>go.c</FILENAME>
      <LINE>131</LINE>
      <COLUMN>43</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>train_go</FUNCTION>
    <DECORATED>train_go</DECORATED>
    <FUNCLINE>116</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>go.c</FILENAME>
      <LINE>132</LINE>
      <COLUMN>42</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>train_go</FUNCTION>
    <DECORATED>train_go</DECORATED>
    <FUNCLINE>116</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>go.c</FILENAME>
      <LINE>391</LINE>
      <COLUMN>19</COLUMN>
    </SFA>
    <DEFECTCODE>6385</DEFECTCODE>
    <DESCRIPTION>'move'에서 잘못된 데이터를 읽고 있습니다.  읽기 가능한 크기는 '1444'바이트인데 실제로는 '-4'바이트만 읽을 수 있습니다.</DESCRIPTION>
    <FUNCTION>generate_move</FUNCTION>
    <DECORATED>generate_move</DECORATED>
    <FUNCLINE>351</FUNCLINE>
    <PROBABILITY>1</PROBABILITY>
    <RANK>4</RANK>
    <CATEGORY>
      <RULECATEGORY>mspft</RULECATEGORY>
    </CATEGORY>
    <PATH>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>go.c</FILENAME>
        <LINE>353</LINE>
        <COLUMN>8</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>go.c</FILENAME>
        <LINE>353</LINE>
        <COLUMN>11</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>go.c</FILENAME>
        <LINE>354</LINE>
        <COLUMN>10</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>go.c</FILENAME>
        <LINE>354</LINE>
        <COLUMN>17</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>go.c</FILENAME>
        <LINE>356</LINE>
        <COLUMN>10</COLUMN>
        <KEYEVENT>
          <ID>1</ID>
          <KIND>선언</KIND>
          <IMPORTANCE>Essential</IMPORTANCE>
          <MESSAGE>'move'이(가) 361 요소의 배열입니다(1444바이트).</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>go.c</FILENAME>
        <LINE>357</LINE>
        <COLUMN>15</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>go.c</FILENAME>
        <LINE>358</LINE>
        <COLUMN>16</COLUMN>
        <KEYEVENT>
          <ID>2</ID>
          <KIND>선언</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>'move'은(는) 'predict_move'(줄 262에서 선언됨)의 출력입니다.</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>go.c</FILENAME>
        <LINE>359</LINE>
        <COLUMN>15</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>go.c</FILENAME>
        <LINE>362</LINE>
        <COLUMN>10</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>go.c</FILENAME>
        <LINE>362</LINE>
        <COLUMN>17</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>go.c</FILENAME>
        <LINE>363</LINE>
        <COLUMN>14</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>go.c</FILENAME>
        <LINE>363</LINE>
        <COLUMN>21</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>go.c</FILENAME>
        <LINE>364</LINE>
        <COLUMN>16</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>go.c</FILENAME>
        <LINE>363</LINE>
        <COLUMN>27</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>go.c</FILENAME>
        <LINE>363</LINE>
        <COLUMN>21</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>go.c</FILENAME>
        <LINE>364</LINE>
        <COLUMN>16</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>go.c</FILENAME>
        <LINE>363</LINE>
        <COLUMN>27</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>go.c</FILENAME>
        <LINE>363</LINE>
        <COLUMN>21</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>go.c</FILENAME>
        <LINE>362</LINE>
        <COLUMN>23</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>go.c</FILENAME>
        <LINE>362</LINE>
        <COLUMN>17</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>go.c</FILENAME>
        <LINE>363</LINE>
        <COLUMN>14</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>go.c</FILENAME>
        <LINE>363</LINE>
        <COLUMN>21</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>go.c</FILENAME>
        <LINE>362</LINE>
        <COLUMN>23</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>go.c</FILENAME>
        <LINE>362</LINE>
        <COLUMN>17</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>go.c</FILENAME>
        <LINE>368</LINE>
        <COLUMN>8</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>go.c</FILENAME>
        <LINE>369</LINE>
        <COLUMN>9</COLUMN>
        <KEYEVENT>
          <ID>3</ID>
          <KIND>선언</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>'move'은(는) 'top_k'(d:\yolo_v4\darknet\include\darknet.h:1089에서 선언됨)의 출력입니다.</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>go.c</FILENAME>
        <LINE>370</LINE>
        <COLUMN>14</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>go.c</FILENAME>
        <LINE>372</LINE>
        <COLUMN>10</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>go.c</FILENAME>
        <LINE>372</LINE>
        <COLUMN>17</COLUMN>
        <KEYEVENT>
          <ID>4</ID>
          <KIND>분기</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>이 루프 시작, ('i&lt;19' 가정)</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>go.c</FILENAME>
        <LINE>373</LINE>
        <COLUMN>14</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>go.c</FILENAME>
        <LINE>373</LINE>
        <COLUMN>21</COLUMN>
        <KEYEVENT>
          <ID>5</ID>
          <KIND>분기</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>이 루프 시작, ('j&lt;19' 가정)</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>go.c</FILENAME>
        <LINE>374</LINE>
        <COLUMN>31</COLUMN>
        <KEYEVENT>
          <ID>6</ID>
          <KIND>분기</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>이 분기 건너뛰기, ('move[i*19+j]&lt;thresh'이(가) false라고 가정)</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>go.c</FILENAME>
        <LINE>373</LINE>
        <COLUMN>27</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>go.c</FILENAME>
        <LINE>373</LINE>
        <COLUMN>21</COLUMN>
        <KEYEVENT>
          <ID>7</ID>
          <KIND>분기</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>이 루프 시작, ('j&lt;19' 가정)</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>go.c</FILENAME>
        <LINE>374</LINE>
        <COLUMN>31</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>go.c</FILENAME>
        <LINE>373</LINE>
        <COLUMN>27</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>go.c</FILENAME>
        <LINE>373</LINE>
        <COLUMN>21</COLUMN>
        <KEYEVENT>
          <ID>8</ID>
          <KIND>분기</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>이 루프 시작, ('j&lt;19' 가정)</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>go.c</FILENAME>
        <LINE>372</LINE>
        <COLUMN>23</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>go.c</FILENAME>
        <LINE>372</LINE>
        <COLUMN>17</COLUMN>
        <KEYEVENT>
          <ID>9</ID>
          <KIND>분기</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>이 루프 시작, ('i&lt;19' 가정)</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>go.c</FILENAME>
        <LINE>373</LINE>
        <COLUMN>14</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>go.c</FILENAME>
        <LINE>373</LINE>
        <COLUMN>21</COLUMN>
        <KEYEVENT>
          <ID>10</ID>
          <KIND>분기</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>이 루프 계속, ('j&lt;19' 가정)</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>go.c</FILENAME>
        <LINE>372</LINE>
        <COLUMN>23</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>go.c</FILENAME>
        <LINE>372</LINE>
        <COLUMN>17</COLUMN>
        <KEYEVENT>
          <ID>11</ID>
          <KIND>분기</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>이 루프 계속, ('i&lt;19' 가정)</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>go.c</FILENAME>
        <LINE>379</LINE>
        <COLUMN>8</COLUMN>
        <KEYEVENT>
          <ID>12</ID>
          <KIND>선언</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>'move'은(는) 'max_index'(d:\yolo_v4\darknet\src\utils.h:55에서 선언됨)의 출력입니다.</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>go.c</FILENAME>
        <LINE>380</LINE>
        <COLUMN>8</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>go.c</FILENAME>
        <LINE>381</LINE>
        <COLUMN>8</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>go.c</FILENAME>
        <LINE>382</LINE>
        <COLUMN>8</COLUMN>
        <KEYEVENT>
          <ID>13</ID>
          <KIND>선언</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>'move'은(는) 'sample_array'(d:\yolo_v4\darknet\src\utils.h:78에서 선언됨)의 출력입니다.</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>go.c</FILENAME>
        <LINE>384</LINE>
        <COLUMN>7</COLUMN>
        <KEYEVENT>
          <ID>14</ID>
          <KIND>분기</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>이 분기 시작, ('print' 가정)</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>go.c</FILENAME>
        <LINE>385</LINE>
        <COLUMN>13</COLUMN>
        <KEYEVENT>
          <ID>15</ID>
          <KIND>선언</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>'move'은(는) 'top_k'(d:\yolo_v4\darknet\include\darknet.h:1089에서 선언됨)의 출력입니다.</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>go.c</FILENAME>
        <LINE>386</LINE>
        <COLUMN>14</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>go.c</FILENAME>
        <LINE>386</LINE>
        <COLUMN>21</COLUMN>
        <KEYEVENT>
          <ID>16</ID>
          <KIND>분기</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>이 루프 시작, ('i&lt;5' 가정)</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>go.c</FILENAME>
        <LINE>387</LINE>
        <COLUMN>16</COLUMN>
        <KEYEVENT>
          <ID>17</ID>
          <KIND>분기</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>이 분기 시작, ('!move[indexes[i]]' 가정)</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>go.c</FILENAME>
        <LINE>387</LINE>
        <COLUMN>46</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>go.c</FILENAME>
        <LINE>386</LINE>
        <COLUMN>30</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>go.c</FILENAME>
        <LINE>386</LINE>
        <COLUMN>21</COLUMN>
        <KEYEVENT>
          <ID>18</ID>
          <KIND>분기</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>이 루프 시작, ('i&lt;5' 가정)</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>go.c</FILENAME>
        <LINE>387</LINE>
        <COLUMN>16</COLUMN>
        <KEYEVENT>
          <ID>19</ID>
          <KIND>분기</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>이 분기 시작, ('!move[indexes[i]]' 가정)</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>go.c</FILENAME>
        <LINE>387</LINE>
        <COLUMN>46</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>go.c</FILENAME>
        <LINE>386</LINE>
        <COLUMN>30</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>go.c</FILENAME>
        <LINE>386</LINE>
        <COLUMN>21</COLUMN>
        <KEYEVENT>
          <ID>20</ID>
          <KIND>분기</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>이 루프 계속, ('i&lt;5' 가정)</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>go.c</FILENAME>
        <LINE>389</LINE>
        <COLUMN>19</COLUMN>
        <KEYEVENT>
          <ID>21</ID>
          <KIND>선언</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>'indexes'은(는) 'print_board'(줄 208에서 선언됨)의 출력입니다.</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>go.c</FILENAME>
        <LINE>390</LINE>
        <COLUMN>14</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>go.c</FILENAME>
        <LINE>390</LINE>
        <COLUMN>21</COLUMN>
        <KEYEVENT>
          <ID>22</ID>
          <KIND>분기</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>이 루프 시작, ('i&lt;5' 가정)</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>go.c</FILENAME>
        <LINE>391</LINE>
        <COLUMN>19</COLUMN>
        <KEYEVENT>
          <ID>23</ID>
          <KIND>선언</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>'move'은(는) 'fprintf'(c:\program files (x86)\windows kits\10\include\10.0.19041.0\ucrt\stdio.h:830에서 선언됨)에 대한 In/Out 인수입니다.</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>go.c</FILENAME>
        <LINE>391</LINE>
        <COLUMN>19</COLUMN>
        <KEYEVENT>
          <ID>24</ID>
          <KIND>사용법</KIND>
          <IMPORTANCE>Essential</IMPORTANCE>
          <MESSAGE>'move[-1]'에서 읽기가 잘못됨, (읽기 가능한 범위는 0에서 360 사이임)</MESSAGE>
        </KEYEVENT>
      </SFA>
    </PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>go.c</FILENAME>
      <LINE>452</LINE>
      <COLUMN>13</COLUMN>
    </SFA>
    <DEFECTCODE>6031</DEFECTCODE>
    <DESCRIPTION>반환 값이 무시되었습니다. 'scanf'.</DESCRIPTION>
    <FUNCTION>engine_go</FUNCTION>
    <DECORATED>engine_go</DECORATED>
    <FUNCLINE>436</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>go.c</FILENAME>
      <LINE>466</LINE>
      <COLUMN>17</COLUMN>
    </SFA>
    <DEFECTCODE>6031</DEFECTCODE>
    <DESCRIPTION>반환 값이 무시되었습니다. 'scanf'.</DESCRIPTION>
    <FUNCTION>engine_go</FUNCTION>
    <DECORATED>engine_go</DECORATED>
    <FUNCLINE>436</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>go.c</FILENAME>
      <LINE>487</LINE>
      <COLUMN>17</COLUMN>
    </SFA>
    <DEFECTCODE>6031</DEFECTCODE>
    <DESCRIPTION>반환 값이 무시되었습니다. 'scanf'.</DESCRIPTION>
    <FUNCTION>engine_go</FUNCTION>
    <DECORATED>engine_go</DECORATED>
    <FUNCLINE>436</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>go.c</FILENAME>
      <LINE>500</LINE>
      <COLUMN>17</COLUMN>
    </SFA>
    <DEFECTCODE>6031</DEFECTCODE>
    <DESCRIPTION>반환 값이 무시되었습니다. 'scanf'.</DESCRIPTION>
    <FUNCTION>engine_go</FUNCTION>
    <DECORATED>engine_go</DECORATED>
    <FUNCLINE>436</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>go.c</FILENAME>
      <LINE>504</LINE>
      <COLUMN>17</COLUMN>
    </SFA>
    <DEFECTCODE>6031</DEFECTCODE>
    <DESCRIPTION>반환 값이 무시되었습니다. 'scanf'.</DESCRIPTION>
    <FUNCTION>engine_go</FUNCTION>
    <DECORATED>engine_go</DECORATED>
    <FUNCLINE>436</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>go.c</FILENAME>
      <LINE>536</LINE>
      <COLUMN>17</COLUMN>
    </SFA>
    <DEFECTCODE>6031</DEFECTCODE>
    <DESCRIPTION>반환 값이 무시되었습니다. 'scanf'.</DESCRIPTION>
    <FUNCTION>engine_go</FUNCTION>
    <DECORATED>engine_go</DECORATED>
    <FUNCLINE>436</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>go.c</FILENAME>
      <LINE>563</LINE>
      <COLUMN>17</COLUMN>
    </SFA>
    <DEFECTCODE>6031</DEFECTCODE>
    <DESCRIPTION>반환 값이 무시되었습니다. 'scanf'.</DESCRIPTION>
    <FUNCTION>engine_go</FUNCTION>
    <DECORATED>engine_go</DECORATED>
    <FUNCLINE>436</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>go.c</FILENAME>
      <LINE>458</LINE>
      <COLUMN>12</COLUMN>
    </SFA>
    <DEFECTCODE>6054</DEFECTCODE>
    <DESCRIPTION>'buff' 문자열이 0으로 종료되지 않을 수 있습니다.</DESCRIPTION>
    <FUNCTION>engine_go</FUNCTION>
    <DECORATED>engine_go</DECORATED>
    <FUNCLINE>436</FUNCLINE>
    <PROBABILITY>1</PROBABILITY>
    <RANK>3</RANK>
    <CATEGORY>
      <RULECATEGORY>mspft</RULECATEGORY>
    </CATEGORY>
    <PATH>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>go.c</FILENAME>
        <LINE>438</LINE>
        <COLUMN>12</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>go.c</FILENAME>
        <LINE>439</LINE>
        <COLUMN>7</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>go.c</FILENAME>
        <LINE>442</LINE>
        <COLUMN>9</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>go.c</FILENAME>
        <LINE>443</LINE>
        <COLUMN>21</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>go.c</FILENAME>
        <LINE>444</LINE>
        <COLUMN>11</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>go.c</FILENAME>
        <LINE>445</LINE>
        <COLUMN>10</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>go.c</FILENAME>
        <LINE>446</LINE>
        <COLUMN>10</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>go.c</FILENAME>
        <LINE>447</LINE>
        <COLUMN>8</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>go.c</FILENAME>
        <LINE>448</LINE>
        <COLUMN>10</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>go.c</FILENAME>
        <LINE>449</LINE>
        <COLUMN>13</COLUMN>
        <KEYEVENT>
          <ID>1</ID>
          <KIND>선언</KIND>
          <IMPORTANCE>Essential</IMPORTANCE>
          <MESSAGE>이 식은 'buff'을(를) 0으로 종료할 수 없습니다.</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>go.c</FILENAME>
        <LINE>450</LINE>
        <COLUMN>12</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>go.c</FILENAME>
        <LINE>451</LINE>
        <COLUMN>12</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>go.c</FILENAME>
        <LINE>452</LINE>
        <COLUMN>13</COLUMN>
        <KEYEVENT>
          <ID>2</ID>
          <KIND>선언</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>'buff'은(는) 'scanf'(c:\program files (x86)\windows kits\10\include\10.0.19041.0\ucrt\stdio.h:1276에서 선언됨)의 출력입니다.</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>go.c</FILENAME>
        <LINE>453</LINE>
        <COLUMN>16</COLUMN>
        <KEYEVENT>
          <ID>3</ID>
          <KIND>분기</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>이 분기 건너뛰기, ('feof((__acrt_iob_func(0)))'이(가) false라고 가정)</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>go.c</FILENAME>
        <LINE>454</LINE>
        <COLUMN>13</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>go.c</FILENAME>
        <LINE>455</LINE>
        <COLUMN>15</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>go.c</FILENAME>
        <LINE>457</LINE>
        <COLUMN>12</COLUMN>
        <KEYEVENT>
          <ID>4</ID>
          <KIND>분기</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>이 분기 시작, ('!has_id' 가정)</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>go.c</FILENAME>
        <LINE>457</LINE>
        <COLUMN>28</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>go.c</FILENAME>
        <LINE>458</LINE>
        <COLUMN>12</COLUMN>
        <KEYEVENT>
          <ID>5</ID>
          <KIND>사용법</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>'buff'은(는) 'strcmp'(&lt;no file&gt;:0에서 선언됨)에 대한 입력입니다.</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>go.c</FILENAME>
        <LINE>458</LINE>
        <COLUMN>12</COLUMN>
        <KEYEVENT>
          <ID>6</ID>
          <KIND>사용법</KIND>
          <IMPORTANCE>Essential</IMPORTANCE>
          <MESSAGE>'buff'은(는) 'strcmp'의 SAL 주석에 의해 0으로 종료되기 위해 필요합니다.</MESSAGE>
        </KEYEVENT>
      </SFA>
    </PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>go.c</FILENAME>
      <LINE>655</LINE>
      <COLUMN>119</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>test_go</FUNCTION>
    <DECORATED>test_go</DECORATED>
    <FUNCLINE>609</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>go.c</FILENAME>
      <LINE>750</LINE>
      <COLUMN>5</COLUMN>
    </SFA>
    <DEFECTCODE>6262</DEFECTCODE>
    <DESCRIPTION>함수에서 '29984'바이트의 스택을 사용하는데 이 크기가 /analyze:stacksize '16384'을(를) 초과합니다. 일부 데이터를 힙으로 이동하십시오.</DESCRIPTION>
    <FUNCTION>self_go</FUNCTION>
    <DECORATED>self_go</DECORATED>
    <FUNCLINE>750</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>gru_layer.c</FILENAME>
      <LINE>77</LINE>
      <COLUMN>47</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_gru_layer</FUNCTION>
    <DECORATED>make_gru_layer</DECORATED>
    <FUNCLINE>29</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>gru_layer.c</FILENAME>
      <LINE>77</LINE>
      <COLUMN>39</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_gru_layer</FUNCTION>
    <DECORATED>make_gru_layer</DECORATED>
    <FUNCLINE>29</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>gru_layer.c</FILENAME>
      <LINE>78</LINE>
      <COLUMN>46</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_gru_layer</FUNCTION>
    <DECORATED>make_gru_layer</DECORATED>
    <FUNCLINE>29</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>gru_layer.c</FILENAME>
      <LINE>78</LINE>
      <COLUMN>38</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_gru_layer</FUNCTION>
    <DECORATED>make_gru_layer</DECORATED>
    <FUNCLINE>29</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>gru_layer.c</FILENAME>
      <LINE>79</LINE>
      <COLUMN>38</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_gru_layer</FUNCTION>
    <DECORATED>make_gru_layer</DECORATED>
    <FUNCLINE>29</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>gru_layer.c</FILENAME>
      <LINE>80</LINE>
      <COLUMN>43</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_gru_layer</FUNCTION>
    <DECORATED>make_gru_layer</DECORATED>
    <FUNCLINE>29</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>gru_layer.c</FILENAME>
      <LINE>81</LINE>
      <COLUMN>45</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_gru_layer</FUNCTION>
    <DECORATED>make_gru_layer</DECORATED>
    <FUNCLINE>29</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>gru_layer.c</FILENAME>
      <LINE>82</LINE>
      <COLUMN>45</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_gru_layer</FUNCTION>
    <DECORATED>make_gru_layer</DECORATED>
    <FUNCLINE>29</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>gru_layer.c</FILENAME>
      <LINE>84</LINE>
      <COLUMN>38</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_gru_layer</FUNCTION>
    <DECORATED>make_gru_layer</DECORATED>
    <FUNCLINE>29</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>gru_layer.c</FILENAME>
      <LINE>85</LINE>
      <COLUMN>38</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_gru_layer</FUNCTION>
    <DECORATED>make_gru_layer</DECORATED>
    <FUNCLINE>29</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>gru_layer.c</FILENAME>
      <LINE>86</LINE>
      <COLUMN>38</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_gru_layer</FUNCTION>
    <DECORATED>make_gru_layer</DECORATED>
    <FUNCLINE>29</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>gru_layer.c</FILENAME>
      <LINE>118</LINE>
      <COLUMN>5</COLUMN>
    </SFA>
    <DEFECTCODE>6262</DEFECTCODE>
    <DESCRIPTION>함수에서 '19708'바이트의 스택을 사용하는데 이 크기가 /analyze:stacksize '16384'을(를) 초과합니다. 일부 데이터를 힙으로 이동하십시오.</DESCRIPTION>
    <FUNCTION>forward_gru_layer</FUNCTION>
    <DECORATED>forward_gru_layer</DECORATED>
    <FUNCLINE>118</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>gru_layer.c</FILENAME>
      <LINE>183</LINE>
      <COLUMN>31</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>forward_gru_layer</FUNCTION>
    <DECORATED>forward_gru_layer</DECORATED>
    <FUNCLINE>118</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>gru_layer.c</FILENAME>
      <LINE>184</LINE>
      <COLUMN>29</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>forward_gru_layer</FUNCTION>
    <DECORATED>forward_gru_layer</DECORATED>
    <FUNCLINE>118</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>http_stream.cpp</FILENAME>
      <LINE>40</LINE>
      <COLUMN>32</COLUMN>
    </SFA>
    <DEFECTCODE>6031</DEFECTCODE>
    <DESCRIPTION>반환 값이 무시되었습니다. 'WSAStartup'.</DESCRIPTION>
    <FUNCTION>_INIT_W32DATA::{ctor}</FUNCTION>
    <DECORATED>??0_INIT_W32DATA@@QEAA@XZ</DECORATED>
    <FUNCLINE>40</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>http_stream.cpp</FILENAME>
      <LINE>50</LINE>
      <COLUMN>10</COLUMN>
    </SFA>
    <DEFECTCODE>6387</DEFECTCODE>
    <DESCRIPTION>'buf'이(가) '0'일 수 있습니다.  이 경우 'recv' 함수의 사양과 일치하지 않습니다. </DESCRIPTION>
    <FUNCTION>close_socket</FUNCTION>
    <DECORATED>?close_socket@@YAH_K@Z</DECORATED>
    <FUNCLINE>47</FUNCLINE>
    <PROBABILITY>1</PROBABILITY>
    <RANK>4</RANK>
    <CATEGORY>
      <RULECATEGORY>mspft</RULECATEGORY>
    </CATEGORY>
    <PATH>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>http_stream.cpp</FILENAME>
        <LINE>48</LINE>
        <COLUMN>8</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>http_stream.cpp</FILENAME>
        <LINE>49</LINE>
        <COLUMN>9</COLUMN>
        <KEYEVENT>
          <ID>1</ID>
          <KIND>선언</KIND>
          <IMPORTANCE>Essential</IMPORTANCE>
          <MESSAGE>'buf'은(는) NULL일 수 있습니다.</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>http_stream.cpp</FILENAME>
        <LINE>50</LINE>
        <COLUMN>10</COLUMN>
        <KEYEVENT>
          <ID>2</ID>
          <KIND>선언</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>'buf'은(는) 'recv'(c:\program files (x86)\windows kits\10\include\10.0.19041.0\um\winsock2.h:2002에서 선언됨)에 대한 In/Out 인수입니다.</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>http_stream.cpp</FILENAME>
        <LINE>50</LINE>
        <COLUMN>10</COLUMN>
        <KEYEVENT>
          <ID>3</ID>
          <KIND>사용법</KIND>
          <IMPORTANCE>Essential</IMPORTANCE>
          <MESSAGE>'buf'은(는) NULL(이)면 안 됩니다. 이는 'recv'의 SAL 주석과 일치하지 않습니다.</MESSAGE>
        </KEYEVENT>
      </SFA>
    </PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>http_stream.cpp</FILENAME>
      <LINE>116</LINE>
      <COLUMN>4</COLUMN>
    </SFA>
    <DEFECTCODE>26495</DEFECTCODE>
    <DESCRIPTION>'JSON_sender::maxfd' 변수가 초기화되지 않았습니다. 항상 멤버 변수를 초기화하세요(type.6).</DESCRIPTION>
    <FUNCTION>JSON_sender::{ctor}</FUNCTION>
    <DECORATED>??0JSON_sender@@QEAA@HH@Z</DECORATED>
    <FUNCLINE>116</FUNCLINE>
    <ADDITIONALINFO>
      <targetSymbol>JSON_sender::maxfd</targetSymbol>
    </ADDITIONALINFO>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>http_stream.cpp</FILENAME>
      <LINE>782</LINE>
      <COLUMN>15</COLUMN>
    </SFA>
    <DEFECTCODE>6031</DEFECTCODE>
    <DESCRIPTION>반환 값이 무시되었습니다. 'getchar'.</DESCRIPTION>
    <FUNCTION>check_classes_id</FUNCTION>
    <DECORATED>?check_classes_id@@YAHUdetection@@0M@Z</DECORATED>
    <FUNCLINE>778</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>http_stream.cpp</FILENAME>
      <LINE>839</LINE>
      <COLUMN>4</COLUMN>
    </SFA>
    <DEFECTCODE>26495</DEFECTCODE>
    <DESCRIPTION>'detection_t::det_count' 변수가 초기화되지 않았습니다. 항상 멤버 변수를 초기화하세요(type.6).</DESCRIPTION>
    <FUNCTION>detection_t::{ctor}</FUNCTION>
    <DECORATED>??0detection_t@@QEAA@AEBU0@@Z</DECORATED>
    <FUNCLINE>839</FUNCLINE>
    <ADDITIONALINFO>
      <targetSymbol>detection_t::det_count</targetSymbol>
    </ADDITIONALINFO>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image.h</FILENAME>
      <LINE>906</LINE>
      <COLUMN>27</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '+' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '+' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbi__malloc_mad2</FUNCTION>
    <DECORATED>stbi__malloc_mad2</DECORATED>
    <FUNCLINE>903</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image.h</FILENAME>
      <LINE>906</LINE>
      <COLUMN>24</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbi__malloc_mad2</FUNCTION>
    <DECORATED>stbi__malloc_mad2</DECORATED>
    <FUNCLINE>903</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image.h</FILENAME>
      <LINE>912</LINE>
      <COLUMN>29</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '+' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '+' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbi__malloc_mad3</FUNCTION>
    <DECORATED>stbi__malloc_mad3</DECORATED>
    <FUNCLINE>909</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image.h</FILENAME>
      <LINE>912</LINE>
      <COLUMN>26</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbi__malloc_mad3</FUNCTION>
    <DECORATED>stbi__malloc_mad3</DECORATED>
    <FUNCLINE>909</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image.h</FILENAME>
      <LINE>912</LINE>
      <COLUMN>24</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbi__malloc_mad3</FUNCTION>
    <DECORATED>stbi__malloc_mad3</DECORATED>
    <FUNCLINE>909</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image.h</FILENAME>
      <LINE>918</LINE>
      <COLUMN>31</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '+' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '+' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbi__malloc_mad4</FUNCTION>
    <DECORATED>stbi__malloc_mad4</DECORATED>
    <FUNCLINE>915</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image.h</FILENAME>
      <LINE>918</LINE>
      <COLUMN>28</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbi__malloc_mad4</FUNCTION>
    <DECORATED>stbi__malloc_mad4</DECORATED>
    <FUNCLINE>915</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image.h</FILENAME>
      <LINE>918</LINE>
      <COLUMN>26</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbi__malloc_mad4</FUNCTION>
    <DECORATED>stbi__malloc_mad4</DECORATED>
    <FUNCLINE>915</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image.h</FILENAME>
      <LINE>918</LINE>
      <COLUMN>24</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbi__malloc_mad4</FUNCTION>
    <DECORATED>stbi__malloc_mad4</DECORATED>
    <FUNCLINE>915</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image.h</FILENAME>
      <LINE>1023</LINE>
      <COLUMN>51</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbi__convert_8_to_16</FUNCTION>
    <DECORATED>stbi__convert_8_to_16</DECORATED>
    <FUNCLINE>1017</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image.h</FILENAME>
      <LINE>1042</LINE>
      <COLUMN>39</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '-' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '-' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbi__vertical_flip</FUNCTION>
    <DECORATED>stbi__vertical_flip</DECORATED>
    <FUNCLINE>1033</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image.h</FILENAME>
      <LINE>1042</LINE>
      <COLUMN>33</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '-' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '-' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbi__vertical_flip</FUNCTION>
    <DECORATED>stbi__vertical_flip</DECORATED>
    <FUNCLINE>1033</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image.h</FILENAME>
      <LINE>1486</LINE>
      <COLUMN>41</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbi__convert_format</FUNCTION>
    <DECORATED>stbi__convert_format</DECORATED>
    <FUNCLINE>1471</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image.h</FILENAME>
      <LINE>1486</LINE>
      <COLUMN>37</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbi__convert_format</FUNCTION>
    <DECORATED>stbi__convert_format</DECORATED>
    <FUNCLINE>1471</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image.h</FILENAME>
      <LINE>1487</LINE>
      <COLUMN>41</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbi__convert_format</FUNCTION>
    <DECORATED>stbi__convert_format</DECORATED>
    <FUNCLINE>1471</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image.h</FILENAME>
      <LINE>1487</LINE>
      <COLUMN>37</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbi__convert_format</FUNCTION>
    <DECORATED>stbi__convert_format</DECORATED>
    <FUNCLINE>1471</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image.h</FILENAME>
      <LINE>1528</LINE>
      <COLUMN>57</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbi__convert_format16</FUNCTION>
    <DECORATED>stbi__convert_format16</DECORATED>
    <FUNCLINE>1520</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image.h</FILENAME>
      <LINE>1528</LINE>
      <COLUMN>53</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbi__convert_format16</FUNCTION>
    <DECORATED>stbi__convert_format16</DECORATED>
    <FUNCLINE>1520</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image.h</FILENAME>
      <LINE>1528</LINE>
      <COLUMN>49</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbi__convert_format16</FUNCTION>
    <DECORATED>stbi__convert_format16</DECORATED>
    <FUNCLINE>1520</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image.h</FILENAME>
      <LINE>1535</LINE>
      <COLUMN>40</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbi__convert_format16</FUNCTION>
    <DECORATED>stbi__convert_format16</DECORATED>
    <FUNCLINE>1520</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image.h</FILENAME>
      <LINE>1535</LINE>
      <COLUMN>36</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbi__convert_format16</FUNCTION>
    <DECORATED>stbi__convert_format16</DECORATED>
    <FUNCLINE>1520</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image.h</FILENAME>
      <LINE>1536</LINE>
      <COLUMN>40</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbi__convert_format16</FUNCTION>
    <DECORATED>stbi__convert_format16</DECORATED>
    <FUNCLINE>1520</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image.h</FILENAME>
      <LINE>1536</LINE>
      <COLUMN>36</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbi__convert_format16</FUNCTION>
    <DECORATED>stbi__convert_format16</DECORATED>
    <FUNCLINE>1520</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image.h</FILENAME>
      <LINE>1598</LINE>
      <COLUMN>45</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbi__hdr_to_ldr</FUNCTION>
    <DECORATED>stbi__hdr_to_ldr</DECORATED>
    <FUNCLINE>1587</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image.h</FILENAME>
      <LINE>2710</LINE>
      <COLUMN>55</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbi__parse_entropy_coded_data</FUNCTION>
    <DECORATED>stbi__parse_entropy_coded_data</DECORATED>
    <FUNCLINE>2637</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image.h</FILENAME>
      <LINE>2741</LINE>
      <COLUMN>64</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbi__parse_entropy_coded_data</FUNCTION>
    <DECORATED>stbi__parse_entropy_coded_data</DECORATED>
    <FUNCLINE>2637</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image.h</FILENAME>
      <LINE>2655</LINE>
      <COLUMN>75</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbi__parse_entropy_coded_data</FUNCTION>
    <DECORATED>stbi__parse_entropy_coded_data</DECORATED>
    <FUNCLINE>2637</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image.h</FILENAME>
      <LINE>2655</LINE>
      <COLUMN>73</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbi__parse_entropy_coded_data</FUNCTION>
    <DECORATED>stbi__parse_entropy_coded_data</DECORATED>
    <FUNCLINE>2637</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image.h</FILENAME>
      <LINE>2655</LINE>
      <COLUMN>79</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbi__parse_entropy_coded_data</FUNCTION>
    <DECORATED>stbi__parse_entropy_coded_data</DECORATED>
    <FUNCLINE>2637</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image.h</FILENAME>
      <LINE>2683</LINE>
      <COLUMN>82</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbi__parse_entropy_coded_data</FUNCTION>
    <DECORATED>stbi__parse_entropy_coded_data</DECORATED>
    <FUNCLINE>2637</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image.h</FILENAME>
      <LINE>2778</LINE>
      <COLUMN>55</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbi__jpeg_finish</FUNCTION>
    <DECORATED>stbi__jpeg_finish</DECORATED>
    <FUNCLINE>2768</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image.h</FILENAME>
      <LINE>2780</LINE>
      <COLUMN>75</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbi__jpeg_finish</FUNCTION>
    <DECORATED>stbi__jpeg_finish</DECORATED>
    <FUNCLINE>2768</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image.h</FILENAME>
      <LINE>2780</LINE>
      <COLUMN>73</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbi__jpeg_finish</FUNCTION>
    <DECORATED>stbi__jpeg_finish</DECORATED>
    <FUNCLINE>2768</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image.h</FILENAME>
      <LINE>2780</LINE>
      <COLUMN>79</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbi__jpeg_finish</FUNCTION>
    <DECORATED>stbi__jpeg_finish</DECORATED>
    <FUNCLINE>2768</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image.h</FILENAME>
      <LINE>3246</LINE>
      <COLUMN>43</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbi__resample_row_hv_2_simd</FUNCTION>
    <DECORATED>stbi__resample_row_hv_2_simd</DECORATED>
    <FUNCLINE>3189</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image.h</FILENAME>
      <LINE>3667</LINE>
      <COLUMN>28</COLUMN>
    </SFA>
    <DEFECTCODE>6001</DEFECTCODE>
    <DESCRIPTION>초기화되지 않은 메모리 'coutput'을(를) 사용하고 있습니다.</DESCRIPTION>
    <FUNCTION>load_jpeg_image</FUNCTION>
    <DECORATED>load_jpeg_image</DECORATED>
    <FUNCLINE>3524</FUNCLINE>
    <PROBABILITY>1</PROBABILITY>
    <RANK>3</RANK>
    <CATEGORY>
      <RULECATEGORY>mspft</RULECATEGORY>
    </CATEGORY>
    <PATH>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image.h</FILENAME>
        <LINE>3526</LINE>
        <COLUMN>7</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image.h</FILENAME>
        <LINE>3526</LINE>
        <COLUMN>10</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image.h</FILENAME>
        <LINE>3526</LINE>
        <COLUMN>20</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image.h</FILENAME>
        <LINE>3527</LINE>
        <COLUMN>15</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image.h</FILENAME>
        <LINE>3530</LINE>
        <COLUMN>20</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image.h</FILENAME>
        <LINE>3533</LINE>
        <COLUMN>7</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image.h</FILENAME>
        <LINE>3536</LINE>
        <COLUMN>5</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image.h</FILENAME>
        <LINE>3538</LINE>
        <COLUMN>10</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image.h</FILENAME>
        <LINE>3540</LINE>
        <COLUMN>33</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image.h</FILENAME>
        <LINE>3543</LINE>
        <COLUMN>15</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image.h</FILENAME>
        <LINE>3547</LINE>
        <COLUMN>10</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image.h</FILENAME>
        <LINE>3548</LINE>
        <COLUMN>19</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image.h</FILENAME>
        <LINE>3548</LINE>
        <COLUMN>21</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image.h</FILENAME>
        <LINE>3549</LINE>
        <COLUMN>15</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image.h</FILENAME>
        <LINE>3550</LINE>
        <COLUMN>15</COLUMN>
        <KEYEVENT>
          <ID>1</ID>
          <KIND>선언</KIND>
          <IMPORTANCE>Essential</IMPORTANCE>
          <MESSAGE>'coutput'이(가) 초기화되지 않았습니다.</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image.h</FILENAME>
        <LINE>3552</LINE>
        <COLUMN>21</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image.h</FILENAME>
        <LINE>3554</LINE>
        <COLUMN>12</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image.h</FILENAME>
        <LINE>3554</LINE>
        <COLUMN>18</COLUMN>
        <KEYEVENT>
          <ID>2</ID>
          <KIND>분기</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>이 루프 건너뛰기, ('k&lt;decode_n'이(가) false라고 가정)</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image.h</FILENAME>
        <LINE>3577</LINE>
        <COLUMN>13</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image.h</FILENAME>
        <LINE>3578</LINE>
        <COLUMN>10</COLUMN>
        <KEYEVENT>
          <ID>3</ID>
          <KIND>분기</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>이 분기 건너뛰기, ('!output'이(가) false라고 가정)</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image.h</FILENAME>
        <LINE>3581</LINE>
        <COLUMN>12</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image.h</FILENAME>
        <LINE>3581</LINE>
        <COLUMN>18</COLUMN>
        <KEYEVENT>
          <ID>4</ID>
          <KIND>분기</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>이 루프 시작, ('j&lt;z-&gt;s-&gt;img_y' 가정)</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image.h</FILENAME>
        <LINE>3582</LINE>
        <COLUMN>18</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image.h</FILENAME>
        <LINE>3583</LINE>
        <COLUMN>15</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image.h</FILENAME>
        <LINE>3583</LINE>
        <COLUMN>21</COLUMN>
        <KEYEVENT>
          <ID>5</ID>
          <KIND>분기</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>이 루프 건너뛰기, ('k&lt;decode_n'이(가) false라고 가정)</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image.h</FILENAME>
        <LINE>3597</LINE>
        <COLUMN>15</COLUMN>
        <KEYEVENT>
          <ID>6</ID>
          <KIND>분기</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>이 분기 건너뛰기, ('n&gt;=3'이(가) false라고 가정)</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image.h</FILENAME>
        <LINE>3640</LINE>
        <COLUMN>16</COLUMN>
        <KEYEVENT>
          <ID>7</ID>
          <KIND>분기</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>이 분기 건너뛰기, ('is_rgb'이(가) false라고 가정)</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image.h</FILENAME>
        <LINE>3650</LINE>
        <COLUMN>40</COLUMN>
        <KEYEVENT>
          <ID>8</ID>
          <KIND>분기</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>이 분기 건너뛰기, ('&lt;분기 조건&gt;'이(가) false라고 가정)</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image.h</FILENAME>
        <LINE>3660</LINE>
        <COLUMN>40</COLUMN>
        <KEYEVENT>
          <ID>9</ID>
          <KIND>분기</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>이 분기 건너뛰기, ('&lt;분기 조건&gt;'이(가) false라고 가정)</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image.h</FILENAME>
        <LINE>3667</LINE>
        <COLUMN>24</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image.h</FILENAME>
        <LINE>3667</LINE>
        <COLUMN>28</COLUMN>
        <KEYEVENT>
          <ID>10</ID>
          <KIND>사용법</KIND>
          <IMPORTANCE>Essential</IMPORTANCE>
          <MESSAGE>'coutput'이(가) 사용되는데 초기화되지 않았을 수 있습니다.</MESSAGE>
        </KEYEVENT>
      </SFA>
    </PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image.h</FILENAME>
      <LINE>3559</LINE>
      <COLUMN>71</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '+' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '+' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>load_jpeg_image</FUNCTION>
    <DECORATED>load_jpeg_image</DECORATED>
    <FUNCLINE>3524</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image.h</FILENAME>
      <LINE>3582</LINE>
      <COLUMN>49</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>load_jpeg_image</FUNCTION>
    <DECORATED>load_jpeg_image</DECORATED>
    <FUNCLINE>3524</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image.h</FILENAME>
      <LINE>3582</LINE>
      <COLUMN>35</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>load_jpeg_image</FUNCTION>
    <DECORATED>load_jpeg_image</DECORATED>
    <FUNCLINE>3524</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image.h</FILENAME>
      <LINE>4306</LINE>
      <COLUMN>36</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbi__create_png_image_raw</FUNCTION>
    <DECORATED>stbi__create_png_image_raw</DECORATED>
    <FUNCLINE>4281</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image.h</FILENAME>
      <LINE>4315</LINE>
      <COLUMN>17</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbi__create_png_image_raw</FUNCTION>
    <DECORATED>stbi__create_png_image_raw</DECORATED>
    <FUNCLINE>4281</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image.h</FILENAME>
      <LINE>4395</LINE>
      <COLUMN>33</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbi__create_png_image_raw</FUNCTION>
    <DECORATED>stbi__create_png_image_raw</DECORATED>
    <FUNCLINE>4281</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image.h</FILENAME>
      <LINE>4408</LINE>
      <COLUMN>39</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbi__create_png_image_raw</FUNCTION>
    <DECORATED>stbi__create_png_image_raw</DECORATED>
    <FUNCLINE>4281</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image.h</FILENAME>
      <LINE>4409</LINE>
      <COLUMN>39</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbi__create_png_image_raw</FUNCTION>
    <DECORATED>stbi__create_png_image_raw</DECORATED>
    <FUNCLINE>4281</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image.h</FILENAME>
      <LINE>4409</LINE>
      <COLUMN>45</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbi__create_png_image_raw</FUNCTION>
    <DECORATED>stbi__create_png_image_raw</DECORATED>
    <FUNCLINE>4281</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image.h</FILENAME>
      <LINE>4458</LINE>
      <COLUMN>33</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbi__create_png_image_raw</FUNCTION>
    <DECORATED>stbi__create_png_image_raw</DECORATED>
    <FUNCLINE>4281</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image.h</FILENAME>
      <LINE>4521</LINE>
      <COLUMN>47</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbi__create_png_image</FUNCTION>
    <DECORATED>stbi__create_png_image</DECORATED>
    <FUNCLINE>4491</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image.h</FILENAME>
      <LINE>4521</LINE>
      <COLUMN>35</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbi__create_png_image</FUNCTION>
    <DECORATED>stbi__create_png_image</DECORATED>
    <FUNCLINE>4491</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image.h</FILENAME>
      <LINE>4521</LINE>
      <COLUMN>65</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbi__create_png_image</FUNCTION>
    <DECORATED>stbi__create_png_image</DECORATED>
    <FUNCLINE>4491</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image.h</FILENAME>
      <LINE>4522</LINE>
      <COLUMN>38</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbi__create_png_image</FUNCTION>
    <DECORATED>stbi__create_png_image</DECORATED>
    <FUNCLINE>4491</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image.h</FILENAME>
      <LINE>4522</LINE>
      <COLUMN>35</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '+' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '+' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbi__create_png_image</FUNCTION>
    <DECORATED>stbi__create_png_image</DECORATED>
    <FUNCLINE>4491</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image.h</FILENAME>
      <LINE>4522</LINE>
      <COLUMN>33</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbi__create_png_image</FUNCTION>
    <DECORATED>stbi__create_png_image</DECORATED>
    <FUNCLINE>4491</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image.h</FILENAME>
      <LINE>5212</LINE>
      <COLUMN>49</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbi__bmp_load</FUNCTION>
    <DECORATED>stbi__bmp_load</DECORATED>
    <FUNCLINE>5074</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image.h</FILENAME>
      <LINE>5212</LINE>
      <COLUMN>40</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbi__bmp_load</FUNCTION>
    <DECORATED>stbi__bmp_load</DECORATED>
    <FUNCLINE>5074</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image.h</FILENAME>
      <LINE>5213</LINE>
      <COLUMN>52</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbi__bmp_load</FUNCTION>
    <DECORATED>stbi__bmp_load</DECORATED>
    <FUNCLINE>5074</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image.h</FILENAME>
      <LINE>5213</LINE>
      <COLUMN>43</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbi__bmp_load</FUNCTION>
    <DECORATED>stbi__bmp_load</DECORATED>
    <FUNCLINE>5074</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image.h</FILENAME>
      <LINE>5213</LINE>
      <COLUMN>40</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '-' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '-' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbi__bmp_load</FUNCTION>
    <DECORATED>stbi__bmp_load</DECORATED>
    <FUNCLINE>5074</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image.h</FILENAME>
      <LINE>5428</LINE>
      <COLUMN>52</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbi__tga_load</FUNCTION>
    <DECORATED>stbi__tga_load</DECORATED>
    <FUNCLINE>5368</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image.h</FILENAME>
      <LINE>5428</LINE>
      <COLUMN>42</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbi__tga_load</FUNCTION>
    <DECORATED>stbi__tga_load</DECORATED>
    <FUNCLINE>5368</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image.h</FILENAME>
      <LINE>5687</LINE>
      <COLUMN>42</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbi__psd_load</FUNCTION>
    <DECORATED>stbi__psd_load</DECORATED>
    <FUNCLINE>5612</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image.h</FILENAME>
      <LINE>5687</LINE>
      <COLUMN>39</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbi__psd_load</FUNCTION>
    <DECORATED>stbi__psd_load</DECORATED>
    <FUNCLINE>5612</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image.h</FILENAME>
      <LINE>5769</LINE>
      <COLUMN>58</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbi__psd_load</FUNCTION>
    <DECORATED>stbi__psd_load</DECORATED>
    <FUNCLINE>5612</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image.h</FILENAME>
      <LINE>5781</LINE>
      <COLUMN>42</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbi__psd_load</FUNCTION>
    <DECORATED>stbi__psd_load</DECORATED>
    <FUNCLINE>5612</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image.h</FILENAME>
      <LINE>5906</LINE>
      <COLUMN>39</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbi__pic_load_core</FUNCTION>
    <DECORATED>stbi__pic_load_core</DECORATED>
    <FUNCLINE>5873</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image.h</FILENAME>
      <LINE>5906</LINE>
      <COLUMN>33</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbi__pic_load_core</FUNCTION>
    <DECORATED>stbi__pic_load_core</DECORATED>
    <FUNCLINE>5873</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image.h</FILENAME>
      <LINE>6005</LINE>
      <COLUMN>27</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbi__pic_load</FUNCTION>
    <DECORATED>stbi__pic_load</DECORATED>
    <FUNCLINE>5983</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image.h</FILENAME>
      <LINE>6005</LINE>
      <COLUMN>25</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbi__pic_load</FUNCTION>
    <DECORATED>stbi__pic_load</DECORATED>
    <FUNCLINE>5983</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image.h</FILENAME>
      <LINE>6285</LINE>
      <COLUMN>85</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '-' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '-' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbi__gif_load_next</FUNCTION>
    <DECORATED>stbi__gif_load_next</DECORATED>
    <FUNCLINE>6255</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image.h</FILENAME>
      <LINE>6279</LINE>
      <COLUMN>57</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbi__gif_load_next</FUNCTION>
    <DECORATED>stbi__gif_load_next</DECORATED>
    <FUNCLINE>6255</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image.h</FILENAME>
      <LINE>6279</LINE>
      <COLUMN>50</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbi__gif_load_next</FUNCTION>
    <DECORATED>stbi__gif_load_next</DECORATED>
    <FUNCLINE>6255</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image.h</FILENAME>
      <LINE>6275</LINE>
      <COLUMN>57</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbi__gif_load_next</FUNCTION>
    <DECORATED>stbi__gif_load_next</DECORATED>
    <FUNCLINE>6255</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image.h</FILENAME>
      <LINE>6275</LINE>
      <COLUMN>50</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbi__gif_load_next</FUNCTION>
    <DECORATED>stbi__gif_load_next</DECORATED>
    <FUNCLINE>6255</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image.h</FILENAME>
      <LINE>6538</LINE>
      <COLUMN>51</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbi__hdr_load</FUNCTION>
    <DECORATED>stbi__hdr_load</DECORATED>
    <FUNCLINE>6476</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image.h</FILENAME>
      <LINE>6538</LINE>
      <COLUMN>43</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbi__hdr_load</FUNCTION>
    <DECORATED>stbi__hdr_load</DECORATED>
    <FUNCLINE>6476</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image.h</FILENAME>
      <LINE>6538</LINE>
      <COLUMN>66</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbi__hdr_load</FUNCTION>
    <DECORATED>stbi__hdr_load</DECORATED>
    <FUNCLINE>6476</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image.h</FILENAME>
      <LINE>6595</LINE>
      <COLUMN>52</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbi__hdr_load</FUNCTION>
    <DECORATED>stbi__hdr_load</DECORATED>
    <FUNCLINE>6476</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image.h</FILENAME>
      <LINE>6595</LINE>
      <COLUMN>48</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '+' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '+' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbi__hdr_load</FUNCTION>
    <DECORATED>stbi__hdr_load</DECORATED>
    <FUNCLINE>6476</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image.h</FILENAME>
      <LINE>6595</LINE>
      <COLUMN>41</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbi__hdr_load</FUNCTION>
    <DECORATED>stbi__hdr_load</DECORATED>
    <FUNCLINE>6476</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image.h</FILENAME>
      <LINE>6595</LINE>
      <COLUMN>75</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbi__hdr_load</FUNCTION>
    <DECORATED>stbi__hdr_load</DECORATED>
    <FUNCLINE>6476</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image_write.h</FILENAME>
      <LINE>351</LINE>
      <COLUMN>60</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbiw__write_pixels</FUNCTION>
    <DECORATED>stbiw__write_pixels</DECORATED>
    <FUNCLINE>336</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image_write.h</FILENAME>
      <LINE>351</LINE>
      <COLUMN>57</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '+' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '+' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbiw__write_pixels</FUNCTION>
    <DECORATED>stbiw__write_pixels</DECORATED>
    <FUNCLINE>336</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image_write.h</FILENAME>
      <LINE>351</LINE>
      <COLUMN>55</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbiw__write_pixels</FUNCTION>
    <DECORATED>stbiw__write_pixels</DECORATED>
    <FUNCLINE>336</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image_write.h</FILENAME>
      <LINE>419</LINE>
      <COLUMN>62</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbi_write_tga_core</FUNCTION>
    <DECORATED>stbi_write_tga_core</DECORATED>
    <FUNCLINE>401</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image_write.h</FILENAME>
      <LINE>419</LINE>
      <COLUMN>58</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbi_write_tga_core</FUNCTION>
    <DECORATED>stbi_write_tga_core</DECORATED>
    <FUNCLINE>401</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image_write.h</FILENAME>
      <LINE>423</LINE>
      <COLUMN>43</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbi_write_tga_core</FUNCTION>
    <DECORATED>stbi_write_tga_core</DECORATED>
    <FUNCLINE>401</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image_write.h</FILENAME>
      <LINE>429</LINE>
      <COLUMN>50</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbi_write_tga_core</FUNCTION>
    <DECORATED>stbi_write_tga_core</DECORATED>
    <FUNCLINE>401</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image_write.h</FILENAME>
      <LINE>429</LINE>
      <COLUMN>45</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '+' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '+' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbi_write_tga_core</FUNCTION>
    <DECORATED>stbi_write_tga_core</DECORATED>
    <FUNCLINE>401</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image_write.h</FILENAME>
      <LINE>433</LINE>
      <COLUMN>46</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbi_write_tga_core</FUNCTION>
    <DECORATED>stbi_write_tga_core</DECORATED>
    <FUNCLINE>401</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image_write.h</FILENAME>
      <LINE>443</LINE>
      <COLUMN>48</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbi_write_tga_core</FUNCTION>
    <DECORATED>stbi_write_tga_core</DECORATED>
    <FUNCLINE>401</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image_write.h</FILENAME>
      <LINE>456</LINE>
      <COLUMN>74</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbi_write_tga_core</FUNCTION>
    <DECORATED>stbi_write_tga_core</DECORATED>
    <FUNCLINE>401</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image_write.h</FILENAME>
      <LINE>633</LINE>
      <COLUMN>69</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbi_write_hdr_core</FUNCTION>
    <DECORATED>stbi_write_hdr_core</DECORATED>
    <FUNCLINE>617</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image_write.h</FILENAME>
      <LINE>633</LINE>
      <COLUMN>67</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbi_write_hdr_core</FUNCTION>
    <DECORATED>stbi_write_hdr_core</DECORATED>
    <FUNCLINE>617</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image_write.h</FILENAME>
      <LINE>684</LINE>
      <COLUMN>32</COLUMN>
    </SFA>
    <DEFECTCODE>6386</DEFECTCODE>
    <DESCRIPTION>'p'에 쓰는 동안 버퍼 오버런이 발생했습니다.  쓰기 가능한 크기는 'itemsize*m+sizeof(int)*2'바이트인데 실제로는 '8'바이트만 쓸 수 있습니다.</DESCRIPTION>
    <FUNCTION>stbiw__sbgrowf</FUNCTION>
    <DECORATED>stbiw__sbgrowf</DECORATED>
    <FUNCLINE>678</FUNCLINE>
    <PROBABILITY>1</PROBABILITY>
    <RANK>4</RANK>
    <CATEGORY>
      <RULECATEGORY>mspft</RULECATEGORY>
    </CATEGORY>
    <PATH>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>680</LINE>
        <COLUMN>7</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>681</LINE>
        <COLUMN>9</COLUMN>
        <KEYEVENT>
          <ID>1</ID>
          <KIND>선언</KIND>
          <IMPORTANCE>Essential</IMPORTANCE>
          <MESSAGE>'p'이(가) 0바이트 배열입니다.</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>683</LINE>
        <COLUMN>7</COLUMN>
        <KEYEVENT>
          <ID>2</ID>
          <KIND>분기</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>이 분기 시작, ('p' 가정)</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>684</LINE>
        <COLUMN>10</COLUMN>
        <KEYEVENT>
          <ID>3</ID>
          <KIND>분기</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>이 분기 시작, ('!*arr' 가정)</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>684</LINE>
        <COLUMN>32</COLUMN>
        <KEYEVENT>
          <ID>4</ID>
          <KIND>사용법</KIND>
          <IMPORTANCE>Essential</IMPORTANCE>
          <MESSAGE>'p'에 쓰기가 잘못됨, (쓰기 가능한 범위를 벗어남)</MESSAGE>
        </KEYEVENT>
      </SFA>
    </PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image_write.h</FILENAME>
      <LINE>681</LINE>
      <COLUMN>13</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbiw__sbgrowf</FUNCTION>
    <DECORATED>stbiw__sbgrowf</DECORATED>
    <FUNCLINE>678</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image_write.h</FILENAME>
      <LINE>773</LINE>
      <COLUMN>30</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '-' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '-' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbi_zlib_compress</FUNCTION>
    <DECORATED>stbi_zlib_compress</DECORATED>
    <FUNCLINE>745</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image_write.h</FILENAME>
      <LINE>791</LINE>
      <COLUMN>33</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '-' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '-' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbi_zlib_compress</FUNCTION>
    <DECORATED>stbi_zlib_compress</DECORATED>
    <FUNCLINE>745</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image_write.h</FILENAME>
      <LINE>948</LINE>
      <COLUMN>41</COLUMN>
    </SFA>
    <DEFECTCODE>6386</DEFECTCODE>
    <DESCRIPTION>'line_buffer'에 쓰는 동안 버퍼 오버런이 발생했습니다.  쓰기 가능한 크기는 '(unsigned int)x*(unsigned int)n'바이트인데 실제로는 '2'바이트만 쓸 수 있습니다.</DESCRIPTION>
    <FUNCTION>stbi_write_png_to_mem</FUNCTION>
    <DECORATED>stbi_write_png_to_mem</DECORATED>
    <FUNCLINE>914</FUNCLINE>
    <PROBABILITY>1</PROBABILITY>
    <RANK>4</RANK>
    <CATEGORY>
      <RULECATEGORY>mspft</RULECATEGORY>
    </CATEGORY>
    <PATH>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>916</LINE>
        <COLUMN>7</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>917</LINE>
        <COLUMN>17</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>918</LINE>
        <COLUMN>18</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>918</LINE>
        <COLUMN>23</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>918</LINE>
        <COLUMN>27</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>918</LINE>
        <COLUMN>34</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>919</LINE>
        <COLUMN>16</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>920</LINE>
        <COLUMN>7</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>920</LINE>
        <COLUMN>9</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>920</LINE>
        <COLUMN>11</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>920</LINE>
        <COLUMN>13</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>920</LINE>
        <COLUMN>15</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>922</LINE>
        <COLUMN>20</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>925</LINE>
        <COLUMN>8</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>925</LINE>
        <COLUMN>59</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>926</LINE>
        <COLUMN>15</COLUMN>
        <KEYEVENT>
          <ID>1</ID>
          <KIND>선언</KIND>
          <IMPORTANCE>Essential</IMPORTANCE>
          <MESSAGE>'line_buffer'이(가) 배열입니다.</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>926</LINE>
        <COLUMN>58</COLUMN>
        <KEYEVENT>
          <ID>2</ID>
          <KIND>분기</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>이 분기 건너뛰기, ('!line_buffer'이(가) false라고 가정)</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>927</LINE>
        <COLUMN>9</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>927</LINE>
        <COLUMN>15</COLUMN>
        <KEYEVENT>
          <ID>3</ID>
          <KIND>분기</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>이 루프 시작, ('j&lt;y' 가정)</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>928</LINE>
        <COLUMN>17</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>929</LINE>
        <COLUMN>17</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>930</LINE>
        <COLUMN>11</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>931</LINE>
        <COLUMN>10</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>931</LINE>
        <COLUMN>20</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>932</LINE>
        <COLUMN>12</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>932</LINE>
        <COLUMN>18</COLUMN>
        <KEYEVENT>
          <ID>4</ID>
          <KIND>분기</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>이 루프 시작, ('p&lt;2' 가정)</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>933</LINE>
        <COLUMN>15</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>933</LINE>
        <COLUMN>29</COLUMN>
        <KEYEVENT>
          <ID>5</ID>
          <KIND>분기</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>이 루프 시작, ('k&lt;5' 가정)</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>934</LINE>
        <COLUMN>16</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>934</LINE>
        <COLUMN>32</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>935</LINE>
        <COLUMN>27</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>936</LINE>
        <COLUMN>18</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>936</LINE>
        <COLUMN>24</COLUMN>
        <KEYEVENT>
          <ID>6</ID>
          <KIND>분기</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>이 루프 건너뛰기, ('i&lt;n'이(가) false라고 가정)</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>946</LINE>
        <COLUMN>18</COLUMN>
        <KEYEVENT>
          <ID>7</ID>
          <KIND>별칭</KIND>
          <IMPORTANCE>Essential</IMPORTANCE>
          <MESSAGE>(별칭) 'i'이(가) 'n'의 값을 받습니다.</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>946</LINE>
        <COLUMN>24</COLUMN>
        <KEYEVENT>
          <ID>8</ID>
          <KIND>분기</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>이 루프 시작, ('i&lt;x*n' 가정)</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>947</LINE>
        <COLUMN>23</COLUMN>
        <KEYEVENT>
          <ID>9</ID>
          <KIND>분기</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>switch( 'type' )가 case 0: (으)로 확인된다고 가정합니다.</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>948</LINE>
        <COLUMN>18</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>948</LINE>
        <COLUMN>41</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>946</LINE>
        <COLUMN>31</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>946</LINE>
        <COLUMN>24</COLUMN>
        <KEYEVENT>
          <ID>10</ID>
          <KIND>분기</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>이 루프 계속, ('i&lt;x*n' 가정)</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>947</LINE>
        <COLUMN>23</COLUMN>
        <KEYEVENT>
          <ID>11</ID>
          <KIND>분기</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>switch( 'type' )가 case 0: (으)로 확인된다고 가정합니다.</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>948</LINE>
        <COLUMN>18</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>948</LINE>
        <COLUMN>41</COLUMN>
        <KEYEVENT>
          <ID>12</ID>
          <KIND>사용법</KIND>
          <IMPORTANCE>Essential</IMPORTANCE>
          <MESSAGE>'line_buffer'에 쓰기가 잘못됨, (쓰기 가능한 범위를 벗어남)</MESSAGE>
        </KEYEVENT>
      </SFA>
    </PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image_write.h</FILENAME>
      <LINE>959</LINE>
      <COLUMN>19</COLUMN>
    </SFA>
    <DEFECTCODE>6385</DEFECTCODE>
    <DESCRIPTION>'line_buffer'에서 잘못된 데이터를 읽고 있습니다.  읽기 가능한 크기는 '(unsigned int)x*(unsigned int)n'바이트인데 실제로는 '2'바이트만 읽을 수 있습니다.</DESCRIPTION>
    <FUNCTION>stbi_write_png_to_mem</FUNCTION>
    <DECORATED>stbi_write_png_to_mem</DECORATED>
    <FUNCLINE>914</FUNCLINE>
    <PROBABILITY>1</PROBABILITY>
    <RANK>4</RANK>
    <CATEGORY>
      <RULECATEGORY>mspft</RULECATEGORY>
    </CATEGORY>
    <PATH>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>916</LINE>
        <COLUMN>7</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>917</LINE>
        <COLUMN>17</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>918</LINE>
        <COLUMN>18</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>918</LINE>
        <COLUMN>23</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>918</LINE>
        <COLUMN>27</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>918</LINE>
        <COLUMN>34</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>919</LINE>
        <COLUMN>16</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>920</LINE>
        <COLUMN>7</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>920</LINE>
        <COLUMN>9</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>920</LINE>
        <COLUMN>11</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>920</LINE>
        <COLUMN>13</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>920</LINE>
        <COLUMN>15</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>922</LINE>
        <COLUMN>20</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>925</LINE>
        <COLUMN>8</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>925</LINE>
        <COLUMN>59</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>926</LINE>
        <COLUMN>15</COLUMN>
        <KEYEVENT>
          <ID>1</ID>
          <KIND>선언</KIND>
          <IMPORTANCE>Essential</IMPORTANCE>
          <MESSAGE>'line_buffer'이(가) 배열입니다.</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>926</LINE>
        <COLUMN>58</COLUMN>
        <KEYEVENT>
          <ID>2</ID>
          <KIND>분기</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>이 분기 건너뛰기, ('!line_buffer'이(가) false라고 가정)</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>927</LINE>
        <COLUMN>9</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>927</LINE>
        <COLUMN>15</COLUMN>
        <KEYEVENT>
          <ID>3</ID>
          <KIND>분기</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>이 루프 시작, ('j&lt;y' 가정)</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>928</LINE>
        <COLUMN>17</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>929</LINE>
        <COLUMN>17</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>930</LINE>
        <COLUMN>11</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>931</LINE>
        <COLUMN>10</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>931</LINE>
        <COLUMN>20</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>932</LINE>
        <COLUMN>12</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>932</LINE>
        <COLUMN>18</COLUMN>
        <KEYEVENT>
          <ID>4</ID>
          <KIND>분기</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>이 루프 시작, ('p&lt;2' 가정)</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>933</LINE>
        <COLUMN>15</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>933</LINE>
        <COLUMN>29</COLUMN>
        <KEYEVENT>
          <ID>5</ID>
          <KIND>분기</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>이 루프 시작, ('k&lt;5' 가정)</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>934</LINE>
        <COLUMN>16</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>934</LINE>
        <COLUMN>32</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>935</LINE>
        <COLUMN>27</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>936</LINE>
        <COLUMN>18</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>936</LINE>
        <COLUMN>24</COLUMN>
        <KEYEVENT>
          <ID>6</ID>
          <KIND>분기</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>이 루프 건너뛰기, ('i&lt;n'이(가) false라고 가정)</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>946</LINE>
        <COLUMN>18</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>946</LINE>
        <COLUMN>24</COLUMN>
        <KEYEVENT>
          <ID>7</ID>
          <KIND>분기</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>이 루프 건너뛰기, ('i&lt;x*n'이(가) false라고 가정)</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>957</LINE>
        <COLUMN>16</COLUMN>
        <KEYEVENT>
          <ID>8</ID>
          <KIND>분기</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>이 분기 건너뛰기, ('p'이(가) false라고 가정)</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>958</LINE>
        <COLUMN>18</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>958</LINE>
        <COLUMN>24</COLUMN>
        <KEYEVENT>
          <ID>9</ID>
          <KIND>분기</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>이 루프 시작, ('i&lt;x*n' 가정)</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>959</LINE>
        <COLUMN>19</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>958</LINE>
        <COLUMN>31</COLUMN>
        <KEYEVENT>
          <ID>10</ID>
          <KIND>선언</KIND>
          <IMPORTANCE>Essential</IMPORTANCE>
          <MESSAGE>'i'이(가) 1과(와) 같을 수 있습니다.</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>958</LINE>
        <COLUMN>24</COLUMN>
        <KEYEVENT>
          <ID>11</ID>
          <KIND>분기</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>이 루프 계속, ('i&lt;x*n' 가정)</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>959</LINE>
        <COLUMN>19</COLUMN>
        <KEYEVENT>
          <ID>12</ID>
          <KIND>사용법</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>'i'은(는) 'abs'(&lt;no file&gt;:0에서 선언됨)에 대한 입력입니다.</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>959</LINE>
        <COLUMN>19</COLUMN>
        <KEYEVENT>
          <ID>13</ID>
          <KIND>사용법</KIND>
          <IMPORTANCE>Essential</IMPORTANCE>
          <MESSAGE>'line_buffer'에서 읽기가 잘못됨, (읽기 가능한 범위를 벗어남)</MESSAGE>
        </KEYEVENT>
      </SFA>
    </PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image_write.h</FILENAME>
      <LINE>978</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>6386</DEFECTCODE>
    <DESCRIPTION>'o'에 쓰는 동안 버퍼 오버런이 발생했습니다.  쓰기 가능한 크기는 '(unsigned int)8+12+13+12+zlen+(unsigned int)12'바이트인데 실제로는 '8'바이트만 쓸 수 있습니다.</DESCRIPTION>
    <FUNCTION>stbi_write_png_to_mem</FUNCTION>
    <DECORATED>stbi_write_png_to_mem</DECORATED>
    <FUNCLINE>914</FUNCLINE>
    <PROBABILITY>1</PROBABILITY>
    <RANK>4</RANK>
    <CATEGORY>
      <RULECATEGORY>mspft</RULECATEGORY>
    </CATEGORY>
    <PATH>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>916</LINE>
        <COLUMN>7</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>917</LINE>
        <COLUMN>17</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>918</LINE>
        <COLUMN>18</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>918</LINE>
        <COLUMN>23</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>918</LINE>
        <COLUMN>27</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>918</LINE>
        <COLUMN>34</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>919</LINE>
        <COLUMN>16</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>920</LINE>
        <COLUMN>7</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>920</LINE>
        <COLUMN>9</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>920</LINE>
        <COLUMN>11</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>920</LINE>
        <COLUMN>13</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>920</LINE>
        <COLUMN>15</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>922</LINE>
        <COLUMN>20</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>925</LINE>
        <COLUMN>8</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>925</LINE>
        <COLUMN>59</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>926</LINE>
        <COLUMN>15</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>926</LINE>
        <COLUMN>58</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>927</LINE>
        <COLUMN>9</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>927</LINE>
        <COLUMN>15</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>967</LINE>
        <COLUMN>3</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>968</LINE>
        <COLUMN>8</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>969</LINE>
        <COLUMN>3</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>970</LINE>
        <COLUMN>7</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>973</LINE>
        <COLUMN>7</COLUMN>
        <KEYEVENT>
          <ID>1</ID>
          <KIND>선언</KIND>
          <IMPORTANCE>Essential</IMPORTANCE>
          <MESSAGE>'out'이(가) 배열입니다.</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>974</LINE>
        <COLUMN>7</COLUMN>
        <KEYEVENT>
          <ID>2</ID>
          <KIND>분기</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>이 분기 건너뛰기, ('!out'이(가) false라고 가정)</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>975</LINE>
        <COLUMN>12</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>977</LINE>
        <COLUMN>4</COLUMN>
        <KEYEVENT>
          <ID>3</ID>
          <KIND>별칭</KIND>
          <IMPORTANCE>Essential</IMPORTANCE>
          <MESSAGE>(별칭) 'o'이(가) 'out'의 값을 받습니다.</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>978</LINE>
        <COLUMN>3</COLUMN>
        <KEYEVENT>
          <ID>4</ID>
          <KIND>선언</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>'o'은(는) 'memmove'(&lt;no file&gt;:0에서 선언됨)에 대한 In/Out 인수입니다.</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
        <FILENAME>stb_image_write.h</FILENAME>
        <LINE>978</LINE>
        <COLUMN>3</COLUMN>
        <KEYEVENT>
          <ID>5</ID>
          <KIND>사용법</KIND>
          <IMPORTANCE>Essential</IMPORTANCE>
          <MESSAGE>'o'에 쓰기가 잘못됨, (쓰기 가능한 범위를 벗어남)</MESSAGE>
        </KEYEVENT>
      </SFA>
    </PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image_write.h</FILENAME>
      <LINE>935</LINE>
      <COLUMN>52</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbi_write_png_to_mem</FUNCTION>
    <DECORATED>stbi_write_png_to_mem</DECORATED>
    <FUNCLINE>914</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\3rdparty\stb\include\</FILEPATH>
      <FILENAME>stb_image_write.h</FILENAME>
      <LINE>965</LINE>
      <COLUMN>6</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>stbi_write_png_to_mem</FUNCTION>
    <DECORATED>stbi_write_png_to_mem</DECORATED>
    <FUNCLINE>914</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>image.c</FILENAME>
      <LINE>342</LINE>
      <COLUMN>95</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>draw_detections_v3</FUNCTION>
    <DECORATED>draw_detections_v3</DECORATED>
    <FUNCLINE>329</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>image.c</FILENAME>
      <LINE>347</LINE>
      <COLUMN>102</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>draw_detections_v3</FUNCTION>
    <DECORATED>draw_detections_v3</DECORATED>
    <FUNCLINE>329</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>image.c</FILENAME>
      <LINE>347</LINE>
      <COLUMN>55</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>draw_detections_v3</FUNCTION>
    <DECORATED>draw_detections_v3</DECORATED>
    <FUNCLINE>329</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>image.c</FILENAME>
      <LINE>346</LINE>
      <COLUMN>97</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>draw_detections_v3</FUNCTION>
    <DECORATED>draw_detections_v3</DECORATED>
    <FUNCLINE>329</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>image.c</FILENAME>
      <LINE>346</LINE>
      <COLUMN>57</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '-' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '-' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>draw_detections_v3</FUNCTION>
    <DECORATED>draw_detections_v3</DECORATED>
    <FUNCLINE>329</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>image.c</FILENAME>
      <LINE>345</LINE>
      <COLUMN>97</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>draw_detections_v3</FUNCTION>
    <DECORATED>draw_detections_v3</DECORATED>
    <FUNCLINE>329</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>image.c</FILENAME>
      <LINE>345</LINE>
      <COLUMN>57</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '-' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '-' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>draw_detections_v3</FUNCTION>
    <DECORATED>draw_detections_v3</DECORATED>
    <FUNCLINE>329</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>image.c</FILENAME>
      <LINE>353</LINE>
      <COLUMN>82</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>draw_detections_v3</FUNCTION>
    <DECORATED>draw_detections_v3</DECORATED>
    <FUNCLINE>329</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>image.c</FILENAME>
      <LINE>359</LINE>
      <COLUMN>110</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>draw_detections_v3</FUNCTION>
    <DECORATED>draw_detections_v3</DECORATED>
    <FUNCLINE>329</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>image.c</FILENAME>
      <LINE>359</LINE>
      <COLUMN>63</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>draw_detections_v3</FUNCTION>
    <DECORATED>draw_detections_v3</DECORATED>
    <FUNCLINE>329</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>image.c</FILENAME>
      <LINE>358</LINE>
      <COLUMN>105</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>draw_detections_v3</FUNCTION>
    <DECORATED>draw_detections_v3</DECORATED>
    <FUNCLINE>329</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>image.c</FILENAME>
      <LINE>358</LINE>
      <COLUMN>65</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '-' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '-' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>draw_detections_v3</FUNCTION>
    <DECORATED>draw_detections_v3</DECORATED>
    <FUNCLINE>329</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>image.c</FILENAME>
      <LINE>357</LINE>
      <COLUMN>105</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>draw_detections_v3</FUNCTION>
    <DECORATED>draw_detections_v3</DECORATED>
    <FUNCLINE>329</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>image.c</FILENAME>
      <LINE>357</LINE>
      <COLUMN>65</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '-' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '-' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>draw_detections_v3</FUNCTION>
    <DECORATED>draw_detections_v3</DECORATED>
    <FUNCLINE>329</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>image.c</FILENAME>
      <LINE>511</LINE>
      <COLUMN>55</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>draw_detections</FUNCTION>
    <DECORATED>draw_detections</DECORATED>
    <FUNCLINE>465</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>image.c</FILENAME>
      <LINE>585</LINE>
      <COLUMN>51</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '-' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '-' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>image_distance</FUNCTION>
    <DECORATED>image_distance</DECORATED>
    <FUNCLINE>579</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>image.c</FILENAME>
      <LINE>642</LINE>
      <COLUMN>11</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '-' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '-' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>normalize_image</FUNCTION>
    <DECORATED>normalize_image</DECORATED>
    <FUNCLINE>631</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>image.c</FILENAME>
      <LINE>666</LINE>
      <COLUMN>18</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '-' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '-' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>normalize_image2</FUNCTION>
    <DECORATED>normalize_image2</DECORATED>
    <FUNCLINE>651</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>image.c</FILENAME>
      <LINE>682</LINE>
      <COLUMN>42</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>copy_image_inplace</FUNCTION>
    <DECORATED>copy_image_inplace</DECORATED>
    <FUNCLINE>680</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>image.c</FILENAME>
      <LINE>682</LINE>
      <COLUMN>36</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>copy_image_inplace</FUNCTION>
    <DECORATED>copy_image_inplace</DECORATED>
    <FUNCLINE>680</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>image.c</FILENAME>
      <LINE>688</LINE>
      <COLUMN>42</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>copy_image</FUNCTION>
    <DECORATED>copy_image</DECORATED>
    <FUNCLINE>685</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>image.c</FILENAME>
      <LINE>688</LINE>
      <COLUMN>36</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>copy_image</FUNCTION>
    <DECORATED>copy_image</DECORATED>
    <FUNCLINE>685</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>image.c</FILENAME>
      <LINE>689</LINE>
      <COLUMN>37</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>copy_image</FUNCTION>
    <DECORATED>copy_image</DECORATED>
    <FUNCLINE>685</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>image.c</FILENAME>
      <LINE>689</LINE>
      <COLUMN>33</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>copy_image</FUNCTION>
    <DECORATED>copy_image</DECORATED>
    <FUNCLINE>685</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>image.c</FILENAME>
      <LINE>718</LINE>
      <COLUMN>62</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>save_image_png</FUNCTION>
    <DECORATED>save_image_png</DECORATED>
    <FUNCLINE>713</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>image.c</FILENAME>
      <LINE>718</LINE>
      <COLUMN>55</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>save_image_png</FUNCTION>
    <DECORATED>save_image_png</DECORATED>
    <FUNCLINE>713</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>image.c</FILENAME>
      <LINE>739</LINE>
      <COLUMN>62</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>save_image_options</FUNCTION>
    <DECORATED>save_image_options</DECORATED>
    <FUNCLINE>730</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>image.c</FILENAME>
      <LINE>739</LINE>
      <COLUMN>55</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>save_image_options</FUNCTION>
    <DECORATED>save_image_options</DECORATED>
    <FUNCLINE>730</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>image.c</FILENAME>
      <LINE>797</LINE>
      <COLUMN>37</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_image</FUNCTION>
    <DECORATED>make_image</DECORATED>
    <FUNCLINE>794</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>image.c</FILENAME>
      <LINE>797</LINE>
      <COLUMN>33</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_image</FUNCTION>
    <DECORATED>make_image</DECORATED>
    <FUNCLINE>794</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>image.c</FILENAME>
      <LINE>804</LINE>
      <COLUMN>37</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_random_image</FUNCTION>
    <DECORATED>make_random_image</DECORATED>
    <FUNCLINE>801</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>image.c</FILENAME>
      <LINE>804</LINE>
      <COLUMN>33</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_random_image</FUNCTION>
    <DECORATED>make_random_image</DECORATED>
    <FUNCLINE>801</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>image.c</FILENAME>
      <LINE>843</LINE>
      <COLUMN>63</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>rotate_crop_image</FUNCTION>
    <DECORATED>rotate_crop_image</DECORATED>
    <FUNCLINE>834</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>image.c</FILENAME>
      <LINE>844</LINE>
      <COLUMN>63</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>rotate_crop_image</FUNCTION>
    <DECORATED>rotate_crop_image</DECORATED>
    <FUNCLINE>834</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>image.c</FILENAME>
      <LINE>862</LINE>
      <COLUMN>38</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '-' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '-' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>rotate_image</FUNCTION>
    <DECORATED>rotate_image</DECORATED>
    <FUNCLINE>853</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>image.c</FILENAME>
      <LINE>862</LINE>
      <COLUMN>56</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '-' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '-' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>rotate_image</FUNCTION>
    <DECORATED>rotate_image</DECORATED>
    <FUNCLINE>853</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>image.c</FILENAME>
      <LINE>863</LINE>
      <COLUMN>38</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '-' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '-' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>rotate_image</FUNCTION>
    <DECORATED>rotate_image</DECORATED>
    <FUNCLINE>853</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>image.c</FILENAME>
      <LINE>863</LINE>
      <COLUMN>56</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '-' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '-' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>rotate_image</FUNCTION>
    <DECORATED>rotate_image</DECORATED>
    <FUNCLINE>853</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>image.c</FILENAME>
      <LINE>909</LINE>
      <COLUMN>25</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '+' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '+' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>best_3d_shift_r</FUNCTION>
    <DECORATED>best_3d_shift_r</DECORATED>
    <FUNCLINE>906</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>image.c</FILENAME>
      <LINE>1067</LINE>
      <COLUMN>34</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '-' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '-' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>random_augment_image</FUNCTION>
    <DECORATED>random_augment_image</DECORATED>
    <FUNCLINE>1058</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>image.c</FILENAME>
      <LINE>1068</LINE>
      <COLUMN>27</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '-' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '-' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>random_augment_image</FUNCTION>
    <DECORATED>random_augment_image</DECORATED>
    <FUNCLINE>1058</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>image.c</FILENAME>
      <LINE>1068</LINE>
      <COLUMN>20</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>random_augment_image</FUNCTION>
    <DECORATED>random_augment_image</DECORATED>
    <FUNCLINE>1058</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>image.c</FILENAME>
      <LINE>1333</LINE>
      <COLUMN>61</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>quantize_image</FUNCTION>
    <DECORATED>quantize_image</DECORATED>
    <FUNCLINE>1329</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>image.c</FILENAME>
      <LINE>1375</LINE>
      <COLUMN>28</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '-' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '-' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_attention_image</FUNCTION>
    <DECORATED>make_attention_image</DECORATED>
    <FUNCLINE>1354</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>image.c</FILENAME>
      <LINE>1503</LINE>
      <COLUMN>19</COLUMN>
    </SFA>
    <DEFECTCODE>6031</DEFECTCODE>
    <DESCRIPTION>반환 값이 무시되었습니다. 'getchar'.</DESCRIPTION>
    <FUNCTION>load_image_stb</FUNCTION>
    <DECORATED>load_image_stb</DECORATED>
    <FUNCLINE>1487</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>local_layer.c</FILENAME>
      <LINE>50</LINE>
      <COLUMN>52</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_local_layer</FUNCTION>
    <DECORATED>make_local_layer</DECORATED>
    <FUNCLINE>26</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>local_layer.c</FILENAME>
      <LINE>50</LINE>
      <COLUMN>45</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_local_layer</FUNCTION>
    <DECORATED>make_local_layer</DECORATED>
    <FUNCLINE>26</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>local_layer.c</FILENAME>
      <LINE>50</LINE>
      <COLUMN>38</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_local_layer</FUNCTION>
    <DECORATED>make_local_layer</DECORATED>
    <FUNCLINE>26</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>local_layer.c</FILENAME>
      <LINE>50</LINE>
      <COLUMN>34</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_local_layer</FUNCTION>
    <DECORATED>make_local_layer</DECORATED>
    <FUNCLINE>26</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>local_layer.c</FILENAME>
      <LINE>51</LINE>
      <COLUMN>59</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_local_layer</FUNCTION>
    <DECORATED>make_local_layer</DECORATED>
    <FUNCLINE>26</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>local_layer.c</FILENAME>
      <LINE>51</LINE>
      <COLUMN>52</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_local_layer</FUNCTION>
    <DECORATED>make_local_layer</DECORATED>
    <FUNCLINE>26</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>local_layer.c</FILENAME>
      <LINE>51</LINE>
      <COLUMN>45</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_local_layer</FUNCTION>
    <DECORATED>make_local_layer</DECORATED>
    <FUNCLINE>26</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>local_layer.c</FILENAME>
      <LINE>51</LINE>
      <COLUMN>41</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_local_layer</FUNCTION>
    <DECORATED>make_local_layer</DECORATED>
    <FUNCLINE>26</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>local_layer.c</FILENAME>
      <LINE>57</LINE>
      <COLUMN>36</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_local_layer</FUNCTION>
    <DECORATED>make_local_layer</DECORATED>
    <FUNCLINE>26</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>local_layer.c</FILENAME>
      <LINE>57</LINE>
      <COLUMN>31</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_local_layer</FUNCTION>
    <DECORATED>make_local_layer</DECORATED>
    <FUNCLINE>26</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>local_layer.c</FILENAME>
      <LINE>60</LINE>
      <COLUMN>62</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_local_layer</FUNCTION>
    <DECORATED>make_local_layer</DECORATED>
    <FUNCLINE>26</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>local_layer.c</FILENAME>
      <LINE>60</LINE>
      <COLUMN>55</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_local_layer</FUNCTION>
    <DECORATED>make_local_layer</DECORATED>
    <FUNCLINE>26</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>local_layer.c</FILENAME>
      <LINE>60</LINE>
      <COLUMN>48</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_local_layer</FUNCTION>
    <DECORATED>make_local_layer</DECORATED>
    <FUNCLINE>26</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>local_layer.c</FILENAME>
      <LINE>60</LINE>
      <COLUMN>40</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_local_layer</FUNCTION>
    <DECORATED>make_local_layer</DECORATED>
    <FUNCLINE>26</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>local_layer.c</FILENAME>
      <LINE>61</LINE>
      <COLUMN>55</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_local_layer</FUNCTION>
    <DECORATED>make_local_layer</DECORATED>
    <FUNCLINE>26</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>local_layer.c</FILENAME>
      <LINE>61</LINE>
      <COLUMN>47</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_local_layer</FUNCTION>
    <DECORATED>make_local_layer</DECORATED>
    <FUNCLINE>26</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>local_layer.c</FILENAME>
      <LINE>61</LINE>
      <COLUMN>39</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_local_layer</FUNCTION>
    <DECORATED>make_local_layer</DECORATED>
    <FUNCLINE>26</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>local_layer.c</FILENAME>
      <LINE>62</LINE>
      <COLUMN>54</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_local_layer</FUNCTION>
    <DECORATED>make_local_layer</DECORATED>
    <FUNCLINE>26</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>local_layer.c</FILENAME>
      <LINE>62</LINE>
      <COLUMN>46</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_local_layer</FUNCTION>
    <DECORATED>make_local_layer</DECORATED>
    <FUNCLINE>26</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>local_layer.c</FILENAME>
      <LINE>62</LINE>
      <COLUMN>38</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_local_layer</FUNCTION>
    <DECORATED>make_local_layer</DECORATED>
    <FUNCLINE>26</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>local_layer.c</FILENAME>
      <LINE>99</LINE>
      <COLUMN>53</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>forward_local_layer</FUNCTION>
    <DECORATED>forward_local_layer</DECORATED>
    <FUNCLINE>91</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>local_layer.c</FILENAME>
      <LINE>103</LINE>
      <COLUMN>46</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>forward_local_layer</FUNCTION>
    <DECORATED>forward_local_layer</DECORATED>
    <FUNCLINE>91</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>local_layer.c</FILENAME>
      <LINE>103</LINE>
      <COLUMN>42</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>forward_local_layer</FUNCTION>
    <DECORATED>forward_local_layer</DECORATED>
    <FUNCLINE>91</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>local_layer.c</FILENAME>
      <LINE>103</LINE>
      <COLUMN>38</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>forward_local_layer</FUNCTION>
    <DECORATED>forward_local_layer</DECORATED>
    <FUNCLINE>91</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>local_layer.c</FILENAME>
      <LINE>106</LINE>
      <COLUMN>36</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>forward_local_layer</FUNCTION>
    <DECORATED>forward_local_layer</DECORATED>
    <FUNCLINE>91</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>local_layer.c</FILENAME>
      <LINE>108</LINE>
      <COLUMN>54</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>forward_local_layer</FUNCTION>
    <DECORATED>forward_local_layer</DECORATED>
    <FUNCLINE>91</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>local_layer.c</FILENAME>
      <LINE>108</LINE>
      <COLUMN>50</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>forward_local_layer</FUNCTION>
    <DECORATED>forward_local_layer</DECORATED>
    <FUNCLINE>91</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>local_layer.c</FILENAME>
      <LINE>108</LINE>
      <COLUMN>43</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>forward_local_layer</FUNCTION>
    <DECORATED>forward_local_layer</DECORATED>
    <FUNCLINE>91</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>local_layer.c</FILENAME>
      <LINE>108</LINE>
      <COLUMN>36</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>forward_local_layer</FUNCTION>
    <DECORATED>forward_local_layer</DECORATED>
    <FUNCLINE>91</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>local_layer.c</FILENAME>
      <LINE>130</LINE>
      <COLUMN>42</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>backward_local_layer</FUNCTION>
    <DECORATED>backward_local_layer</DECORATED>
    <FUNCLINE>122</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>local_layer.c</FILENAME>
      <LINE>134</LINE>
      <COLUMN>46</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>backward_local_layer</FUNCTION>
    <DECORATED>backward_local_layer</DECORATED>
    <FUNCLINE>122</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>local_layer.c</FILENAME>
      <LINE>134</LINE>
      <COLUMN>42</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>backward_local_layer</FUNCTION>
    <DECORATED>backward_local_layer</DECORATED>
    <FUNCLINE>122</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>local_layer.c</FILENAME>
      <LINE>134</LINE>
      <COLUMN>38</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>backward_local_layer</FUNCTION>
    <DECORATED>backward_local_layer</DECORATED>
    <FUNCLINE>122</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>local_layer.c</FILENAME>
      <LINE>139</LINE>
      <COLUMN>34</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>backward_local_layer</FUNCTION>
    <DECORATED>backward_local_layer</DECORATED>
    <FUNCLINE>122</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>local_layer.c</FILENAME>
      <LINE>141</LINE>
      <COLUMN>61</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>backward_local_layer</FUNCTION>
    <DECORATED>backward_local_layer</DECORATED>
    <FUNCLINE>122</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>local_layer.c</FILENAME>
      <LINE>141</LINE>
      <COLUMN>57</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>backward_local_layer</FUNCTION>
    <DECORATED>backward_local_layer</DECORATED>
    <FUNCLINE>122</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>local_layer.c</FILENAME>
      <LINE>141</LINE>
      <COLUMN>50</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>backward_local_layer</FUNCTION>
    <DECORATED>backward_local_layer</DECORATED>
    <FUNCLINE>122</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>local_layer.c</FILENAME>
      <LINE>141</LINE>
      <COLUMN>43</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>backward_local_layer</FUNCTION>
    <DECORATED>backward_local_layer</DECORATED>
    <FUNCLINE>122</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>local_layer.c</FILENAME>
      <LINE>151</LINE>
      <COLUMN>58</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>backward_local_layer</FUNCTION>
    <DECORATED>backward_local_layer</DECORATED>
    <FUNCLINE>122</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>local_layer.c</FILENAME>
      <LINE>151</LINE>
      <COLUMN>54</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>backward_local_layer</FUNCTION>
    <DECORATED>backward_local_layer</DECORATED>
    <FUNCLINE>122</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>local_layer.c</FILENAME>
      <LINE>151</LINE>
      <COLUMN>47</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>backward_local_layer</FUNCTION>
    <DECORATED>backward_local_layer</DECORATED>
    <FUNCLINE>122</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>local_layer.c</FILENAME>
      <LINE>151</LINE>
      <COLUMN>40</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>backward_local_layer</FUNCTION>
    <DECORATED>backward_local_layer</DECORATED>
    <FUNCLINE>122</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>local_layer.c</FILENAME>
      <LINE>152</LINE>
      <COLUMN>38</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>backward_local_layer</FUNCTION>
    <DECORATED>backward_local_layer</DECORATED>
    <FUNCLINE>122</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>local_layer.c</FILENAME>
      <LINE>162</LINE>
      <COLUMN>101</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>backward_local_layer</FUNCTION>
    <DECORATED>backward_local_layer</DECORATED>
    <FUNCLINE>122</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>local_layer.c</FILENAME>
      <LINE>162</LINE>
      <COLUMN>97</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>backward_local_layer</FUNCTION>
    <DECORATED>backward_local_layer</DECORATED>
    <FUNCLINE>122</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>local_layer.c</FILENAME>
      <LINE>162</LINE>
      <COLUMN>93</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>backward_local_layer</FUNCTION>
    <DECORATED>backward_local_layer</DECORATED>
    <FUNCLINE>122</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>lstm_layer.c</FILENAME>
      <LINE>93</LINE>
      <COLUMN>47</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_lstm_layer</FUNCTION>
    <DECORATED>make_lstm_layer</DECORATED>
    <FUNCLINE>29</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>lstm_layer.c</FILENAME>
      <LINE>93</LINE>
      <COLUMN>39</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_lstm_layer</FUNCTION>
    <DECORATED>make_lstm_layer</DECORATED>
    <FUNCLINE>29</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>lstm_layer.c</FILENAME>
      <LINE>94</LINE>
      <COLUMN>38</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_lstm_layer</FUNCTION>
    <DECORATED>make_lstm_layer</DECORATED>
    <FUNCLINE>29</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>lstm_layer.c</FILENAME>
      <LINE>100</LINE>
      <COLUMN>45</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_lstm_layer</FUNCTION>
    <DECORATED>make_lstm_layer</DECORATED>
    <FUNCLINE>29</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>lstm_layer.c</FILENAME>
      <LINE>101</LINE>
      <COLUMN>45</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_lstm_layer</FUNCTION>
    <DECORATED>make_lstm_layer</DECORATED>
    <FUNCLINE>29</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>lstm_layer.c</FILENAME>
      <LINE>102</LINE>
      <COLUMN>53</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_lstm_layer</FUNCTION>
    <DECORATED>make_lstm_layer</DECORATED>
    <FUNCLINE>29</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>lstm_layer.c</FILENAME>
      <LINE>102</LINE>
      <COLUMN>45</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_lstm_layer</FUNCTION>
    <DECORATED>make_lstm_layer</DECORATED>
    <FUNCLINE>29</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>lstm_layer.c</FILENAME>
      <LINE>104</LINE>
      <COLUMN>45</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_lstm_layer</FUNCTION>
    <DECORATED>make_lstm_layer</DECORATED>
    <FUNCLINE>29</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>lstm_layer.c</FILENAME>
      <LINE>105</LINE>
      <COLUMN>45</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_lstm_layer</FUNCTION>
    <DECORATED>make_lstm_layer</DECORATED>
    <FUNCLINE>29</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>lstm_layer.c</FILENAME>
      <LINE>106</LINE>
      <COLUMN>45</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_lstm_layer</FUNCTION>
    <DECORATED>make_lstm_layer</DECORATED>
    <FUNCLINE>29</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>lstm_layer.c</FILENAME>
      <LINE>107</LINE>
      <COLUMN>45</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_lstm_layer</FUNCTION>
    <DECORATED>make_lstm_layer</DECORATED>
    <FUNCLINE>29</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>lstm_layer.c</FILENAME>
      <LINE>108</LINE>
      <COLUMN>45</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_lstm_layer</FUNCTION>
    <DECORATED>make_lstm_layer</DECORATED>
    <FUNCLINE>29</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>lstm_layer.c</FILENAME>
      <LINE>109</LINE>
      <COLUMN>45</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_lstm_layer</FUNCTION>
    <DECORATED>make_lstm_layer</DECORATED>
    <FUNCLINE>29</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>lstm_layer.c</FILENAME>
      <LINE>110</LINE>
      <COLUMN>45</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_lstm_layer</FUNCTION>
    <DECORATED>make_lstm_layer</DECORATED>
    <FUNCLINE>29</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>lstm_layer.c</FILENAME>
      <LINE>111</LINE>
      <COLUMN>45</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_lstm_layer</FUNCTION>
    <DECORATED>make_lstm_layer</DECORATED>
    <FUNCLINE>29</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>lstm_layer.c</FILENAME>
      <LINE>112</LINE>
      <COLUMN>45</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_lstm_layer</FUNCTION>
    <DECORATED>make_lstm_layer</DECORATED>
    <FUNCLINE>29</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>lstm_layer.c</FILENAME>
      <LINE>113</LINE>
      <COLUMN>45</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_lstm_layer</FUNCTION>
    <DECORATED>make_lstm_layer</DECORATED>
    <FUNCLINE>29</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>lstm_layer.c</FILENAME>
      <LINE>114</LINE>
      <COLUMN>45</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_lstm_layer</FUNCTION>
    <DECORATED>make_lstm_layer</DECORATED>
    <FUNCLINE>29</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>lstm_layer.c</FILENAME>
      <LINE>172</LINE>
      <COLUMN>5</COLUMN>
    </SFA>
    <DEFECTCODE>6262</DEFECTCODE>
    <DESCRIPTION>함수에서 '24940'바이트의 스택을 사용하는데 이 크기가 /analyze:stacksize '16384'을(를) 초과합니다. 일부 데이터를 힙으로 이동하십시오.</DESCRIPTION>
    <FUNCTION>forward_lstm_layer</FUNCTION>
    <DECORATED>forward_lstm_layer</DECORATED>
    <FUNCLINE>172</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>lstm_layer.c</FILENAME>
      <LINE>243</LINE>
      <COLUMN>31</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>forward_lstm_layer</FUNCTION>
    <DECORATED>forward_lstm_layer</DECORATED>
    <FUNCLINE>172</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>lstm_layer.c</FILENAME>
      <LINE>244</LINE>
      <COLUMN>32</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>forward_lstm_layer</FUNCTION>
    <DECORATED>forward_lstm_layer</DECORATED>
    <FUNCLINE>172</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>lstm_layer.c</FILENAME>
      <LINE>245</LINE>
      <COLUMN>36</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>forward_lstm_layer</FUNCTION>
    <DECORATED>forward_lstm_layer</DECORATED>
    <FUNCLINE>172</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>lstm_layer.c</FILENAME>
      <LINE>259</LINE>
      <COLUMN>5</COLUMN>
    </SFA>
    <DEFECTCODE>6262</DEFECTCODE>
    <DESCRIPTION>함수에서 '24940'바이트의 스택을 사용하는데 이 크기가 /analyze:stacksize '16384'을(를) 초과합니다. 일부 데이터를 힙으로 이동하십시오.</DESCRIPTION>
    <FUNCTION>backward_lstm_layer</FUNCTION>
    <DECORATED>backward_lstm_layer</DECORATED>
    <FUNCLINE>259</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>lstm_layer.c</FILENAME>
      <LINE>285</LINE>
      <COLUMN>35</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>backward_lstm_layer</FUNCTION>
    <DECORATED>backward_lstm_layer</DECORATED>
    <FUNCLINE>259</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>lstm_layer.c</FILENAME>
      <LINE>285</LINE>
      <COLUMN>27</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>backward_lstm_layer</FUNCTION>
    <DECORATED>backward_lstm_layer</DECORATED>
    <FUNCLINE>259</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>lstm_layer.c</FILENAME>
      <LINE>286</LINE>
      <COLUMN>52</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>backward_lstm_layer</FUNCTION>
    <DECORATED>backward_lstm_layer</DECORATED>
    <FUNCLINE>259</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>lstm_layer.c</FILENAME>
      <LINE>286</LINE>
      <COLUMN>44</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>backward_lstm_layer</FUNCTION>
    <DECORATED>backward_lstm_layer</DECORATED>
    <FUNCLINE>259</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>lstm_layer.c</FILENAME>
      <LINE>288</LINE>
      <COLUMN>33</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>backward_lstm_layer</FUNCTION>
    <DECORATED>backward_lstm_layer</DECORATED>
    <FUNCLINE>259</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>lstm_layer.c</FILENAME>
      <LINE>288</LINE>
      <COLUMN>25</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>backward_lstm_layer</FUNCTION>
    <DECORATED>backward_lstm_layer</DECORATED>
    <FUNCLINE>259</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>lstm_layer.c</FILENAME>
      <LINE>289</LINE>
      <COLUMN>35</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>backward_lstm_layer</FUNCTION>
    <DECORATED>backward_lstm_layer</DECORATED>
    <FUNCLINE>259</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>lstm_layer.c</FILENAME>
      <LINE>289</LINE>
      <COLUMN>27</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>backward_lstm_layer</FUNCTION>
    <DECORATED>backward_lstm_layer</DECORATED>
    <FUNCLINE>259</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>lstm_layer.c</FILENAME>
      <LINE>290</LINE>
      <COLUMN>32</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>backward_lstm_layer</FUNCTION>
    <DECORATED>backward_lstm_layer</DECORATED>
    <FUNCLINE>259</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>lstm_layer.c</FILENAME>
      <LINE>290</LINE>
      <COLUMN>24</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>backward_lstm_layer</FUNCTION>
    <DECORATED>backward_lstm_layer</DECORATED>
    <FUNCLINE>259</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>lstm_layer.c</FILENAME>
      <LINE>293</LINE>
      <COLUMN>70</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>backward_lstm_layer</FUNCTION>
    <DECORATED>backward_lstm_layer</DECORATED>
    <FUNCLINE>259</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>lstm_layer.c</FILENAME>
      <LINE>295</LINE>
      <COLUMN>68</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>backward_lstm_layer</FUNCTION>
    <DECORATED>backward_lstm_layer</DECORATED>
    <FUNCLINE>259</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>lstm_layer.c</FILENAME>
      <LINE>298</LINE>
      <COLUMN>53</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>backward_lstm_layer</FUNCTION>
    <DECORATED>backward_lstm_layer</DECORATED>
    <FUNCLINE>259</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>lstm_layer.c</FILENAME>
      <LINE>385</LINE>
      <COLUMN>31</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>backward_lstm_layer</FUNCTION>
    <DECORATED>backward_lstm_layer</DECORATED>
    <FUNCLINE>259</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>lstm_layer.c</FILENAME>
      <LINE>386</LINE>
      <COLUMN>48</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>backward_lstm_layer</FUNCTION>
    <DECORATED>backward_lstm_layer</DECORATED>
    <FUNCLINE>259</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>lstm_layer.c</FILENAME>
      <LINE>387</LINE>
      <COLUMN>29</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>backward_lstm_layer</FUNCTION>
    <DECORATED>backward_lstm_layer</DECORATED>
    <FUNCLINE>259</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>lstm_layer.c</FILENAME>
      <LINE>388</LINE>
      <COLUMN>31</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>backward_lstm_layer</FUNCTION>
    <DECORATED>backward_lstm_layer</DECORATED>
    <FUNCLINE>259</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>lstm_layer.c</FILENAME>
      <LINE>389</LINE>
      <COLUMN>28</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>backward_lstm_layer</FUNCTION>
    <DECORATED>backward_lstm_layer</DECORATED>
    <FUNCLINE>259</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>maxpool_layer.c</FILENAME>
      <LINE>170</LINE>
      <COLUMN>25</COLUMN>
    </SFA>
    <DEFECTCODE>6011</DEFECTCODE>
    <DESCRIPTION>NULL 포인터 'l.input_layer'을(를) 역참조하고 있습니다. </DESCRIPTION>
    <FUNCTION>make_maxpool_layer</FUNCTION>
    <DECORATED>make_maxpool_layer</DECORATED>
    <FUNCLINE>72</FUNCLINE>
    <PROBABILITY>1</PROBABILITY>
    <RANK>4</RANK>
    <CATEGORY>
      <RULECATEGORY>mspft</RULECATEGORY>
    </CATEGORY>
    <PATH>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>maxpool_layer.c</FILENAME>
        <LINE>74</LINE>
        <COLUMN>18</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>maxpool_layer.c</FILENAME>
        <LINE>75</LINE>
        <COLUMN>14</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>maxpool_layer.c</FILENAME>
        <LINE>76</LINE>
        <COLUMN>8</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>maxpool_layer.c</FILENAME>
        <LINE>77</LINE>
        <COLUMN>16</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>maxpool_layer.c</FILENAME>
        <LINE>78</LINE>
        <COLUMN>12</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>maxpool_layer.c</FILENAME>
        <LINE>80</LINE>
        <COLUMN>14</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>maxpool_layer.c</FILENAME>
        <LINE>81</LINE>
        <COLUMN>14</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>maxpool_layer.c</FILENAME>
        <LINE>82</LINE>
        <COLUMN>19</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>maxpool_layer.c</FILENAME>
        <LINE>83</LINE>
        <COLUMN>8</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>maxpool_layer.c</FILENAME>
        <LINE>84</LINE>
        <COLUMN>17</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>maxpool_layer.c</FILENAME>
        <LINE>87</LINE>
        <COLUMN>12</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>maxpool_layer.c</FILENAME>
        <LINE>88</LINE>
        <COLUMN>8</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>maxpool_layer.c</FILENAME>
        <LINE>89</LINE>
        <COLUMN>8</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>maxpool_layer.c</FILENAME>
        <LINE>90</LINE>
        <COLUMN>8</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>maxpool_layer.c</FILENAME>
        <LINE>91</LINE>
        <COLUMN>10</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>maxpool_layer.c</FILENAME>
        <LINE>92</LINE>
        <COLUMN>20</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>maxpool_layer.c</FILENAME>
        <LINE>93</LINE>
        <COLUMN>19</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>maxpool_layer.c</FILENAME>
        <LINE>94</LINE>
        <COLUMN>8</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>maxpool_layer.c</FILENAME>
        <LINE>100</LINE>
        <COLUMN>16</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>maxpool_layer.c</FILENAME>
        <LINE>101</LINE>
        <COLUMN>16</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>maxpool_layer.c</FILENAME>
        <LINE>102</LINE>
        <COLUMN>16</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>maxpool_layer.c</FILENAME>
        <LINE>104</LINE>
        <COLUMN>14</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>maxpool_layer.c</FILENAME>
        <LINE>105</LINE>
        <COLUMN>13</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>maxpool_layer.c</FILENAME>
        <LINE>106</LINE>
        <COLUMN>11</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>maxpool_layer.c</FILENAME>
        <LINE>107</LINE>
        <COLUMN>13</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>maxpool_layer.c</FILENAME>
        <LINE>108</LINE>
        <COLUMN>15</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>maxpool_layer.c</FILENAME>
        <LINE>109</LINE>
        <COLUMN>15</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>maxpool_layer.c</FILENAME>
        <LINE>110</LINE>
        <COLUMN>8</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>maxpool_layer.c</FILENAME>
        <LINE>112</LINE>
        <COLUMN>8</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>maxpool_layer.c</FILENAME>
        <LINE>116</LINE>
        <COLUMN>13</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>maxpool_layer.c</FILENAME>
        <LINE>117</LINE>
        <COLUMN>8</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>maxpool_layer.c</FILENAME>
        <LINE>122</LINE>
        <COLUMN>18</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>maxpool_layer.c</FILENAME>
        <LINE>123</LINE>
        <COLUMN>19</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>maxpool_layer.c</FILENAME>
        <LINE>145</LINE>
        <COLUMN>10</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>maxpool_layer.c</FILENAME>
        <LINE>146</LINE>
        <COLUMN>8</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>maxpool_layer.c</FILENAME>
        <LINE>153</LINE>
        <COLUMN>12</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>maxpool_layer.c</FILENAME>
        <LINE>155</LINE>
        <COLUMN>26</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>maxpool_layer.c</FILENAME>
        <LINE>156</LINE>
        <COLUMN>19</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>maxpool_layer.c</FILENAME>
        <LINE>161</LINE>
        <COLUMN>9</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>maxpool_layer.c</FILENAME>
        <LINE>162</LINE>
        <COLUMN>14</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>maxpool_layer.c</FILENAME>
        <LINE>163</LINE>
        <COLUMN>22</COLUMN>
        <KEYEVENT>
          <ID>1</ID>
          <KIND>선언</KIND>
          <IMPORTANCE>Essential</IMPORTANCE>
          <MESSAGE>'l.input_layer'은(는) NULL일 수 있습니다.</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>maxpool_layer.c</FILENAME>
        <LINE>164</LINE>
        <COLUMN>12</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>maxpool_layer.c</FILENAME>
        <LINE>165</LINE>
        <COLUMN>12</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>maxpool_layer.c</FILENAME>
        <LINE>166</LINE>
        <COLUMN>27</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>maxpool_layer.c</FILENAME>
        <LINE>170</LINE>
        <COLUMN>25</COLUMN>
        <KEYEVENT>
          <ID>2</ID>
          <KIND>사용법</KIND>
          <IMPORTANCE>Essential</IMPORTANCE>
          <MESSAGE>'l.input_layer'이(가) 역참조되었지만 여전히 NULL일 수 있습니다.</MESSAGE>
        </KEYEVENT>
      </SFA>
    </PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>maxpool_layer.c</FILENAME>
      <LINE>145</LINE>
      <COLUMN>40</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_maxpool_layer</FUNCTION>
    <DECORATED>make_maxpool_layer</DECORATED>
    <FUNCLINE>72</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>maxpool_layer.c</FILENAME>
      <LINE>145</LINE>
      <COLUMN>31</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_maxpool_layer</FUNCTION>
    <DECORATED>make_maxpool_layer</DECORATED>
    <FUNCLINE>72</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>maxpool_layer.c</FILENAME>
      <LINE>145</LINE>
      <COLUMN>26</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_maxpool_layer</FUNCTION>
    <DECORATED>make_maxpool_layer</DECORATED>
    <FUNCLINE>72</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>maxpool_layer.c</FILENAME>
      <LINE>145</LINE>
      <COLUMN>19</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_maxpool_layer</FUNCTION>
    <DECORATED>make_maxpool_layer</DECORATED>
    <FUNCLINE>72</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>maxpool_layer.c</FILENAME>
      <LINE>249</LINE>
      <COLUMN>20</COLUMN>
    </SFA>
    <DEFECTCODE>6993</DEFECTCODE>
    <DESCRIPTION>코드 분석에서 OpenMP 구문이 무시되고 단일 스레드 코드를 분석합니다.</DESCRIPTION>
    <FUNCTION></FUNCTION>
    <DECORATED></DECORATED>
    <FUNCLINE>0</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>maxpool_layer.c</FILENAME>
      <LINE>325</LINE>
      <COLUMN>71</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>forward_maxpool_layer</FUNCTION>
    <DECORATED>forward_maxpool_layer</DECORATED>
    <FUNCLINE>243</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>network.c</FILENAME>
      <LINE>67</LINE>
      <COLUMN>42</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>get_current_batch</FUNCTION>
    <DECORATED>get_current_batch</DECORATED>
    <FUNCLINE>65</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>network.c</FILENAME>
      <LINE>171</LINE>
      <COLUMN>46</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '-' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '-' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>get_current_rate</FUNCTION>
    <DECORATED>get_current_rate</DECORATED>
    <FUNCLINE>131</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>network.c</FILENAME>
      <LINE>170</LINE>
      <COLUMN>39</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '-' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '-' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>get_current_rate</FUNCTION>
    <DECORATED>get_current_rate</DECORATED>
    <FUNCLINE>131</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>network.c</FILENAME>
      <LINE>159</LINE>
      <COLUMN>60</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>get_current_rate</FUNCTION>
    <DECORATED>get_current_rate</DECORATED>
    <FUNCLINE>131</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>network.c</FILENAME>
      <LINE>153</LINE>
      <COLUMN>45</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '-' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '-' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>get_current_rate</FUNCTION>
    <DECORATED>get_current_rate</DECORATED>
    <FUNCLINE>131</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>network.c</FILENAME>
      <LINE>385</LINE>
      <COLUMN>37</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>train_network_sgd</FUNCTION>
    <DECORATED>train_network_sgd</DECORATED>
    <FUNCLINE>382</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>network.c</FILENAME>
      <LINE>386</LINE>
      <COLUMN>37</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>train_network_sgd</FUNCTION>
    <DECORATED>train_network_sgd</DECORATED>
    <FUNCLINE>382</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>network.c</FILENAME>
      <LINE>411</LINE>
      <COLUMN>37</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>train_network_waitkey</FUNCTION>
    <DECORATED>train_network_waitkey</DECORATED>
    <FUNCLINE>406</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>network.c</FILENAME>
      <LINE>412</LINE>
      <COLUMN>37</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>train_network_waitkey</FUNCTION>
    <DECORATED>train_network_waitkey</DECORATED>
    <FUNCLINE>406</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>network.c</FILENAME>
      <LINE>834</LINE>
      <COLUMN>66</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '-' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '-' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_network_boxes</FUNCTION>
    <DECORATED>make_network_boxes</DECORATED>
    <FUNCLINE>813</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>network.c</FILENAME>
      <LINE>861</LINE>
      <COLUMN>21</COLUMN>
    </SFA>
    <DEFECTCODE>6011</DEFECTCODE>
    <DESCRIPTION>NULL 포인터 'dets'을(를) 역참조하고 있습니다. </DESCRIPTION>
    <FUNCTION>make_network_boxes_batch</FUNCTION>
    <DECORATED>make_network_boxes_batch</DECORATED>
    <FUNCLINE>844</FUNCLINE>
    <PROBABILITY>1</PROBABILITY>
    <RANK>4</RANK>
    <CATEGORY>
      <RULECATEGORY>mspft</RULECATEGORY>
    </CATEGORY>
    <PATH>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>network.c</FILENAME>
        <LINE>846</LINE>
        <COLUMN>8</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>network.c</FILENAME>
        <LINE>847</LINE>
        <COLUMN>10</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>network.c</FILENAME>
        <LINE>848</LINE>
        <COLUMN>11</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>network.c</FILENAME>
        <LINE>848</LINE>
        <COLUMN>18</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>network.c</FILENAME>
        <LINE>856</LINE>
        <COLUMN>8</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>network.c</FILENAME>
        <LINE>858</LINE>
        <COLUMN>9</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>network.c</FILENAME>
        <LINE>859</LINE>
        <COLUMN>15</COLUMN>
        <KEYEVENT>
          <ID>1</ID>
          <KIND>선언</KIND>
          <IMPORTANCE>Essential</IMPORTANCE>
          <MESSAGE>'dets'은(는) NULL일 수 있습니다.</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>network.c</FILENAME>
        <LINE>860</LINE>
        <COLUMN>11</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>network.c</FILENAME>
        <LINE>860</LINE>
        <COLUMN>18</COLUMN>
        <KEYEVENT>
          <ID>2</ID>
          <KIND>분기</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>이 루프 시작, ('i&lt;nboxes' 가정)</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>network.c</FILENAME>
        <LINE>861</LINE>
        <COLUMN>21</COLUMN>
        <KEYEVENT>
          <ID>3</ID>
          <KIND>사용법</KIND>
          <IMPORTANCE>Essential</IMPORTANCE>
          <MESSAGE>'dets'이(가) 역참조되었지만 여전히 NULL일 수 있습니다.</MESSAGE>
        </KEYEVENT>
      </SFA>
    </PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>network.c</FILENAME>
      <LINE>866</LINE>
      <COLUMN>66</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '-' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '-' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_network_boxes_batch</FUNCTION>
    <DECORATED>make_network_boxes_batch</DECORATED>
    <FUNCLINE>844</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>network.c</FILENAME>
      <LINE>878</LINE>
      <COLUMN>41</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>custom_get_region_detections</FUNCTION>
    <DECORATED>custom_get_region_detections</DECORATED>
    <FUNCLINE>876</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>network.c</FILENAME>
      <LINE>878</LINE>
      <COLUMN>35</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>custom_get_region_detections</FUNCTION>
    <DECORATED>custom_get_region_detections</DECORATED>
    <FUNCLINE>876</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>network.c</FILENAME>
      <LINE>879</LINE>
      <COLUMN>47</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>custom_get_region_detections</FUNCTION>
    <DECORATED>custom_get_region_detections</DECORATED>
    <FUNCLINE>876</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>network.c</FILENAME>
      <LINE>879</LINE>
      <COLUMN>41</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>custom_get_region_detections</FUNCTION>
    <DECORATED>custom_get_region_detections</DECORATED>
    <FUNCLINE>876</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>network.c</FILENAME>
      <LINE>921</LINE>
      <COLUMN>27</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>fill_network_boxes</FUNCTION>
    <DECORATED>fill_network_boxes</DECORATED>
    <FUNCLINE>899</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>network.c</FILENAME>
      <LINE>921</LINE>
      <COLUMN>23</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>fill_network_boxes</FUNCTION>
    <DECORATED>fill_network_boxes</DECORATED>
    <FUNCLINE>899</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>network.c</FILENAME>
      <LINE>925</LINE>
      <COLUMN>27</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>fill_network_boxes</FUNCTION>
    <DECORATED>fill_network_boxes</DECORATED>
    <FUNCLINE>899</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>network.c</FILENAME>
      <LINE>925</LINE>
      <COLUMN>23</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>fill_network_boxes</FUNCTION>
    <DECORATED>fill_network_boxes</DECORATED>
    <FUNCLINE>899</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>network.c</FILENAME>
      <LINE>948</LINE>
      <COLUMN>27</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>fill_network_boxes_batch</FUNCTION>
    <DECORATED>fill_network_boxes_batch</DECORATED>
    <FUNCLINE>930</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>network.c</FILENAME>
      <LINE>948</LINE>
      <COLUMN>23</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>fill_network_boxes_batch</FUNCTION>
    <DECORATED>fill_network_boxes_batch</DECORATED>
    <FUNCLINE>930</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>network.c</FILENAME>
      <LINE>952</LINE>
      <COLUMN>27</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>fill_network_boxes_batch</FUNCTION>
    <DECORATED>fill_network_boxes_batch</DECORATED>
    <FUNCLINE>930</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>network.c</FILENAME>
      <LINE>952</LINE>
      <COLUMN>23</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>fill_network_boxes_batch</FUNCTION>
    <DECORATED>fill_network_boxes_batch</DECORATED>
    <FUNCLINE>930</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>network.c</FILENAME>
      <LINE>968</LINE>
      <COLUMN>20</COLUMN>
    </SFA>
    <DEFECTCODE>6001</DEFECTCODE>
    <DESCRIPTION>초기화되지 않은 메모리 '*dets.prob'을(를) 사용하고 있습니다.</DESCRIPTION>
    <FUNCTION>free_detections</FUNCTION>
    <DECORATED>free_detections</DECORATED>
    <FUNCLINE>964</FUNCLINE>
    <PROBABILITY>1</PROBABILITY>
    <RANK>3</RANK>
    <CATEGORY>
      <RULECATEGORY>mspft</RULECATEGORY>
    </CATEGORY>
    <PATH>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>network.c</FILENAME>
        <LINE>966</LINE>
        <COLUMN>8</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>network.c</FILENAME>
        <LINE>967</LINE>
        <COLUMN>11</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>network.c</FILENAME>
        <LINE>967</LINE>
        <COLUMN>18</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>network.c</FILENAME>
        <LINE>968</LINE>
        <COLUMN>12</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>network.c</FILENAME>
        <LINE>969</LINE>
        <COLUMN>19</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>network.c</FILENAME>
        <LINE>970</LINE>
        <COLUMN>19</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>network.c</FILENAME>
        <LINE>971</LINE>
        <COLUMN>19</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>network.c</FILENAME>
        <LINE>967</LINE>
        <COLUMN>23</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>network.c</FILENAME>
        <LINE>967</LINE>
        <COLUMN>18</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>network.c</FILENAME>
        <LINE>968</LINE>
        <COLUMN>12</COLUMN>
        <KEYEVENT>
          <ID>1</ID>
          <KIND>선언</KIND>
          <IMPORTANCE>Essential</IMPORTANCE>
          <MESSAGE>'*dets.prob'이(가) 초기화되지 않았습니다.</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>network.c</FILENAME>
        <LINE>968</LINE>
        <COLUMN>20</COLUMN>
        <KEYEVENT>
          <ID>2</ID>
          <KIND>사용법</KIND>
          <IMPORTANCE>Essential</IMPORTANCE>
          <MESSAGE>'*dets.prob'이(가) 사용되는데 초기화되지 않았을 수 있습니다.</MESSAGE>
        </KEYEVENT>
      </SFA>
    </PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>network.c</FILENAME>
      <LINE>970</LINE>
      <COLUMN>38</COLUMN>
    </SFA>
    <DEFECTCODE>6001</DEFECTCODE>
    <DESCRIPTION>초기화되지 않은 메모리 '*dets.mask'을(를) 사용하고 있습니다.</DESCRIPTION>
    <FUNCTION>free_detections</FUNCTION>
    <DECORATED>free_detections</DECORATED>
    <FUNCLINE>964</FUNCLINE>
    <PROBABILITY>1</PROBABILITY>
    <RANK>3</RANK>
    <CATEGORY>
      <RULECATEGORY>mspft</RULECATEGORY>
    </CATEGORY>
    <PATH>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>network.c</FILENAME>
        <LINE>966</LINE>
        <COLUMN>8</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>network.c</FILENAME>
        <LINE>967</LINE>
        <COLUMN>11</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>network.c</FILENAME>
        <LINE>967</LINE>
        <COLUMN>18</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>network.c</FILENAME>
        <LINE>968</LINE>
        <COLUMN>12</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>network.c</FILENAME>
        <LINE>969</LINE>
        <COLUMN>19</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>network.c</FILENAME>
        <LINE>970</LINE>
        <COLUMN>19</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>network.c</FILENAME>
        <LINE>970</LINE>
        <COLUMN>30</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>network.c</FILENAME>
        <LINE>971</LINE>
        <COLUMN>19</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>network.c</FILENAME>
        <LINE>967</LINE>
        <COLUMN>23</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>network.c</FILENAME>
        <LINE>967</LINE>
        <COLUMN>18</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>network.c</FILENAME>
        <LINE>968</LINE>
        <COLUMN>12</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>network.c</FILENAME>
        <LINE>969</LINE>
        <COLUMN>19</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>network.c</FILENAME>
        <LINE>970</LINE>
        <COLUMN>19</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>network.c</FILENAME>
        <LINE>970</LINE>
        <COLUMN>30</COLUMN>
        <KEYEVENT>
          <ID>1</ID>
          <KIND>선언</KIND>
          <IMPORTANCE>Essential</IMPORTANCE>
          <MESSAGE>'*dets.mask'이(가) 초기화되지 않았습니다.</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>network.c</FILENAME>
        <LINE>970</LINE>
        <COLUMN>38</COLUMN>
        <KEYEVENT>
          <ID>2</ID>
          <KIND>사용법</KIND>
          <IMPORTANCE>Essential</IMPORTANCE>
          <MESSAGE>'*dets.mask'이(가) 사용되는데 초기화되지 않았을 수 있습니다.</MESSAGE>
        </KEYEVENT>
      </SFA>
    </PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>network.c</FILENAME>
      <LINE>969</LINE>
      <COLUMN>36</COLUMN>
    </SFA>
    <DEFECTCODE>6001</DEFECTCODE>
    <DESCRIPTION>초기화되지 않은 메모리 '*dets.uc'을(를) 사용하고 있습니다.</DESCRIPTION>
    <FUNCTION>free_detections</FUNCTION>
    <DECORATED>free_detections</DECORATED>
    <FUNCLINE>964</FUNCLINE>
    <PROBABILITY>1</PROBABILITY>
    <RANK>3</RANK>
    <CATEGORY>
      <RULECATEGORY>mspft</RULECATEGORY>
    </CATEGORY>
    <PATH>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>network.c</FILENAME>
        <LINE>966</LINE>
        <COLUMN>8</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>network.c</FILENAME>
        <LINE>967</LINE>
        <COLUMN>11</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>network.c</FILENAME>
        <LINE>967</LINE>
        <COLUMN>18</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>network.c</FILENAME>
        <LINE>968</LINE>
        <COLUMN>12</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>network.c</FILENAME>
        <LINE>969</LINE>
        <COLUMN>19</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>network.c</FILENAME>
        <LINE>969</LINE>
        <COLUMN>28</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>network.c</FILENAME>
        <LINE>970</LINE>
        <COLUMN>19</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>network.c</FILENAME>
        <LINE>971</LINE>
        <COLUMN>19</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>network.c</FILENAME>
        <LINE>967</LINE>
        <COLUMN>23</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>network.c</FILENAME>
        <LINE>967</LINE>
        <COLUMN>18</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>network.c</FILENAME>
        <LINE>968</LINE>
        <COLUMN>12</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>network.c</FILENAME>
        <LINE>969</LINE>
        <COLUMN>19</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>network.c</FILENAME>
        <LINE>969</LINE>
        <COLUMN>28</COLUMN>
        <KEYEVENT>
          <ID>1</ID>
          <KIND>선언</KIND>
          <IMPORTANCE>Essential</IMPORTANCE>
          <MESSAGE>'*dets.uc'이(가) 초기화되지 않았습니다.</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>network.c</FILENAME>
        <LINE>969</LINE>
        <COLUMN>36</COLUMN>
        <KEYEVENT>
          <ID>2</ID>
          <KIND>사용법</KIND>
          <IMPORTANCE>Essential</IMPORTANCE>
          <MESSAGE>'*dets.uc'이(가) 사용되는데 초기화되지 않았을 수 있습니다.</MESSAGE>
        </KEYEVENT>
      </SFA>
    </PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>network.c</FILENAME>
      <LINE>971</LINE>
      <COLUMN>44</COLUMN>
    </SFA>
    <DEFECTCODE>6001</DEFECTCODE>
    <DESCRIPTION>초기화되지 않은 메모리 '*dets.embeddings'을(를) 사용하고 있습니다.</DESCRIPTION>
    <FUNCTION>free_detections</FUNCTION>
    <DECORATED>free_detections</DECORATED>
    <FUNCLINE>964</FUNCLINE>
    <PROBABILITY>1</PROBABILITY>
    <RANK>3</RANK>
    <CATEGORY>
      <RULECATEGORY>mspft</RULECATEGORY>
    </CATEGORY>
    <PATH>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>network.c</FILENAME>
        <LINE>966</LINE>
        <COLUMN>8</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>network.c</FILENAME>
        <LINE>967</LINE>
        <COLUMN>11</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>network.c</FILENAME>
        <LINE>967</LINE>
        <COLUMN>18</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>network.c</FILENAME>
        <LINE>968</LINE>
        <COLUMN>12</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>network.c</FILENAME>
        <LINE>969</LINE>
        <COLUMN>19</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>network.c</FILENAME>
        <LINE>970</LINE>
        <COLUMN>19</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>network.c</FILENAME>
        <LINE>971</LINE>
        <COLUMN>19</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>network.c</FILENAME>
        <LINE>971</LINE>
        <COLUMN>36</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>network.c</FILENAME>
        <LINE>967</LINE>
        <COLUMN>23</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>network.c</FILENAME>
        <LINE>967</LINE>
        <COLUMN>18</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>network.c</FILENAME>
        <LINE>968</LINE>
        <COLUMN>12</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>network.c</FILENAME>
        <LINE>969</LINE>
        <COLUMN>19</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>network.c</FILENAME>
        <LINE>970</LINE>
        <COLUMN>19</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>network.c</FILENAME>
        <LINE>971</LINE>
        <COLUMN>19</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>network.c</FILENAME>
        <LINE>971</LINE>
        <COLUMN>36</COLUMN>
        <KEYEVENT>
          <ID>1</ID>
          <KIND>선언</KIND>
          <IMPORTANCE>Essential</IMPORTANCE>
          <MESSAGE>'*dets.embeddings'이(가) 초기화되지 않았습니다.</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>network.c</FILENAME>
        <LINE>971</LINE>
        <COLUMN>44</COLUMN>
        <KEYEVENT>
          <ID>2</ID>
          <KIND>사용법</KIND>
          <IMPORTANCE>Essential</IMPORTANCE>
          <MESSAGE>'*dets.embeddings'이(가) 사용되는데 초기화되지 않았을 수 있습니다.</MESSAGE>
        </KEYEVENT>
      </SFA>
    </PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>network.c</FILENAME>
      <LINE>1026</LINE>
      <COLUMN>42</COLUMN>
    </SFA>
    <DEFECTCODE>6308</DEFECTCODE>
    <DESCRIPTION>'realloc'는 null 포인터를 반환할 수 있습니다. 'realloc'에 인수로 전달되는 'send_buf'에 null 포인터를 할당하면 원래 메모리 블록에서 누수가 발생할 수 있습니다.</DESCRIPTION>
    <FUNCTION>detection_to_json</FUNCTION>
    <DECORATED>detection_to_json</DECORATED>
    <FUNCLINE>993</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>network.c</FILENAME>
      <LINE>1068</LINE>
      <COLUMN>25</COLUMN>
    </SFA>
    <DEFECTCODE>6011</DEFECTCODE>
    <DESCRIPTION>NULL 포인터 'pdets'을(를) 역참조하고 있습니다. </DESCRIPTION>
    <FUNCTION>network_predict_batch</FUNCTION>
    <DECORATED>network_predict_batch</DECORATED>
    <FUNCLINE>1059</FUNCLINE>
    <PROBABILITY>1</PROBABILITY>
    <RANK>4</RANK>
    <CATEGORY>
      <RULECATEGORY>mspft</RULECATEGORY>
    </CATEGORY>
    <PATH>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>network.c</FILENAME>
        <LINE>1061</LINE>
        <COLUMN>19</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>network.c</FILENAME>
        <LINE>1062</LINE>
        <COLUMN>18</COLUMN>
        <KEYEVENT>
          <ID>1</ID>
          <KIND>선언</KIND>
          <IMPORTANCE>Essential</IMPORTANCE>
          <MESSAGE>'pdets'은(는) NULL일 수 있습니다.</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>network.c</FILENAME>
        <LINE>1063</LINE>
        <COLUMN>8</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>network.c</FILENAME>
        <LINE>1064</LINE>
        <COLUMN>8</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>network.c</FILENAME>
        <LINE>1065</LINE>
        <COLUMN>13</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>network.c</FILENAME>
        <LINE>1065</LINE>
        <COLUMN>23</COLUMN>
        <KEYEVENT>
          <ID>2</ID>
          <KIND>분기</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>이 루프 시작, ('batch&lt;batch_size' 가정)</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>network.c</FILENAME>
        <LINE>1066</LINE>
        <COLUMN>19</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>network.c</FILENAME>
        <LINE>1067</LINE>
        <COLUMN>32</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>network.c</FILENAME>
        <LINE>1068</LINE>
        <COLUMN>25</COLUMN>
        <KEYEVENT>
          <ID>3</ID>
          <KIND>사용법</KIND>
          <IMPORTANCE>Essential</IMPORTANCE>
          <MESSAGE>'pdets'이(가) 역참조되었지만 여전히 NULL일 수 있습니다.</MESSAGE>
        </KEYEVENT>
      </SFA>
    </PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>network.c</FILENAME>
      <LINE>1100</LINE>
      <COLUMN>41</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>network_predict_data_multi</FUNCTION>
    <DECORATED>network_predict_data_multi</DECORATED>
    <FUNCLINE>1095</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>network.c</FILENAME>
      <LINE>1104</LINE>
      <COLUMN>22</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>network_predict_data_multi</FUNCTION>
    <DECORATED>network_predict_data_multi</DECORATED>
    <FUNCLINE>1095</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>network.c</FILENAME>
      <LINE>1125</LINE>
      <COLUMN>41</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>network_predict_data</FUNCTION>
    <DECORATED>network_predict_data</DECORATED>
    <FUNCLINE>1120</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>network.c</FILENAME>
      <LINE>1129</LINE>
      <COLUMN>22</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>network_predict_data</FUNCTION>
    <DECORATED>network_predict_data</DECORATED>
    <FUNCLINE>1120</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>normalization_layer.c</FILENAME>
      <LINE>19</LINE>
      <COLUMN>45</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_normalization_layer</FUNCTION>
    <DECORATED>make_normalization_layer</DECORATED>
    <FUNCLINE>6</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>normalization_layer.c</FILENAME>
      <LINE>19</LINE>
      <COLUMN>41</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_normalization_layer</FUNCTION>
    <DECORATED>make_normalization_layer</DECORATED>
    <FUNCLINE>6</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>normalization_layer.c</FILENAME>
      <LINE>19</LINE>
      <COLUMN>37</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_normalization_layer</FUNCTION>
    <DECORATED>make_normalization_layer</DECORATED>
    <FUNCLINE>6</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>normalization_layer.c</FILENAME>
      <LINE>20</LINE>
      <COLUMN>44</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_normalization_layer</FUNCTION>
    <DECORATED>make_normalization_layer</DECORATED>
    <FUNCLINE>6</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>normalization_layer.c</FILENAME>
      <LINE>20</LINE>
      <COLUMN>40</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_normalization_layer</FUNCTION>
    <DECORATED>make_normalization_layer</DECORATED>
    <FUNCLINE>6</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>normalization_layer.c</FILENAME>
      <LINE>20</LINE>
      <COLUMN>36</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_normalization_layer</FUNCTION>
    <DECORATED>make_normalization_layer</DECORATED>
    <FUNCLINE>6</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>normalization_layer.c</FILENAME>
      <LINE>21</LINE>
      <COLUMN>46</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_normalization_layer</FUNCTION>
    <DECORATED>make_normalization_layer</DECORATED>
    <FUNCLINE>6</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>normalization_layer.c</FILENAME>
      <LINE>21</LINE>
      <COLUMN>42</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_normalization_layer</FUNCTION>
    <DECORATED>make_normalization_layer</DECORATED>
    <FUNCLINE>6</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>normalization_layer.c</FILENAME>
      <LINE>21</LINE>
      <COLUMN>38</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_normalization_layer</FUNCTION>
    <DECORATED>make_normalization_layer</DECORATED>
    <FUNCLINE>6</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>normalization_layer.c</FILENAME>
      <LINE>22</LINE>
      <COLUMN>44</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_normalization_layer</FUNCTION>
    <DECORATED>make_normalization_layer</DECORATED>
    <FUNCLINE>6</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>normalization_layer.c</FILENAME>
      <LINE>22</LINE>
      <COLUMN>40</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_normalization_layer</FUNCTION>
    <DECORATED>make_normalization_layer</DECORATED>
    <FUNCLINE>6</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>normalization_layer.c</FILENAME>
      <LINE>22</LINE>
      <COLUMN>36</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_normalization_layer</FUNCTION>
    <DECORATED>make_normalization_layer</DECORATED>
    <FUNCLINE>6</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>normalization_layer.c</FILENAME>
      <LINE>50</LINE>
      <COLUMN>62</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>resize_normalization_layer</FUNCTION>
    <DECORATED>resize_normalization_layer</DECORATED>
    <FUNCLINE>40</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>normalization_layer.c</FILENAME>
      <LINE>50</LINE>
      <COLUMN>58</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>resize_normalization_layer</FUNCTION>
    <DECORATED>resize_normalization_layer</DECORATED>
    <FUNCLINE>40</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>normalization_layer.c</FILENAME>
      <LINE>50</LINE>
      <COLUMN>54</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>resize_normalization_layer</FUNCTION>
    <DECORATED>resize_normalization_layer</DECORATED>
    <FUNCLINE>40</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>normalization_layer.c</FILENAME>
      <LINE>51</LINE>
      <COLUMN>60</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>resize_normalization_layer</FUNCTION>
    <DECORATED>resize_normalization_layer</DECORATED>
    <FUNCLINE>40</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>normalization_layer.c</FILENAME>
      <LINE>51</LINE>
      <COLUMN>56</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>resize_normalization_layer</FUNCTION>
    <DECORATED>resize_normalization_layer</DECORATED>
    <FUNCLINE>40</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>normalization_layer.c</FILENAME>
      <LINE>51</LINE>
      <COLUMN>52</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>resize_normalization_layer</FUNCTION>
    <DECORATED>resize_normalization_layer</DECORATED>
    <FUNCLINE>40</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>normalization_layer.c</FILENAME>
      <LINE>52</LINE>
      <COLUMN>64</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>resize_normalization_layer</FUNCTION>
    <DECORATED>resize_normalization_layer</DECORATED>
    <FUNCLINE>40</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>normalization_layer.c</FILENAME>
      <LINE>52</LINE>
      <COLUMN>60</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>resize_normalization_layer</FUNCTION>
    <DECORATED>resize_normalization_layer</DECORATED>
    <FUNCLINE>40</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>normalization_layer.c</FILENAME>
      <LINE>52</LINE>
      <COLUMN>56</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>resize_normalization_layer</FUNCTION>
    <DECORATED>resize_normalization_layer</DECORATED>
    <FUNCLINE>40</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>normalization_layer.c</FILENAME>
      <LINE>53</LINE>
      <COLUMN>60</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>resize_normalization_layer</FUNCTION>
    <DECORATED>resize_normalization_layer</DECORATED>
    <FUNCLINE>40</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>normalization_layer.c</FILENAME>
      <LINE>53</LINE>
      <COLUMN>56</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>resize_normalization_layer</FUNCTION>
    <DECORATED>resize_normalization_layer</DECORATED>
    <FUNCLINE>40</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>normalization_layer.c</FILENAME>
      <LINE>53</LINE>
      <COLUMN>52</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>resize_normalization_layer</FUNCTION>
    <DECORATED>resize_normalization_layer</DECORATED>
    <FUNCLINE>40</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>normalization_layer.c</FILENAME>
      <LINE>75</LINE>
      <COLUMN>46</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>forward_normalization_layer</FUNCTION>
    <DECORATED>forward_normalization_layer</DECORATED>
    <FUNCLINE>66</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>normalization_layer.c</FILENAME>
      <LINE>75</LINE>
      <COLUMN>44</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>forward_normalization_layer</FUNCTION>
    <DECORATED>forward_normalization_layer</DECORATED>
    <FUNCLINE>66</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>normalization_layer.c</FILENAME>
      <LINE>75</LINE>
      <COLUMN>42</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>forward_normalization_layer</FUNCTION>
    <DECORATED>forward_normalization_layer</DECORATED>
    <FUNCLINE>66</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>normalization_layer.c</FILENAME>
      <LINE>76</LINE>
      <COLUMN>44</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>forward_normalization_layer</FUNCTION>
    <DECORATED>forward_normalization_layer</DECORATED>
    <FUNCLINE>66</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>normalization_layer.c</FILENAME>
      <LINE>76</LINE>
      <COLUMN>42</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>forward_normalization_layer</FUNCTION>
    <DECORATED>forward_normalization_layer</DECORATED>
    <FUNCLINE>66</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>normalization_layer.c</FILENAME>
      <LINE>76</LINE>
      <COLUMN>40</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>forward_normalization_layer</FUNCTION>
    <DECORATED>forward_normalization_layer</DECORATED>
    <FUNCLINE>66</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>normalization_layer.c</FILENAME>
      <LINE>77</LINE>
      <COLUMN>44</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>forward_normalization_layer</FUNCTION>
    <DECORATED>forward_normalization_layer</DECORATED>
    <FUNCLINE>66</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>normalization_layer.c</FILENAME>
      <LINE>77</LINE>
      <COLUMN>42</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>forward_normalization_layer</FUNCTION>
    <DECORATED>forward_normalization_layer</DECORATED>
    <FUNCLINE>66</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>normalization_layer.c</FILENAME>
      <LINE>77</LINE>
      <COLUMN>40</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>forward_normalization_layer</FUNCTION>
    <DECORATED>forward_normalization_layer</DECORATED>
    <FUNCLINE>66</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>normalization_layer.c</FILENAME>
      <LINE>82</LINE>
      <COLUMN>52</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>forward_normalization_layer</FUNCTION>
    <DECORATED>forward_normalization_layer</DECORATED>
    <FUNCLINE>66</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>normalization_layer.c</FILENAME>
      <LINE>82</LINE>
      <COLUMN>50</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>forward_normalization_layer</FUNCTION>
    <DECORATED>forward_normalization_layer</DECORATED>
    <FUNCLINE>66</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>normalization_layer.c</FILENAME>
      <LINE>86</LINE>
      <COLUMN>37</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>forward_normalization_layer</FUNCTION>
    <DECORATED>forward_normalization_layer</DECORATED>
    <FUNCLINE>66</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>normalization_layer.c</FILENAME>
      <LINE>86</LINE>
      <COLUMN>35</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>forward_normalization_layer</FUNCTION>
    <DECORATED>forward_normalization_layer</DECORATED>
    <FUNCLINE>66</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>normalization_layer.c</FILENAME>
      <LINE>86</LINE>
      <COLUMN>59</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>forward_normalization_layer</FUNCTION>
    <DECORATED>forward_normalization_layer</DECORATED>
    <FUNCLINE>66</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>normalization_layer.c</FILENAME>
      <LINE>86</LINE>
      <COLUMN>57</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>forward_normalization_layer</FUNCTION>
    <DECORATED>forward_normalization_layer</DECORATED>
    <FUNCLINE>66</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>normalization_layer.c</FILENAME>
      <LINE>89</LINE>
      <COLUMN>72</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>forward_normalization_layer</FUNCTION>
    <DECORATED>forward_normalization_layer</DECORATED>
    <FUNCLINE>66</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>normalization_layer.c</FILENAME>
      <LINE>89</LINE>
      <COLUMN>70</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>forward_normalization_layer</FUNCTION>
    <DECORATED>forward_normalization_layer</DECORATED>
    <FUNCLINE>66</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>normalization_layer.c</FILENAME>
      <LINE>89</LINE>
      <COLUMN>93</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>forward_normalization_layer</FUNCTION>
    <DECORATED>forward_normalization_layer</DECORATED>
    <FUNCLINE>66</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>normalization_layer.c</FILENAME>
      <LINE>89</LINE>
      <COLUMN>91</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>forward_normalization_layer</FUNCTION>
    <DECORATED>forward_normalization_layer</DECORATED>
    <FUNCLINE>66</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>normalization_layer.c</FILENAME>
      <LINE>90</LINE>
      <COLUMN>72</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>forward_normalization_layer</FUNCTION>
    <DECORATED>forward_normalization_layer</DECORATED>
    <FUNCLINE>66</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>normalization_layer.c</FILENAME>
      <LINE>90</LINE>
      <COLUMN>70</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>forward_normalization_layer</FUNCTION>
    <DECORATED>forward_normalization_layer</DECORATED>
    <FUNCLINE>66</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>normalization_layer.c</FILENAME>
      <LINE>90</LINE>
      <COLUMN>93</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>forward_normalization_layer</FUNCTION>
    <DECORATED>forward_normalization_layer</DECORATED>
    <FUNCLINE>66</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>normalization_layer.c</FILENAME>
      <LINE>90</LINE>
      <COLUMN>91</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>forward_normalization_layer</FUNCTION>
    <DECORATED>forward_normalization_layer</DECORATED>
    <FUNCLINE>66</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>option_list.c</FILENAME>
      <LINE>32</LINE>
      <COLUMN>10</COLUMN>
    </SFA>
    <DEFECTCODE>6387</DEFECTCODE>
    <DESCRIPTION>'file'이(가) '0'일 수 있습니다.  이 경우 'fclose' 함수의 사양과 일치하지 않습니다. </DESCRIPTION>
    <FUNCTION>read_data_cfg</FUNCTION>
    <DECORATED>read_data_cfg</DECORATED>
    <FUNCLINE>8</FUNCLINE>
    <PROBABILITY>1</PROBABILITY>
    <RANK>4</RANK>
    <CATEGORY>
      <RULECATEGORY>mspft</RULECATEGORY>
    </CATEGORY>
    <PATH>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>option_list.c</FILENAME>
        <LINE>10</LINE>
        <COLUMN>10</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>option_list.c</FILENAME>
        <LINE>11</LINE>
        <COLUMN>12</COLUMN>
        <KEYEVENT>
          <ID>1</ID>
          <KIND>분기</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>'file'은(는) NULL일 수 있습니다. (이 분기 시작)</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>option_list.c</FILENAME>
        <LINE>11</LINE>
        <COLUMN>28</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>option_list.c</FILENAME>
        <LINE>12</LINE>
        <COLUMN>10</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>option_list.c</FILENAME>
        <LINE>13</LINE>
        <COLUMN>8</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>option_list.c</FILENAME>
        <LINE>14</LINE>
        <COLUMN>10</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>option_list.c</FILENAME>
        <LINE>15</LINE>
        <COLUMN>29</COLUMN>
        <KEYEVENT>
          <ID>2</ID>
          <KIND>선언</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>'file'은(는) 'fgetl'(d:\yolo_v4\darknet\src\utils.h:47에서 선언됨)에 대한 In/Out 인수입니다.</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>option_list.c</FILENAME>
        <LINE>15</LINE>
        <COLUMN>29</COLUMN>
        <KEYEVENT>
          <ID>3</ID>
          <KIND>분기</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>이 루프 건너뛰기, ('((line=fgetl(file)))!=0'이(가) false라고 가정)</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>option_list.c</FILENAME>
        <LINE>32</LINE>
        <COLUMN>10</COLUMN>
        <KEYEVENT>
          <ID>4</ID>
          <KIND>사용법</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>'file'은(는) 'fclose'(c:\program files (x86)\windows kits\10\include\10.0.19041.0\ucrt\stdio.h:152에서 선언됨)에 대한 입력입니다.</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>option_list.c</FILENAME>
        <LINE>32</LINE>
        <COLUMN>10</COLUMN>
        <KEYEVENT>
          <ID>5</ID>
          <KIND>사용법</KIND>
          <IMPORTANCE>Essential</IMPORTANCE>
          <MESSAGE>'file'은(는) NULL(이)면 안 됩니다. 이는 'fclose'의 SAL 주석과 일치하지 않습니다.</MESSAGE>
        </KEYEVENT>
      </SFA>
    </PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>parser.c</FILENAME>
      <LINE>124</LINE>
      <COLUMN>14</COLUMN>
    </SFA>
    <DEFECTCODE>6031</DEFECTCODE>
    <DESCRIPTION>반환 값이 무시되었습니다. 'sscanf'.</DESCRIPTION>
    <FUNCTION>parse_data</FUNCTION>
    <DECORATED>parse_data</DECORATED>
    <FUNCLINE>113</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>parser.c</FILENAME>
      <LINE>380</LINE>
      <COLUMN>15</COLUMN>
    </SFA>
    <DEFECTCODE>6031</DEFECTCODE>
    <DESCRIPTION>반환 값이 무시되었습니다. 'getchar'.</DESCRIPTION>
    <FUNCTION>parse_contrastive</FUNCTION>
    <DECORATED>parse_contrastive</DECORATED>
    <FUNCLINE>371</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>parser.c</FILENAME>
      <LINE>378</LINE>
      <COLUMN>25</COLUMN>
    </SFA>
    <DEFECTCODE>6011</DEFECTCODE>
    <DESCRIPTION>NULL 포인터 'yolo_layer'을(를) 역참조하고 있습니다. </DESCRIPTION>
    <FUNCTION>parse_contrastive</FUNCTION>
    <DECORATED>parse_contrastive</DECORATED>
    <FUNCLINE>371</FUNCLINE>
    <PROBABILITY>1</PROBABILITY>
    <RANK>4</RANK>
    <CATEGORY>
      <RULECATEGORY>mspft</RULECATEGORY>
    </CATEGORY>
    <PATH>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>373</LINE>
        <COLUMN>8</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>374</LINE>
        <COLUMN>11</COLUMN>
        <KEYEVENT>
          <ID>1</ID>
          <KIND>선언</KIND>
          <IMPORTANCE>Essential</IMPORTANCE>
          <MESSAGE>'yolo_layer'이(가) NULL입니다.</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>375</LINE>
        <COLUMN>8</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>376</LINE>
        <COLUMN>22</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>377</LINE>
        <COLUMN>21</COLUMN>
        <KEYEVENT>
          <ID>2</ID>
          <KIND>분기</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>이 분기 건너뛰기, ('yolo_layer_id!=0'이(가) false라고 가정)</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>378</LINE>
        <COLUMN>25</COLUMN>
        <KEYEVENT>
          <ID>3</ID>
          <KIND>사용법</KIND>
          <IMPORTANCE>Essential</IMPORTANCE>
          <MESSAGE>'yolo_layer'이(가) 역참조되었지만 여전히 NULL일 수 있습니다.</MESSAGE>
        </KEYEVENT>
      </SFA>
    </PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>parser.c</FILENAME>
      <LINE>433</LINE>
      <COLUMN>35</COLUMN>
    </SFA>
    <DEFECTCODE>6011</DEFECTCODE>
    <DESCRIPTION>NULL 포인터 'classes_multipliers'을(를) 역참조하고 있습니다. </DESCRIPTION>
    <FUNCTION>get_classes_multipliers</FUNCTION>
    <DECORATED>get_classes_multipliers</DECORATED>
    <FUNCLINE>415</FUNCLINE>
    <PROBABILITY>1</PROBABILITY>
    <RANK>4</RANK>
    <CATEGORY>
      <RULECATEGORY>mspft</RULECATEGORY>
    </CATEGORY>
    <PATH>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>417</LINE>
        <COLUMN>11</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>418</LINE>
        <COLUMN>8</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>419</LINE>
        <COLUMN>12</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>420</LINE>
        <COLUMN>13</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>421</LINE>
        <COLUMN>29</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>425</LINE>
        <COLUMN>14</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>426</LINE>
        <COLUMN>12</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>427</LINE>
        <COLUMN>15</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>427</LINE>
        <COLUMN>22</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>428</LINE>
        <COLUMN>38</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>429</LINE>
        <COLUMN>28</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>429</LINE>
        <COLUMN>65</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>427</LINE>
        <COLUMN>42</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>427</LINE>
        <COLUMN>22</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>431</LINE>
        <COLUMN>28</COLUMN>
        <KEYEVENT>
          <ID>1</ID>
          <KIND>선언</KIND>
          <IMPORTANCE>Essential</IMPORTANCE>
          <MESSAGE>'classes_multipliers'은(는) NULL일 수 있습니다.</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>432</LINE>
        <COLUMN>15</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>432</LINE>
        <COLUMN>22</COLUMN>
        <KEYEVENT>
          <ID>2</ID>
          <KIND>분기</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>이 루프 시작, ('i&lt;classes_counters' 가정)</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>433</LINE>
        <COLUMN>35</COLUMN>
        <KEYEVENT>
          <ID>3</ID>
          <KIND>사용법</KIND>
          <IMPORTANCE>Essential</IMPORTANCE>
          <MESSAGE>'classes_multipliers'이(가) 역참조되었지만 여전히 NULL일 수 있습니다.</MESSAGE>
        </KEYEVENT>
      </SFA>
    </PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>parser.c</FILENAME>
      <LINE>528</LINE>
      <COLUMN>19</COLUMN>
    </SFA>
    <DEFECTCODE>6031</DEFECTCODE>
    <DESCRIPTION>반환 값이 무시되었습니다. 'getchar'.</DESCRIPTION>
    <FUNCTION>parse_yolo</FUNCTION>
    <DECORATED>parse_yolo</DECORATED>
    <FUNCLINE>444</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>parser.c</FILENAME>
      <LINE>523</LINE>
      <COLUMN>54</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>parse_yolo</FUNCTION>
    <DECORATED>parse_yolo</DECORATED>
    <FUNCLINE>444</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>parser.c</FILENAME>
      <LINE>568</LINE>
      <COLUMN>20</COLUMN>
    </SFA>
    <DEFECTCODE>6011</DEFECTCODE>
    <DESCRIPTION>NULL 포인터 'mask'을(를) 역참조하고 있습니다. </DESCRIPTION>
    <FUNCTION>parse_gaussian_yolo_mask</FUNCTION>
    <DECORATED>parse_gaussian_yolo_mask</DECORATED>
    <FUNCLINE>554</FUNCLINE>
    <PROBABILITY>1</PROBABILITY>
    <RANK>4</RANK>
    <CATEGORY>
      <RULECATEGORY>mspft</RULECATEGORY>
    </CATEGORY>
    <PATH>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>556</LINE>
        <COLUMN>9</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>557</LINE>
        <COLUMN>8</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>558</LINE>
        <COLUMN>12</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>559</LINE>
        <COLUMN>12</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>560</LINE>
        <COLUMN>12</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>561</LINE>
        <COLUMN>15</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>561</LINE>
        <COLUMN>22</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>565</LINE>
        <COLUMN>13</COLUMN>
        <KEYEVENT>
          <ID>1</ID>
          <KIND>선언</KIND>
          <IMPORTANCE>Essential</IMPORTANCE>
          <MESSAGE>'mask'은(는) NULL일 수 있습니다.</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>566</LINE>
        <COLUMN>15</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>566</LINE>
        <COLUMN>22</COLUMN>
        <KEYEVENT>
          <ID>2</ID>
          <KIND>분기</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>이 루프 시작, ('i&lt;n' 가정)</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>567</LINE>
        <COLUMN>16</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>568</LINE>
        <COLUMN>20</COLUMN>
        <KEYEVENT>
          <ID>3</ID>
          <KIND>사용법</KIND>
          <IMPORTANCE>Essential</IMPORTANCE>
          <MESSAGE>'mask'이(가) 역참조되었지만 여전히 NULL일 수 있습니다.</MESSAGE>
        </KEYEVENT>
      </SFA>
    </PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>parser.c</FILENAME>
      <LINE>932</LINE>
      <COLUMN>15</COLUMN>
    </SFA>
    <DEFECTCODE>6031</DEFECTCODE>
    <DESCRIPTION>반환 값이 무시되었습니다. 'getchar'.</DESCRIPTION>
    <FUNCTION>parse_shortcut</FUNCTION>
    <DECORATED>parse_shortcut</DECORATED>
    <FUNCLINE>921</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>parser.c</FILENAME>
      <LINE>942</LINE>
      <COLUMN>15</COLUMN>
    </SFA>
    <DEFECTCODE>6031</DEFECTCODE>
    <DESCRIPTION>반환 값이 무시되었습니다. 'getchar'.</DESCRIPTION>
    <FUNCTION>parse_shortcut</FUNCTION>
    <DECORATED>parse_shortcut</DECORATED>
    <FUNCLINE>921</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>parser.c</FILENAME>
      <LINE>967</LINE>
      <COLUMN>17</COLUMN>
    </SFA>
    <DEFECTCODE>6011</DEFECTCODE>
    <DESCRIPTION>NULL 포인터 'sizes'을(를) 역참조하고 있습니다. </DESCRIPTION>
    <FUNCTION>parse_shortcut</FUNCTION>
    <DECORATED>parse_shortcut</DECORATED>
    <FUNCLINE>921</FUNCLINE>
    <PROBABILITY>1</PROBABILITY>
    <RANK>4</RANK>
    <CATEGORY>
      <RULECATEGORY>mspft</RULECATEGORY>
    </CATEGORY>
    <PATH>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>923</LINE>
        <COLUMN>10</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>924</LINE>
        <COLUMN>15</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>926</LINE>
        <COLUMN>10</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>927</LINE>
        <COLUMN>19</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>928</LINE>
        <COLUMN>52</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>929</LINE>
        <COLUMN>53</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>930</LINE>
        <COLUMN>46</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>936</LINE>
        <COLUMN>10</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>937</LINE>
        <COLUMN>28</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>938</LINE>
        <COLUMN>55</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>939</LINE>
        <COLUMN>58</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>940</LINE>
        <COLUMN>46</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>946</LINE>
        <COLUMN>10</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>947</LINE>
        <COLUMN>8</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>948</LINE>
        <COLUMN>8</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>949</LINE>
        <COLUMN>8</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>950</LINE>
        <COLUMN>8</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>951</LINE>
        <COLUMN>11</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>951</LINE>
        <COLUMN>18</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>955</LINE>
        <COLUMN>9</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>956</LINE>
        <COLUMN>9</COLUMN>
        <KEYEVENT>
          <ID>1</ID>
          <KIND>선언</KIND>
          <IMPORTANCE>Essential</IMPORTANCE>
          <MESSAGE>'sizes'은(는) NULL일 수 있습니다.</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>957</LINE>
        <COLUMN>12</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>958</LINE>
        <COLUMN>12</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>959</LINE>
        <COLUMN>12</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>960</LINE>
        <COLUMN>12</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>962</LINE>
        <COLUMN>11</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>962</LINE>
        <COLUMN>18</COLUMN>
        <KEYEVENT>
          <ID>2</ID>
          <KIND>분기</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>이 루프 시작, ('i&lt;n' 가정)</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>963</LINE>
        <COLUMN>12</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>964</LINE>
        <COLUMN>10</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>965</LINE>
        <COLUMN>18</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>966</LINE>
        <COLUMN>18</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>967</LINE>
        <COLUMN>17</COLUMN>
        <KEYEVENT>
          <ID>3</ID>
          <KIND>사용법</KIND>
          <IMPORTANCE>Essential</IMPORTANCE>
          <MESSAGE>'sizes'이(가) 역참조되었지만 여전히 NULL일 수 있습니다.</MESSAGE>
        </KEYEVENT>
      </SFA>
    </PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>parser.c</FILENAME>
      <LINE>969</LINE>
      <COLUMN>24</COLUMN>
    </SFA>
    <DEFECTCODE>6011</DEFECTCODE>
    <DESCRIPTION>NULL 포인터 'layers_delta'을(를) 역참조하고 있습니다. </DESCRIPTION>
    <FUNCTION>parse_shortcut</FUNCTION>
    <DECORATED>parse_shortcut</DECORATED>
    <FUNCLINE>921</FUNCLINE>
    <PROBABILITY>1</PROBABILITY>
    <RANK>4</RANK>
    <CATEGORY>
      <RULECATEGORY>mspft</RULECATEGORY>
    </CATEGORY>
    <PATH>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>923</LINE>
        <COLUMN>10</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>924</LINE>
        <COLUMN>15</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>926</LINE>
        <COLUMN>10</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>927</LINE>
        <COLUMN>19</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>928</LINE>
        <COLUMN>52</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>929</LINE>
        <COLUMN>53</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>930</LINE>
        <COLUMN>46</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>936</LINE>
        <COLUMN>10</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>937</LINE>
        <COLUMN>28</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>938</LINE>
        <COLUMN>55</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>939</LINE>
        <COLUMN>58</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>940</LINE>
        <COLUMN>46</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>946</LINE>
        <COLUMN>10</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>947</LINE>
        <COLUMN>8</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>948</LINE>
        <COLUMN>8</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>949</LINE>
        <COLUMN>8</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>950</LINE>
        <COLUMN>8</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>951</LINE>
        <COLUMN>11</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>951</LINE>
        <COLUMN>18</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>955</LINE>
        <COLUMN>9</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>956</LINE>
        <COLUMN>9</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>957</LINE>
        <COLUMN>12</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>958</LINE>
        <COLUMN>12</COLUMN>
        <KEYEVENT>
          <ID>1</ID>
          <KIND>선언</KIND>
          <IMPORTANCE>Essential</IMPORTANCE>
          <MESSAGE>'layers_delta'은(는) NULL일 수 있습니다.</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>959</LINE>
        <COLUMN>12</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>960</LINE>
        <COLUMN>12</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>962</LINE>
        <COLUMN>11</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>962</LINE>
        <COLUMN>18</COLUMN>
        <KEYEVENT>
          <ID>2</ID>
          <KIND>분기</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>이 루프 시작, ('i&lt;n' 가정)</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>963</LINE>
        <COLUMN>12</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>964</LINE>
        <COLUMN>10</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>965</LINE>
        <COLUMN>18</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>966</LINE>
        <COLUMN>18</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>967</LINE>
        <COLUMN>17</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>968</LINE>
        <COLUMN>25</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>969</LINE>
        <COLUMN>24</COLUMN>
        <KEYEVENT>
          <ID>3</ID>
          <KIND>사용법</KIND>
          <IMPORTANCE>Essential</IMPORTANCE>
          <MESSAGE>'layers_delta'이(가) 역참조되었지만 여전히 NULL일 수 있습니다.</MESSAGE>
        </KEYEVENT>
      </SFA>
    </PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>parser.c</FILENAME>
      <LINE>968</LINE>
      <COLUMN>25</COLUMN>
    </SFA>
    <DEFECTCODE>6011</DEFECTCODE>
    <DESCRIPTION>NULL 포인터 'layers_output'을(를) 역참조하고 있습니다. </DESCRIPTION>
    <FUNCTION>parse_shortcut</FUNCTION>
    <DECORATED>parse_shortcut</DECORATED>
    <FUNCLINE>921</FUNCLINE>
    <PROBABILITY>1</PROBABILITY>
    <RANK>4</RANK>
    <CATEGORY>
      <RULECATEGORY>mspft</RULECATEGORY>
    </CATEGORY>
    <PATH>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>923</LINE>
        <COLUMN>10</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>924</LINE>
        <COLUMN>15</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>926</LINE>
        <COLUMN>10</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>927</LINE>
        <COLUMN>19</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>928</LINE>
        <COLUMN>52</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>929</LINE>
        <COLUMN>53</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>930</LINE>
        <COLUMN>46</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>936</LINE>
        <COLUMN>10</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>937</LINE>
        <COLUMN>28</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>938</LINE>
        <COLUMN>55</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>939</LINE>
        <COLUMN>58</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>940</LINE>
        <COLUMN>46</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>946</LINE>
        <COLUMN>10</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>947</LINE>
        <COLUMN>8</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>948</LINE>
        <COLUMN>8</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>949</LINE>
        <COLUMN>8</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>950</LINE>
        <COLUMN>8</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>951</LINE>
        <COLUMN>11</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>951</LINE>
        <COLUMN>18</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>955</LINE>
        <COLUMN>9</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>956</LINE>
        <COLUMN>9</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>957</LINE>
        <COLUMN>12</COLUMN>
        <KEYEVENT>
          <ID>1</ID>
          <KIND>선언</KIND>
          <IMPORTANCE>Essential</IMPORTANCE>
          <MESSAGE>'layers_output'은(는) NULL일 수 있습니다.</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>958</LINE>
        <COLUMN>12</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>959</LINE>
        <COLUMN>12</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>960</LINE>
        <COLUMN>12</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>962</LINE>
        <COLUMN>11</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>962</LINE>
        <COLUMN>18</COLUMN>
        <KEYEVENT>
          <ID>2</ID>
          <KIND>분기</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>이 루프 시작, ('i&lt;n' 가정)</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>963</LINE>
        <COLUMN>12</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>964</LINE>
        <COLUMN>10</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>965</LINE>
        <COLUMN>18</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>966</LINE>
        <COLUMN>18</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>967</LINE>
        <COLUMN>17</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>968</LINE>
        <COLUMN>25</COLUMN>
        <KEYEVENT>
          <ID>3</ID>
          <KIND>사용법</KIND>
          <IMPORTANCE>Essential</IMPORTANCE>
          <MESSAGE>'layers_output'이(가) 역참조되었지만 여전히 NULL일 수 있습니다.</MESSAGE>
        </KEYEVENT>
      </SFA>
    </PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>parser.c</FILENAME>
      <LINE>1074</LINE>
      <COLUMN>17</COLUMN>
    </SFA>
    <DEFECTCODE>6011</DEFECTCODE>
    <DESCRIPTION>NULL 포인터 'l'을(를) 역참조하고 있습니다. 이 오류가 발생할 수 있는 이전 위치는 줄 1070을(를) 참조하십시오.</DESCRIPTION>
    <FUNCTION>parse_route</FUNCTION>
    <DECORATED>parse_route</DECORATED>
    <FUNCLINE>1066</FUNCLINE>
    <PROBABILITY>1</PROBABILITY>
    <RANK>4</RANK>
    <CATEGORY>
      <RULECATEGORY>mspft</RULECATEGORY>
    </CATEGORY>
    <PATH>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>1068</LINE>
        <COLUMN>10</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>1069</LINE>
        <COLUMN>7</COLUMN>
        <KEYEVENT>
          <ID>1</ID>
          <KIND>분기</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>'l'은(는) NULL일 수 있습니다. (이 분기 시작)</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>1069</LINE>
        <COLUMN>16</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>1070</LINE>
        <COLUMN>8</COLUMN>
        <KEYEVENT>
          <ID>2</ID>
          <KIND>사용법</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>'l'은(는) 'strlen'(&lt;no file&gt;:0에서 선언됨)에 대한 입력입니다.</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>1071</LINE>
        <COLUMN>8</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>1072</LINE>
        <COLUMN>8</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>1073</LINE>
        <COLUMN>10</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>1073</LINE>
        <COLUMN>17</COLUMN>
        <KEYEVENT>
          <ID>3</ID>
          <KIND>분기</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>이 루프 시작, ('i&lt;len' 가정)</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>1074</LINE>
        <COLUMN>17</COLUMN>
        <KEYEVENT>
          <ID>4</ID>
          <KIND>분기</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>이 분기 건너뛰기, ('l[i]==44'이(가) false라고 가정)</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>1074</LINE>
        <COLUMN>17</COLUMN>
        <KEYEVENT>
          <ID>5</ID>
          <KIND>사용법</KIND>
          <IMPORTANCE>Essential</IMPORTANCE>
          <MESSAGE>'l'이(가) 역참조되었지만 여전히 NULL일 수 있습니다.</MESSAGE>
        </KEYEVENT>
      </SFA>
    </PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>parser.c</FILENAME>
      <LINE>1070</LINE>
      <COLUMN>8</COLUMN>
    </SFA>
    <DEFECTCODE>6387</DEFECTCODE>
    <DESCRIPTION>'l'이(가) '0'일 수 있습니다.  이 경우 'strlen' 함수의 사양과 일치하지 않습니다. </DESCRIPTION>
    <FUNCTION>parse_route</FUNCTION>
    <DECORATED>parse_route</DECORATED>
    <FUNCLINE>1066</FUNCLINE>
    <PROBABILITY>1</PROBABILITY>
    <RANK>4</RANK>
    <CATEGORY>
      <RULECATEGORY>mspft</RULECATEGORY>
    </CATEGORY>
    <PATH>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>1068</LINE>
        <COLUMN>10</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>1069</LINE>
        <COLUMN>7</COLUMN>
        <KEYEVENT>
          <ID>1</ID>
          <KIND>분기</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>'l'은(는) NULL일 수 있습니다. (이 분기 시작)</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>1069</LINE>
        <COLUMN>16</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>1070</LINE>
        <COLUMN>8</COLUMN>
        <KEYEVENT>
          <ID>2</ID>
          <KIND>사용법</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>'l'은(는) 'strlen'(&lt;no file&gt;:0에서 선언됨)에 대한 입력입니다.</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>1070</LINE>
        <COLUMN>8</COLUMN>
        <KEYEVENT>
          <ID>3</ID>
          <KIND>사용법</KIND>
          <IMPORTANCE>Essential</IMPORTANCE>
          <MESSAGE>'l'은(는) NULL(이)면 안 됩니다. 이는 'strlen'의 SAL 주석과 일치하지 않습니다.</MESSAGE>
        </KEYEVENT>
      </SFA>
    </PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>parser.c</FILENAME>
      <LINE>1080</LINE>
      <COLUMN>12</COLUMN>
    </SFA>
    <DEFECTCODE>6387</DEFECTCODE>
    <DESCRIPTION>'l'이(가) '0'일 수 있습니다.  이 경우 'atoi' 함수의 사양과 일치하지 않습니다. 이 오류가 발생할 수 있는 이전 위치는 줄 1070을(를) 참조하십시오.</DESCRIPTION>
    <FUNCTION>parse_route</FUNCTION>
    <DECORATED>parse_route</DECORATED>
    <FUNCLINE>1066</FUNCLINE>
    <PROBABILITY>1</PROBABILITY>
    <RANK>4</RANK>
    <CATEGORY>
      <RULECATEGORY>mspft</RULECATEGORY>
    </CATEGORY>
    <PATH>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>1068</LINE>
        <COLUMN>10</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>1069</LINE>
        <COLUMN>7</COLUMN>
        <KEYEVENT>
          <ID>1</ID>
          <KIND>분기</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>'l'은(는) NULL일 수 있습니다. (이 분기 시작)</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>1069</LINE>
        <COLUMN>16</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>1070</LINE>
        <COLUMN>8</COLUMN>
        <KEYEVENT>
          <ID>2</ID>
          <KIND>사용법</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>'l'은(는) 'strlen'(&lt;no file&gt;:0에서 선언됨)에 대한 입력입니다.</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>1071</LINE>
        <COLUMN>8</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>1072</LINE>
        <COLUMN>8</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>1073</LINE>
        <COLUMN>10</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>1073</LINE>
        <COLUMN>17</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>1077</LINE>
        <COLUMN>9</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>1078</LINE>
        <COLUMN>9</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>1079</LINE>
        <COLUMN>10</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>1079</LINE>
        <COLUMN>17</COLUMN>
        <KEYEVENT>
          <ID>3</ID>
          <KIND>분기</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>이 루프 시작, ('i&lt;n' 가정)</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>1080</LINE>
        <COLUMN>12</COLUMN>
        <KEYEVENT>
          <ID>4</ID>
          <KIND>사용법</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>'l'은(는) 'atoi'(c:\program files (x86)\windows kits\10\include\10.0.19041.0\ucrt\stdlib.h:451에서 선언됨)에 대한 입력입니다.</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>1080</LINE>
        <COLUMN>12</COLUMN>
        <KEYEVENT>
          <ID>5</ID>
          <KIND>사용법</KIND>
          <IMPORTANCE>Essential</IMPORTANCE>
          <MESSAGE>'l'은(는) NULL(이)면 안 됩니다. 이는 'atoi'의 SAL 주석과 일치하지 않습니다.</MESSAGE>
        </KEYEVENT>
      </SFA>
    </PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>parser.c</FILENAME>
      <LINE>1081</LINE>
      <COLUMN>10</COLUMN>
    </SFA>
    <DEFECTCODE>6387</DEFECTCODE>
    <DESCRIPTION>'l'이(가) '0'일 수 있습니다.  이 경우 'strchr' 함수의 사양과 일치하지 않습니다. 이 오류가 발생할 수 있는 이전 위치는 줄 1070을(를) 참조하십시오.</DESCRIPTION>
    <FUNCTION>parse_route</FUNCTION>
    <DECORATED>parse_route</DECORATED>
    <FUNCLINE>1066</FUNCLINE>
    <PROBABILITY>1</PROBABILITY>
    <RANK>4</RANK>
    <CATEGORY>
      <RULECATEGORY>mspft</RULECATEGORY>
    </CATEGORY>
    <PATH>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>1068</LINE>
        <COLUMN>10</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>1069</LINE>
        <COLUMN>7</COLUMN>
        <KEYEVENT>
          <ID>1</ID>
          <KIND>분기</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>'l'은(는) NULL일 수 있습니다. (이 분기 시작)</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>1069</LINE>
        <COLUMN>16</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>1070</LINE>
        <COLUMN>8</COLUMN>
        <KEYEVENT>
          <ID>2</ID>
          <KIND>사용법</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>'l'은(는) 'strlen'(&lt;no file&gt;:0에서 선언됨)에 대한 입력입니다.</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>1071</LINE>
        <COLUMN>8</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>1072</LINE>
        <COLUMN>8</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>1073</LINE>
        <COLUMN>10</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>1073</LINE>
        <COLUMN>17</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>1077</LINE>
        <COLUMN>9</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>1078</LINE>
        <COLUMN>9</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>1079</LINE>
        <COLUMN>10</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>1079</LINE>
        <COLUMN>17</COLUMN>
        <KEYEVENT>
          <ID>3</ID>
          <KIND>분기</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>이 루프 시작, ('i&lt;n' 가정)</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>1080</LINE>
        <COLUMN>12</COLUMN>
        <KEYEVENT>
          <ID>4</ID>
          <KIND>사용법</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>'l'은(는) 'atoi'(c:\program files (x86)\windows kits\10\include\10.0.19041.0\ucrt\stdlib.h:451에서 선언됨)에 대한 입력입니다.</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>1081</LINE>
        <COLUMN>10</COLUMN>
        <KEYEVENT>
          <ID>5</ID>
          <KIND>사용법</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>'l'은(는) 'strchr'(c:\program files (x86)\microsoft visual studio\2019\community\vc\tools\msvc\14.28.29910\include\vcruntime_string.h:70에서 선언됨)에 대한 입력입니다.</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>1081</LINE>
        <COLUMN>10</COLUMN>
        <KEYEVENT>
          <ID>6</ID>
          <KIND>사용법</KIND>
          <IMPORTANCE>Essential</IMPORTANCE>
          <MESSAGE>'l'은(는) NULL(이)면 안 됩니다. 이는 'strchr'의 SAL 주석과 일치하지 않습니다.</MESSAGE>
        </KEYEVENT>
      </SFA>
    </PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>parser.c</FILENAME>
      <LINE>1180</LINE>
      <COLUMN>50</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>parse_net_options</FUNCTION>
    <DECORATED>parse_net_options</DECORATED>
    <FUNCLINE>1142</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>parser.c</FILENAME>
      <LINE>1752</LINE>
      <COLUMN>19</COLUMN>
    </SFA>
    <DEFECTCODE>6011</DEFECTCODE>
    <DESCRIPTION>NULL 포인터 'current'을(를) 역참조하고 있습니다. </DESCRIPTION>
    <FUNCTION>read_cfg</FUNCTION>
    <DECORATED>read_cfg</DECORATED>
    <FUNCLINE>1728</FUNCLINE>
    <PROBABILITY>1</PROBABILITY>
    <RANK>4</RANK>
    <CATEGORY>
      <RULECATEGORY>mspft</RULECATEGORY>
    </CATEGORY>
    <PATH>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>1730</LINE>
        <COLUMN>10</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>1731</LINE>
        <COLUMN>12</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>1732</LINE>
        <COLUMN>10</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>1733</LINE>
        <COLUMN>8</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>1734</LINE>
        <COLUMN>10</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>1735</LINE>
        <COLUMN>13</COLUMN>
        <KEYEVENT>
          <ID>1</ID>
          <KIND>선언</KIND>
          <IMPORTANCE>Essential</IMPORTANCE>
          <MESSAGE>'current'이(가) NULL입니다.</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>1736</LINE>
        <COLUMN>29</COLUMN>
        <KEYEVENT>
          <ID>2</ID>
          <KIND>분기</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>이 루프 시작, ('((line=fgetl(file)))!=0' 가정)</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>1737</LINE>
        <COLUMN>8</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>1738</LINE>
        <COLUMN>13</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>1739</LINE>
        <COLUMN>19</COLUMN>
        <KEYEVENT>
          <ID>3</ID>
          <KIND>분기</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>switch( 'line[0]' )가 case 0: (으)로 확인된다고 가정합니다.</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>1746</LINE>
        <COLUMN>12</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>1747</LINE>
        <COLUMN>12</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>1748</LINE>
        <COLUMN>12</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>1749</LINE>
        <COLUMN>20</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>1736</LINE>
        <COLUMN>29</COLUMN>
        <KEYEVENT>
          <ID>4</ID>
          <KIND>분기</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>이 루프 계속, ('((line=fgetl(file)))!=0' 가정)</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>1737</LINE>
        <COLUMN>8</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>1738</LINE>
        <COLUMN>13</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>1739</LINE>
        <COLUMN>19</COLUMN>
        <KEYEVENT>
          <ID>5</ID>
          <KIND>분기</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>switch( 'line[0]' )가 default case로 확인된다고 가정합니다.</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>1751</LINE>
        <COLUMN>12</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>1752</LINE>
        <COLUMN>19</COLUMN>
        <KEYEVENT>
          <ID>6</ID>
          <KIND>분기</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>이 분기 건너뛰기, ('&lt;분기 조건&gt;'이(가) false라고 가정)</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>1752</LINE>
        <COLUMN>19</COLUMN>
        <KEYEVENT>
          <ID>7</ID>
          <KIND>사용법</KIND>
          <IMPORTANCE>Essential</IMPORTANCE>
          <MESSAGE>'current'이(가) 역참조되었지만 여전히 NULL일 수 있습니다.</MESSAGE>
        </KEYEVENT>
      </SFA>
    </PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>parser.c</FILENAME>
      <LINE>1759</LINE>
      <COLUMN>10</COLUMN>
    </SFA>
    <DEFECTCODE>6387</DEFECTCODE>
    <DESCRIPTION>'file'이(가) '0'일 수 있습니다.  이 경우 'fclose' 함수의 사양과 일치하지 않습니다. </DESCRIPTION>
    <FUNCTION>read_cfg</FUNCTION>
    <DECORATED>read_cfg</DECORATED>
    <FUNCLINE>1728</FUNCLINE>
    <PROBABILITY>1</PROBABILITY>
    <RANK>4</RANK>
    <CATEGORY>
      <RULECATEGORY>mspft</RULECATEGORY>
    </CATEGORY>
    <PATH>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>1730</LINE>
        <COLUMN>10</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>1731</LINE>
        <COLUMN>12</COLUMN>
        <KEYEVENT>
          <ID>1</ID>
          <KIND>분기</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>'file'은(는) NULL일 수 있습니다. (이 분기 시작)</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>1731</LINE>
        <COLUMN>28</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>1732</LINE>
        <COLUMN>10</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>1733</LINE>
        <COLUMN>8</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>1734</LINE>
        <COLUMN>10</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>1735</LINE>
        <COLUMN>13</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>1736</LINE>
        <COLUMN>29</COLUMN>
        <KEYEVENT>
          <ID>2</ID>
          <KIND>선언</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>'file'은(는) 'fgetl'(d:\yolo_v4\darknet\src\utils.h:47에서 선언됨)에 대한 In/Out 인수입니다.</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>1736</LINE>
        <COLUMN>29</COLUMN>
        <KEYEVENT>
          <ID>3</ID>
          <KIND>분기</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>이 루프 건너뛰기, ('((line=fgetl(file)))!=0'이(가) false라고 가정)</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>1759</LINE>
        <COLUMN>10</COLUMN>
        <KEYEVENT>
          <ID>4</ID>
          <KIND>사용법</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>'file'은(는) 'fclose'(c:\program files (x86)\windows kits\10\include\10.0.19041.0\ucrt\stdio.h:152에서 선언됨)에 대한 입력입니다.</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>1759</LINE>
        <COLUMN>10</COLUMN>
        <KEYEVENT>
          <ID>5</ID>
          <KIND>사용법</KIND>
          <IMPORTANCE>Essential</IMPORTANCE>
          <MESSAGE>'file'은(는) NULL(이)면 안 됩니다. 이는 'fclose'의 SAL 주석과 일치하지 않습니다.</MESSAGE>
        </KEYEVENT>
      </SFA>
    </PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>parser.c</FILENAME>
      <LINE>1884</LINE>
      <COLUMN>46</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>save_connected_weights</FUNCTION>
    <DECORATED>save_connected_weights</DECORATED>
    <FUNCLINE>1876</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>parser.c</FILENAME>
      <LINE>1980</LINE>
      <COLUMN>10</COLUMN>
    </SFA>
    <DEFECTCODE>6387</DEFECTCODE>
    <DESCRIPTION>'fp'이(가) '0'일 수 있습니다.  이 경우 'fclose' 함수의 사양과 일치하지 않습니다. 이 오류가 발생할 수 있는 이전 위치는 줄 1906을(를) 참조하십시오.</DESCRIPTION>
    <FUNCTION>save_weights_upto</FUNCTION>
    <DECORATED>save_weights_upto</DECORATED>
    <FUNCLINE>1892</FUNCLINE>
    <PROBABILITY>1</PROBABILITY>
    <RANK>4</RANK>
    <CATEGORY>
      <RULECATEGORY>mspft</RULECATEGORY>
    </CATEGORY>
    <PATH>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>1899</LINE>
        <COLUMN>11</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>1900</LINE>
        <COLUMN>10</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>1901</LINE>
        <COLUMN>7</COLUMN>
        <KEYEVENT>
          <ID>1</ID>
          <KIND>분기</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>'fp'은(는) NULL일 수 있습니다. (이 분기 시작)</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>1901</LINE>
        <COLUMN>22</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>1903</LINE>
        <COLUMN>8</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>1904</LINE>
        <COLUMN>8</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>1905</LINE>
        <COLUMN>8</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>1906</LINE>
        <COLUMN>10</COLUMN>
        <KEYEVENT>
          <ID>2</ID>
          <KIND>선언</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>'fp'은(는) 'fwrite'(c:\program files (x86)\windows kits\10\include\10.0.19041.0\ucrt\stdio.h:297에서 선언됨)에 대한 In/Out 인수입니다.</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>1907</LINE>
        <COLUMN>10</COLUMN>
        <KEYEVENT>
          <ID>3</ID>
          <KIND>선언</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>'fp'은(는) 'fwrite'(c:\program files (x86)\windows kits\10\include\10.0.19041.0\ucrt\stdio.h:297에서 선언됨)에 대한 In/Out 인수입니다.</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>1908</LINE>
        <COLUMN>10</COLUMN>
        <KEYEVENT>
          <ID>4</ID>
          <KIND>선언</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>'fp'은(는) 'fwrite'(c:\program files (x86)\windows kits\10\include\10.0.19041.0\ucrt\stdio.h:297에서 선언됨)에 대한 In/Out 인수입니다.</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>1909</LINE>
        <COLUMN>16</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>1910</LINE>
        <COLUMN>10</COLUMN>
        <KEYEVENT>
          <ID>5</ID>
          <KIND>선언</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>'fp'은(는) 'fwrite'(c:\program files (x86)\windows kits\10\include\10.0.19041.0\ucrt\stdio.h:297에서 선언됨)에 대한 In/Out 인수입니다.</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>1912</LINE>
        <COLUMN>8</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>1913</LINE>
        <COLUMN>10</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>1913</LINE>
        <COLUMN>25</COLUMN>
        <KEYEVENT>
          <ID>6</ID>
          <KIND>분기</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>이 루프 건너뛰기, ('i&lt;net.n&amp;&amp;i&lt;cutoff'이(가) false라고 가정)</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>1980</LINE>
        <COLUMN>10</COLUMN>
        <KEYEVENT>
          <ID>7</ID>
          <KIND>사용법</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>'fp'은(는) 'fclose'(c:\program files (x86)\windows kits\10\include\10.0.19041.0\ucrt\stdio.h:152에서 선언됨)에 대한 입력입니다.</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>1980</LINE>
        <COLUMN>10</COLUMN>
        <KEYEVENT>
          <ID>8</ID>
          <KIND>사용법</KIND>
          <IMPORTANCE>Essential</IMPORTANCE>
          <MESSAGE>'fp'은(는) NULL(이)면 안 됩니다. 이는 'fclose'의 SAL 주석과 일치하지 않습니다.</MESSAGE>
        </KEYEVENT>
      </SFA>
    </PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>parser.c</FILENAME>
      <LINE>1906</LINE>
      <COLUMN>10</COLUMN>
    </SFA>
    <DEFECTCODE>6387</DEFECTCODE>
    <DESCRIPTION>'fp'이(가) '0'일 수 있습니다.  이 경우 'fwrite' 함수의 사양과 일치하지 않습니다. </DESCRIPTION>
    <FUNCTION>save_weights_upto</FUNCTION>
    <DECORATED>save_weights_upto</DECORATED>
    <FUNCLINE>1892</FUNCLINE>
    <PROBABILITY>1</PROBABILITY>
    <RANK>4</RANK>
    <CATEGORY>
      <RULECATEGORY>mspft</RULECATEGORY>
    </CATEGORY>
    <PATH>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>1899</LINE>
        <COLUMN>11</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>1900</LINE>
        <COLUMN>10</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>1901</LINE>
        <COLUMN>7</COLUMN>
        <KEYEVENT>
          <ID>1</ID>
          <KIND>분기</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>'fp'은(는) NULL일 수 있습니다. (이 분기 시작)</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>1901</LINE>
        <COLUMN>22</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>1903</LINE>
        <COLUMN>8</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>1904</LINE>
        <COLUMN>8</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>1905</LINE>
        <COLUMN>8</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>1906</LINE>
        <COLUMN>10</COLUMN>
        <KEYEVENT>
          <ID>2</ID>
          <KIND>선언</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>'fp'은(는) 'fwrite'(c:\program files (x86)\windows kits\10\include\10.0.19041.0\ucrt\stdio.h:297에서 선언됨)에 대한 In/Out 인수입니다.</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>parser.c</FILENAME>
        <LINE>1906</LINE>
        <COLUMN>10</COLUMN>
        <KEYEVENT>
          <ID>3</ID>
          <KIND>사용법</KIND>
          <IMPORTANCE>Essential</IMPORTANCE>
          <MESSAGE>'fp'은(는) NULL(이)면 안 됩니다. 이는 'fwrite'의 SAL 주석과 일치하지 않습니다.</MESSAGE>
        </KEYEVENT>
      </SFA>
    </PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>parser.c</FILENAME>
      <LINE>1989</LINE>
      <COLUMN>44</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>transpose_matrix</FUNCTION>
    <DECORATED>transpose_matrix</DECORATED>
    <FUNCLINE>1987</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>parser.c</FILENAME>
      <LINE>1996</LINE>
      <COLUMN>29</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>transpose_matrix</FUNCTION>
    <DECORATED>transpose_matrix</DECORATED>
    <FUNCLINE>1987</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>parser.c</FILENAME>
      <LINE>2003</LINE>
      <COLUMN>45</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>load_connected_weights</FUNCTION>
    <DECORATED>load_connected_weights</DECORATED>
    <FUNCLINE>2000</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>region_layer.c</FILENAME>
      <LINE>26</LINE>
      <COLUMN>33</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_region_layer</FUNCTION>
    <DECORATED>make_region_layer</DECORATED>
    <FUNCLINE>14</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>region_layer.c</FILENAME>
      <LINE>27</LINE>
      <COLUMN>39</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_region_layer</FUNCTION>
    <DECORATED>make_region_layer</DECORATED>
    <FUNCLINE>14</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>region_layer.c</FILENAME>
      <LINE>33</LINE>
      <COLUMN>36</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_region_layer</FUNCTION>
    <DECORATED>make_region_layer</DECORATED>
    <FUNCLINE>14</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>region_layer.c</FILENAME>
      <LINE>34</LINE>
      <COLUMN>37</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_region_layer</FUNCTION>
    <DECORATED>make_region_layer</DECORATED>
    <FUNCLINE>14</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>region_layer.c</FILENAME>
      <LINE>67</LINE>
      <COLUMN>53</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>resize_region_layer</FUNCTION>
    <DECORATED>resize_region_layer</DECORATED>
    <FUNCLINE>55</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>region_layer.c</FILENAME>
      <LINE>68</LINE>
      <COLUMN>51</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>resize_region_layer</FUNCTION>
    <DECORATED>resize_region_layer</DECORATED>
    <FUNCLINE>55</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>region_layer.c</FILENAME>
      <LINE>305</LINE>
      <COLUMN>23</COLUMN>
    </SFA>
    <DEFECTCODE>6031</DEFECTCODE>
    <DESCRIPTION>반환 값이 무시되었습니다. 'getchar'.</DESCRIPTION>
    <FUNCTION>forward_region_layer</FUNCTION>
    <DECORATED>forward_region_layer</DECORATED>
    <FUNCLINE>183</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>region_layer.c</FILENAME>
      <LINE>187</LINE>
      <COLUMN>43</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>forward_region_layer</FUNCTION>
    <DECORATED>forward_region_layer</DECORATED>
    <FUNCLINE>183</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>region_layer.c</FILENAME>
      <LINE>217</LINE>
      <COLUMN>33</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>forward_region_layer</FUNCTION>
    <DECORATED>forward_region_layer</DECORATED>
    <FUNCLINE>183</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>region_layer.c</FILENAME>
      <LINE>230</LINE>
      <COLUMN>56</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>forward_region_layer</FUNCTION>
    <DECORATED>forward_region_layer</DECORATED>
    <FUNCLINE>183</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>region_layer.c</FILENAME>
      <LINE>230</LINE>
      <COLUMN>73</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>forward_region_layer</FUNCTION>
    <DECORATED>forward_region_layer</DECORATED>
    <FUNCLINE>183</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>region_layer.c</FILENAME>
      <LINE>262</LINE>
      <COLUMN>64</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>forward_region_layer</FUNCTION>
    <DECORATED>forward_region_layer</DECORATED>
    <FUNCLINE>183</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>region_layer.c</FILENAME>
      <LINE>262</LINE>
      <COLUMN>81</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>forward_region_layer</FUNCTION>
    <DECORATED>forward_region_layer</DECORATED>
    <FUNCLINE>183</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>region_layer.c</FILENAME>
      <LINE>301</LINE>
      <COLUMN>52</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>forward_region_layer</FUNCTION>
    <DECORATED>forward_region_layer</DECORATED>
    <FUNCLINE>183</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>region_layer.c</FILENAME>
      <LINE>301</LINE>
      <COLUMN>69</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>forward_region_layer</FUNCTION>
    <DECORATED>forward_region_layer</DECORATED>
    <FUNCLINE>183</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>region_layer.c</FILENAME>
      <LINE>377</LINE>
      <COLUMN>12</COLUMN>
    </SFA>
    <DEFECTCODE>6993</DEFECTCODE>
    <DESCRIPTION>코드 분석에서 OpenMP 구문이 무시되고 단일 스레드 코드를 분석합니다.</DESCRIPTION>
    <FUNCTION></FUNCTION>
    <DECORATED></DECORATED>
    <FUNCLINE>0</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>region_layer.c</FILENAME>
      <LINE>495</LINE>
      <COLUMN>27</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '-' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '-' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>correct_region_boxes</FUNCTION>
    <DECORATED>correct_region_boxes</DECORATED>
    <FUNCLINE>480</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>region_layer.c</FILENAME>
      <LINE>496</LINE>
      <COLUMN>27</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '-' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '-' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>correct_region_boxes</FUNCTION>
    <DECORATED>correct_region_boxes</DECORATED>
    <FUNCLINE>480</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>region_layer.c</FILENAME>
      <LINE>534</LINE>
      <COLUMN>39</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '+' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '+' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>get_region_detections</FUNCTION>
    <DECORATED>get_region_detections</DECORATED>
    <FUNCLINE>510</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>rnn.c</FILENAME>
      <LINE>58</LINE>
      <COLUMN>45</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>get_rnn_token_data</FUNCTION>
    <DECORATED>get_rnn_token_data</DECORATED>
    <FUNCLINE>56</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>rnn.c</FILENAME>
      <LINE>58</LINE>
      <COLUMN>37</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>get_rnn_token_data</FUNCTION>
    <DECORATED>get_rnn_token_data</DECORATED>
    <FUNCLINE>56</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>rnn.c</FILENAME>
      <LINE>59</LINE>
      <COLUMN>45</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>get_rnn_token_data</FUNCTION>
    <DECORATED>get_rnn_token_data</DECORATED>
    <FUNCLINE>56</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>rnn.c</FILENAME>
      <LINE>59</LINE>
      <COLUMN>37</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>get_rnn_token_data</FUNCTION>
    <DECORATED>get_rnn_token_data</DECORATED>
    <FUNCLINE>56</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>rnn.c</FILENAME>
      <LINE>84</LINE>
      <COLUMN>45</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>get_rnn_data</FUNCTION>
    <DECORATED>get_rnn_data</DECORATED>
    <FUNCLINE>82</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>rnn.c</FILENAME>
      <LINE>84</LINE>
      <COLUMN>37</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>get_rnn_data</FUNCTION>
    <DECORATED>get_rnn_data</DECORATED>
    <FUNCLINE>82</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>rnn.c</FILENAME>
      <LINE>85</LINE>
      <COLUMN>45</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>get_rnn_data</FUNCTION>
    <DECORATED>get_rnn_data</DECORATED>
    <FUNCLINE>82</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>rnn.c</FILENAME>
      <LINE>85</LINE>
      <COLUMN>37</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>get_rnn_data</FUNCTION>
    <DECORATED>get_rnn_data</DECORATED>
    <FUNCLINE>82</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>rnn.c</FILENAME>
      <LINE>165</LINE>
      <COLUMN>10</COLUMN>
    </SFA>
    <DEFECTCODE>6328</DEFECTCODE>
    <DESCRIPTION>크기 불일치: 'unsigned __int64'이(가) _Param_(6)으로 전달되었습니다. 다음 호출에는 'int'이(가) 필요합니다. 'printf'. </DESCRIPTION>
    <FUNCTION>train_char_rnn</FUNCTION>
    <DECORATED>train_char_rnn</DECORATED>
    <FUNCLINE>125</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>rnn.c</FILENAME>
      <LINE>319</LINE>
      <COLUMN>23</COLUMN>
    </SFA>
    <DEFECTCODE>6011</DEFECTCODE>
    <DESCRIPTION>NULL 포인터 'out'을(를) 역참조하고 있습니다. </DESCRIPTION>
    <FUNCTION>test_tactic_rnn</FUNCTION>
    <DECORATED>test_tactic_rnn</DECORATED>
    <FUNCLINE>288</FUNCLINE>
    <PROBABILITY>1</PROBABILITY>
    <RANK>4</RANK>
    <CATEGORY>
      <RULECATEGORY>mspft</RULECATEGORY>
    </CATEGORY>
    <PATH>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>rnn.c</FILENAME>
        <LINE>290</LINE>
        <COLUMN>11</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>rnn.c</FILENAME>
        <LINE>291</LINE>
        <COLUMN>7</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>rnn.c</FILENAME>
        <LINE>296</LINE>
        <COLUMN>9</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>rnn.c</FILENAME>
        <LINE>297</LINE>
        <COLUMN>10</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>rnn.c</FILENAME>
        <LINE>298</LINE>
        <COLUMN>11</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>rnn.c</FILENAME>
        <LINE>300</LINE>
        <COLUMN>12</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>rnn.c</FILENAME>
        <LINE>301</LINE>
        <COLUMN>7</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>rnn.c</FILENAME>
        <LINE>304</LINE>
        <COLUMN>8</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>rnn.c</FILENAME>
        <LINE>306</LINE>
        <COLUMN>8</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>rnn.c</FILENAME>
        <LINE>306</LINE>
        <COLUMN>11</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>rnn.c</FILENAME>
        <LINE>307</LINE>
        <COLUMN>10</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>rnn.c</FILENAME>
        <LINE>307</LINE>
        <COLUMN>17</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>rnn.c</FILENAME>
        <LINE>308</LINE>
        <COLUMN>8</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>rnn.c</FILENAME>
        <LINE>309</LINE>
        <COLUMN>11</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>rnn.c</FILENAME>
        <LINE>310</LINE>
        <COLUMN>11</COLUMN>
        <KEYEVENT>
          <ID>1</ID>
          <KIND>선언</KIND>
          <IMPORTANCE>Essential</IMPORTANCE>
          <MESSAGE>'out'이(가) NULL입니다.</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>rnn.c</FILENAME>
        <LINE>312</LINE>
        <COLUMN>28</COLUMN>
        <KEYEVENT>
          <ID>2</ID>
          <KIND>분기</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>이 루프 건너뛰기, ('&lt;분기 조건&gt;'이(가) false라고 가정)</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>rnn.c</FILENAME>
        <LINE>317</LINE>
        <COLUMN>10</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>rnn.c</FILENAME>
        <LINE>317</LINE>
        <COLUMN>17</COLUMN>
        <KEYEVENT>
          <ID>3</ID>
          <KIND>분기</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>이 루프 시작, ('i&lt;num' 가정)</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>rnn.c</FILENAME>
        <LINE>318</LINE>
        <COLUMN>14</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>rnn.c</FILENAME>
        <LINE>318</LINE>
        <COLUMN>21</COLUMN>
        <KEYEVENT>
          <ID>4</ID>
          <KIND>분기</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>이 루프 시작, ('j&lt;inputs' 가정)</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>rnn.c</FILENAME>
        <LINE>319</LINE>
        <COLUMN>23</COLUMN>
        <KEYEVENT>
          <ID>5</ID>
          <KIND>사용법</KIND>
          <IMPORTANCE>Essential</IMPORTANCE>
          <MESSAGE>'out'이(가) 역참조되었지만 여전히 NULL일 수 있습니다.</MESSAGE>
        </KEYEVENT>
      </SFA>
    </PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>rnn_layer.c</FILENAME>
      <LINE>43</LINE>
      <COLUMN>45</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_rnn_layer</FUNCTION>
    <DECORATED>make_rnn_layer</DECORATED>
    <FUNCLINE>29</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>rnn_layer.c</FILENAME>
      <LINE>43</LINE>
      <COLUMN>36</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_rnn_layer</FUNCTION>
    <DECORATED>make_rnn_layer</DECORATED>
    <FUNCLINE>29</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>rnn_layer.c</FILENAME>
      <LINE>113</LINE>
      <COLUMN>43</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>forward_rnn_layer</FUNCTION>
    <DECORATED>forward_rnn_layer</DECORATED>
    <FUNCLINE>89</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>rnn_layer.c</FILENAME>
      <LINE>125</LINE>
      <COLUMN>31</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>forward_rnn_layer</FUNCTION>
    <DECORATED>forward_rnn_layer</DECORATED>
    <FUNCLINE>89</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>rnn_layer.c</FILENAME>
      <LINE>146</LINE>
      <COLUMN>31</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>backward_rnn_layer</FUNCTION>
    <DECORATED>backward_rnn_layer</DECORATED>
    <FUNCLINE>132</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>rnn_layer.c</FILENAME>
      <LINE>146</LINE>
      <COLUMN>23</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>backward_rnn_layer</FUNCTION>
    <DECORATED>backward_rnn_layer</DECORATED>
    <FUNCLINE>132</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>rnn_layer.c</FILENAME>
      <LINE>155</LINE>
      <COLUMN>27</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>backward_rnn_layer</FUNCTION>
    <DECORATED>backward_rnn_layer</DECORATED>
    <FUNCLINE>132</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>rnn_layer.c</FILENAME>
      <LINE>166</LINE>
      <COLUMN>45</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>backward_rnn_layer</FUNCTION>
    <DECORATED>backward_rnn_layer</DECORATED>
    <FUNCLINE>132</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>rnn_layer.c</FILENAME>
      <LINE>171</LINE>
      <COLUMN>111</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>backward_rnn_layer</FUNCTION>
    <DECORATED>backward_rnn_layer</DECORATED>
    <FUNCLINE>132</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>rnn_layer.c</FILENAME>
      <LINE>172</LINE>
      <COLUMN>42</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>backward_rnn_layer</FUNCTION>
    <DECORATED>backward_rnn_layer</DECORATED>
    <FUNCLINE>132</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>rnn_layer.c</FILENAME>
      <LINE>172</LINE>
      <COLUMN>33</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>backward_rnn_layer</FUNCTION>
    <DECORATED>backward_rnn_layer</DECORATED>
    <FUNCLINE>132</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>rnn_layer.c</FILENAME>
      <LINE>173</LINE>
      <COLUMN>58</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>backward_rnn_layer</FUNCTION>
    <DECORATED>backward_rnn_layer</DECORATED>
    <FUNCLINE>132</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>rnn_layer.c</FILENAME>
      <LINE>173</LINE>
      <COLUMN>49</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>backward_rnn_layer</FUNCTION>
    <DECORATED>backward_rnn_layer</DECORATED>
    <FUNCLINE>132</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>route_layer.c</FILENAME>
      <LINE>28</LINE>
      <COLUMN>38</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_route_layer</FUNCTION>
    <DECORATED>make_route_layer</DECORATED>
    <FUNCLINE>7</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>route_layer.c</FILENAME>
      <LINE>29</LINE>
      <COLUMN>39</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_route_layer</FUNCTION>
    <DECORATED>make_route_layer</DECORATED>
    <FUNCLINE>7</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>route_layer.c</FILENAME>
      <LINE>68</LINE>
      <COLUMN>53</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>resize_route_layer</FUNCTION>
    <DECORATED>resize_route_layer</DECORATED>
    <FUNCLINE>43</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>route_layer.c</FILENAME>
      <LINE>69</LINE>
      <COLUMN>55</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>resize_route_layer</FUNCTION>
    <DECORATED>resize_route_layer</DECORATED>
    <FUNCLINE>43</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>route_layer.c</FILENAME>
      <LINE>91</LINE>
      <COLUMN>47</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>forward_route_layer</FUNCTION>
    <DECORATED>forward_route_layer</DECORATED>
    <FUNCLINE>80</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>route_layer.c</FILENAME>
      <LINE>91</LINE>
      <COLUMN>76</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>forward_route_layer</FUNCTION>
    <DECORATED>forward_route_layer</DECORATED>
    <FUNCLINE>80</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>route_layer.c</FILENAME>
      <LINE>91</LINE>
      <COLUMN>113</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>forward_route_layer</FUNCTION>
    <DECORATED>forward_route_layer</DECORATED>
    <FUNCLINE>80</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>route_layer.c</FILENAME>
      <LINE>109</LINE>
      <COLUMN>61</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>backward_route_layer</FUNCTION>
    <DECORATED>backward_route_layer</DECORATED>
    <FUNCLINE>98</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>route_layer.c</FILENAME>
      <LINE>109</LINE>
      <COLUMN>85</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>backward_route_layer</FUNCTION>
    <DECORATED>backward_route_layer</DECORATED>
    <FUNCLINE>98</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>route_layer.c</FILENAME>
      <LINE>109</LINE>
      <COLUMN>114</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>backward_route_layer</FUNCTION>
    <DECORATED>backward_route_layer</DECORATED>
    <FUNCLINE>98</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>sam_layer.c</FILENAME>
      <LINE>28</LINE>
      <COLUMN>40</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_sam_layer</FUNCTION>
    <DECORATED>make_sam_layer</DECORATED>
    <FUNCLINE>8</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>sam_layer.c</FILENAME>
      <LINE>29</LINE>
      <COLUMN>41</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_sam_layer</FUNCTION>
    <DECORATED>make_sam_layer</DECORATED>
    <FUNCLINE>8</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>sam_layer.c</FILENAME>
      <LINE>49</LINE>
      <COLUMN>53</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>resize_sam_layer</FUNCTION>
    <DECORATED>resize_sam_layer</DECORATED>
    <FUNCLINE>43</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>sam_layer.c</FILENAME>
      <LINE>50</LINE>
      <COLUMN>55</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>resize_sam_layer</FUNCTION>
    <DECORATED>resize_sam_layer</DECORATED>
    <FUNCLINE>43</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>sam_layer.c</FILENAME>
      <LINE>68</LINE>
      <COLUMN>12</COLUMN>
    </SFA>
    <DEFECTCODE>6993</DEFECTCODE>
    <DESCRIPTION>코드 분석에서 OpenMP 구문이 무시되고 단일 스레드 코드를 분석합니다.</DESCRIPTION>
    <FUNCTION></FUNCTION>
    <DECORATED></DECORATED>
    <FUNCLINE>0</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>scale_channels_layer.c</FILENAME>
      <LINE>31</LINE>
      <COLUMN>40</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_scale_channels_layer</FUNCTION>
    <DECORATED>make_scale_channels_layer</DECORATED>
    <FUNCLINE>8</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>scale_channels_layer.c</FILENAME>
      <LINE>32</LINE>
      <COLUMN>41</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_scale_channels_layer</FUNCTION>
    <DECORATED>make_scale_channels_layer</DECORATED>
    <FUNCLINE>8</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>scale_channels_layer.c</FILENAME>
      <LINE>53</LINE>
      <COLUMN>53</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>resize_scale_channels_layer</FUNCTION>
    <DECORATED>resize_scale_channels_layer</DECORATED>
    <FUNCLINE>46</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>scale_channels_layer.c</FILENAME>
      <LINE>54</LINE>
      <COLUMN>55</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>resize_scale_channels_layer</FUNCTION>
    <DECORATED>resize_scale_channels_layer</DECORATED>
    <FUNCLINE>46</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>scale_channels_layer.c</FILENAME>
      <LINE>74</LINE>
      <COLUMN>16</COLUMN>
    </SFA>
    <DEFECTCODE>6993</DEFECTCODE>
    <DESCRIPTION>코드 분석에서 OpenMP 구문이 무시되고 단일 스레드 코드를 분석합니다.</DESCRIPTION>
    <FUNCTION></FUNCTION>
    <DECORATED></DECORATED>
    <FUNCLINE>0</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>shortcut_layer.c</FILENAME>
      <LINE>46</LINE>
      <COLUMN>51</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_shortcut_layer</FUNCTION>
    <DECORATED>make_shortcut_layer</DECORATED>
    <FUNCLINE>10</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>shortcut_layer.c</FILENAME>
      <LINE>47</LINE>
      <COLUMN>41</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_shortcut_layer</FUNCTION>
    <DECORATED>make_shortcut_layer</DECORATED>
    <FUNCLINE>10</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>shortcut_layer.c</FILENAME>
      <LINE>88</LINE>
      <COLUMN>43</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_shortcut_layer</FUNCTION>
    <DECORATED>make_shortcut_layer</DECORATED>
    <FUNCLINE>10</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>shortcut_layer.c</FILENAME>
      <LINE>88</LINE>
      <COLUMN>33</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_shortcut_layer</FUNCTION>
    <DECORATED>make_shortcut_layer</DECORATED>
    <FUNCLINE>10</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>shortcut_layer.c</FILENAME>
      <LINE>88</LINE>
      <COLUMN>23</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_shortcut_layer</FUNCTION>
    <DECORATED>make_shortcut_layer</DECORATED>
    <FUNCLINE>10</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>shortcut_layer.c</FILENAME>
      <LINE>115</LINE>
      <COLUMN>94</COLUMN>
    </SFA>
    <DEFECTCODE>6308</DEFECTCODE>
    <DESCRIPTION>'realloc'는 null 포인터를 반환할 수 있습니다. 'realloc'에 인수로 전달되는 'l-&gt;activation_input'에 null 포인터를 할당하면 원래 메모리 블록에서 누수가 발생할 수 있습니다.</DESCRIPTION>
    <FUNCTION>resize_shortcut_layer</FUNCTION>
    <DECORATED>resize_shortcut_layer</DECORATED>
    <FUNCLINE>94</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>shortcut_layer.c</FILENAME>
      <LINE>102</LINE>
      <COLUMN>67</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>resize_shortcut_layer</FUNCTION>
    <DECORATED>resize_shortcut_layer</DECORATED>
    <FUNCLINE>94</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>shortcut_layer.c</FILENAME>
      <LINE>103</LINE>
      <COLUMN>55</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>resize_shortcut_layer</FUNCTION>
    <DECORATED>resize_shortcut_layer</DECORATED>
    <FUNCLINE>94</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>shortcut_layer.c</FILENAME>
      <LINE>115</LINE>
      <COLUMN>124</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>resize_shortcut_layer</FUNCTION>
    <DECORATED>resize_shortcut_layer</DECORATED>
    <FUNCLINE>94</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>shortcut_layer.c</FILENAME>
      <LINE>159</LINE>
      <COLUMN>16</COLUMN>
    </SFA>
    <DEFECTCODE>6993</DEFECTCODE>
    <DESCRIPTION>코드 분석에서 OpenMP 구문이 무시되고 단일 스레드 코드를 분석합니다.</DESCRIPTION>
    <FUNCTION></FUNCTION>
    <DECORATED></DECORATED>
    <FUNCLINE>0</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>softmax_layer.c</FILENAME>
      <LINE>23</LINE>
      <COLUMN>20</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>softmax_tree</FUNCTION>
    <DECORATED>softmax_tree</DECORATED>
    <FUNCLINE>15</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>softmax_layer.c</FILENAME>
      <LINE>23</LINE>
      <COLUMN>65</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>softmax_tree</FUNCTION>
    <DECORATED>softmax_tree</DECORATED>
    <FUNCLINE>15</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>softmax_layer.c</FILENAME>
      <LINE>39</LINE>
      <COLUMN>36</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_softmax_layer</FUNCTION>
    <DECORATED>make_softmax_layer</DECORATED>
    <FUNCLINE>29</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>softmax_layer.c</FILENAME>
      <LINE>40</LINE>
      <COLUMN>38</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_softmax_layer</FUNCTION>
    <DECORATED>make_softmax_layer</DECORATED>
    <FUNCLINE>29</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>softmax_layer.c</FILENAME>
      <LINE>41</LINE>
      <COLUMN>37</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_softmax_layer</FUNCTION>
    <DECORATED>make_softmax_layer</DECORATED>
    <FUNCLINE>29</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>softmax_layer.c</FILENAME>
      <LINE>154</LINE>
      <COLUMN>19</COLUMN>
    </SFA>
    <DEFECTCODE>6031</DEFECTCODE>
    <DESCRIPTION>반환 값이 무시되었습니다. 'getchar'.</DESCRIPTION>
    <FUNCTION>make_contrastive_layer</FUNCTION>
    <DECORATED>make_contrastive_layer</DECORATED>
    <FUNCLINE>130</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>softmax_layer.c</FILENAME>
      <LINE>159</LINE>
      <COLUMN>19</COLUMN>
    </SFA>
    <DEFECTCODE>6031</DEFECTCODE>
    <DESCRIPTION>반환 값이 무시되었습니다. 'getchar'.</DESCRIPTION>
    <FUNCTION>make_contrastive_layer</FUNCTION>
    <DECORATED>make_contrastive_layer</DECORATED>
    <FUNCLINE>130</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>softmax_layer.c</FILENAME>
      <LINE>203</LINE>
      <COLUMN>11</COLUMN>
    </SFA>
    <DEFECTCODE>6328</DEFECTCODE>
    <DESCRIPTION>크기 불일치: 'const unsigned __int64'이(가) _Param_(9)으로 전달되었습니다. 다음 호출에는 'int'이(가) 필요합니다. 'fprintf'. </DESCRIPTION>
    <FUNCTION>make_contrastive_layer</FUNCTION>
    <DECORATED>make_contrastive_layer</DECORATED>
    <FUNCLINE>130</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>softmax_layer.c</FILENAME>
      <LINE>172</LINE>
      <COLUMN>38</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_contrastive_layer</FUNCTION>
    <DECORATED>make_contrastive_layer</DECORATED>
    <FUNCLINE>130</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>softmax_layer.c</FILENAME>
      <LINE>173</LINE>
      <COLUMN>37</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_contrastive_layer</FUNCTION>
    <DECORATED>make_contrastive_layer</DECORATED>
    <FUNCLINE>130</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>softmax_layer.c</FILENAME>
      <LINE>176</LINE>
      <COLUMN>39</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_contrastive_layer</FUNCTION>
    <DECORATED>make_contrastive_layer</DECORATED>
    <FUNCLINE>130</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>softmax_layer.c</FILENAME>
      <LINE>176</LINE>
      <COLUMN>35</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_contrastive_layer</FUNCTION>
    <DECORATED>make_contrastive_layer</DECORATED>
    <FUNCLINE>130</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>softmax_layer.c</FILENAME>
      <LINE>176</LINE>
      <COLUMN>31</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_contrastive_layer</FUNCTION>
    <DECORATED>make_contrastive_layer</DECORATED>
    <FUNCLINE>130</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>softmax_layer.c</FILENAME>
      <LINE>501</LINE>
      <COLUMN>12</COLUMN>
    </SFA>
    <DEFECTCODE>6993</DEFECTCODE>
    <DESCRIPTION>코드 분석에서 OpenMP 구문이 무시되고 단일 스레드 코드를 분석합니다.</DESCRIPTION>
    <FUNCTION></FUNCTION>
    <DECORATED></DECORATED>
    <FUNCLINE>0</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>softmax_layer.c</FILENAME>
      <LINE>353</LINE>
      <COLUMN>75</COLUMN>
    </SFA>
    <DEFECTCODE>6031</DEFECTCODE>
    <DESCRIPTION>반환 값이 무시되었습니다. 'getchar'.</DESCRIPTION>
    <FUNCTION>forward_contrastive_layer</FUNCTION>
    <DECORATED>forward_contrastive_layer</DECORATED>
    <FUNCLINE>221</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>softmax_layer.c</FILENAME>
      <LINE>266</LINE>
      <COLUMN>48</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>forward_contrastive_layer</FUNCTION>
    <DECORATED>forward_contrastive_layer</DECORATED>
    <FUNCLINE>221</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>softmax_layer.c</FILENAME>
      <LINE>266</LINE>
      <COLUMN>44</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>forward_contrastive_layer</FUNCTION>
    <DECORATED>forward_contrastive_layer</DECORATED>
    <FUNCLINE>221</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>softmax_layer.c</FILENAME>
      <LINE>266</LINE>
      <COLUMN>40</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>forward_contrastive_layer</FUNCTION>
    <DECORATED>forward_contrastive_layer</DECORATED>
    <FUNCLINE>221</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>softmax_layer.c</FILENAME>
      <LINE>290</LINE>
      <COLUMN>39</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>forward_contrastive_layer</FUNCTION>
    <DECORATED>forward_contrastive_layer</DECORATED>
    <FUNCLINE>221</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>softmax_layer.c</FILENAME>
      <LINE>290</LINE>
      <COLUMN>35</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>forward_contrastive_layer</FUNCTION>
    <DECORATED>forward_contrastive_layer</DECORATED>
    <FUNCLINE>221</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>softmax_layer.c</FILENAME>
      <LINE>290</LINE>
      <COLUMN>31</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>forward_contrastive_layer</FUNCTION>
    <DECORATED>forward_contrastive_layer</DECORATED>
    <FUNCLINE>221</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>softmax_layer.c</FILENAME>
      <LINE>292</LINE>
      <COLUMN>47</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>forward_contrastive_layer</FUNCTION>
    <DECORATED>forward_contrastive_layer</DECORATED>
    <FUNCLINE>221</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>softmax_layer.c</FILENAME>
      <LINE>295</LINE>
      <COLUMN>50</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>forward_contrastive_layer</FUNCTION>
    <DECORATED>forward_contrastive_layer</DECORATED>
    <FUNCLINE>221</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>softmax_layer.c</FILENAME>
      <LINE>296</LINE>
      <COLUMN>50</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>forward_contrastive_layer</FUNCTION>
    <DECORATED>forward_contrastive_layer</DECORATED>
    <FUNCLINE>221</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>softmax_layer.c</FILENAME>
      <LINE>324</LINE>
      <COLUMN>71</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>forward_contrastive_layer</FUNCTION>
    <DECORATED>forward_contrastive_layer</DECORATED>
    <FUNCLINE>221</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>softmax_layer.c</FILENAME>
      <LINE>324</LINE>
      <COLUMN>67</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>forward_contrastive_layer</FUNCTION>
    <DECORATED>forward_contrastive_layer</DECORATED>
    <FUNCLINE>221</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>softmax_layer.c</FILENAME>
      <LINE>324</LINE>
      <COLUMN>63</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>forward_contrastive_layer</FUNCTION>
    <DECORATED>forward_contrastive_layer</DECORATED>
    <FUNCLINE>221</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>softmax_layer.c</FILENAME>
      <LINE>346</LINE>
      <COLUMN>57</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '+' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '+' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>forward_contrastive_layer</FUNCTION>
    <DECORATED>forward_contrastive_layer</DECORATED>
    <FUNCLINE>221</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>softmax_layer.c</FILENAME>
      <LINE>347</LINE>
      <COLUMN>75</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '+' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '+' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>forward_contrastive_layer</FUNCTION>
    <DECORATED>forward_contrastive_layer</DECORATED>
    <FUNCLINE>221</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>softmax_layer.c</FILENAME>
      <LINE>465</LINE>
      <COLUMN>75</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>forward_contrastive_layer</FUNCTION>
    <DECORATED>forward_contrastive_layer</DECORATED>
    <FUNCLINE>221</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>softmax_layer.c</FILENAME>
      <LINE>465</LINE>
      <COLUMN>71</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>forward_contrastive_layer</FUNCTION>
    <DECORATED>forward_contrastive_layer</DECORATED>
    <FUNCLINE>221</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>softmax_layer.c</FILENAME>
      <LINE>465</LINE>
      <COLUMN>67</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>forward_contrastive_layer</FUNCTION>
    <DECORATED>forward_contrastive_layer</DECORATED>
    <FUNCLINE>221</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>softmax_layer.c</FILENAME>
      <LINE>508</LINE>
      <COLUMN>55</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>forward_contrastive_layer</FUNCTION>
    <DECORATED>forward_contrastive_layer</DECORATED>
    <FUNCLINE>221</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>softmax_layer.c</FILENAME>
      <LINE>508</LINE>
      <COLUMN>51</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>forward_contrastive_layer</FUNCTION>
    <DECORATED>forward_contrastive_layer</DECORATED>
    <FUNCLINE>221</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>softmax_layer.c</FILENAME>
      <LINE>508</LINE>
      <COLUMN>47</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>forward_contrastive_layer</FUNCTION>
    <DECORATED>forward_contrastive_layer</DECORATED>
    <FUNCLINE>221</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>super.c</FILENAME>
      <LINE>94</LINE>
      <COLUMN>18</COLUMN>
    </SFA>
    <DEFECTCODE>6031</DEFECTCODE>
    <DESCRIPTION>반환 값이 무시되었습니다. 'strtok'.</DESCRIPTION>
    <FUNCTION>test_super</FUNCTION>
    <DECORATED>test_super</DECORATED>
    <FUNCLINE>74</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>tag.c</FILENAME>
      <LINE>66</LINE>
      <COLUMN>14</COLUMN>
    </SFA>
    <DEFECTCODE>6328</DEFECTCODE>
    <DESCRIPTION>크기 불일치: 'unsigned __int64'이(가) _Param_(8)으로 전달되었습니다. 다음 호출에는 'int'이(가) 필요합니다. 'printf'. </DESCRIPTION>
    <FUNCTION>train_tag</FUNCTION>
    <DECORATED>train_tag</DECORATED>
    <FUNCLINE>5</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>tag.c</FILENAME>
      <LINE>115</LINE>
      <COLUMN>18</COLUMN>
    </SFA>
    <DEFECTCODE>6031</DEFECTCODE>
    <DESCRIPTION>반환 값이 무시되었습니다. 'strtok'.</DESCRIPTION>
    <FUNCTION>test_tag</FUNCTION>
    <DECORATED>test_tag</DECORATED>
    <FUNCLINE>92</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>tag.c</FILENAME>
      <LINE>129</LINE>
      <COLUMN>53</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>test_tag</FUNCTION>
    <DECORATED>test_tag</DECORATED>
    <FUNCLINE>92</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>tree.c</FILENAME>
      <LINE>98</LINE>
      <COLUMN>14</COLUMN>
    </SFA>
    <DEFECTCODE>6031</DEFECTCODE>
    <DESCRIPTION>반환 값이 무시되었습니다. 'sscanf'.</DESCRIPTION>
    <FUNCTION>read_tree</FUNCTION>
    <DECORATED>read_tree</DECORATED>
    <FUNCLINE>85</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>tree.c</FILENAME>
      <LINE>99</LINE>
      <COLUMN>47</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '+' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '+' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>read_tree</FUNCTION>
    <DECORATED>read_tree</DECORATED>
    <FUNCLINE>85</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>tree.c</FILENAME>
      <LINE>102</LINE>
      <COLUMN>45</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '+' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '+' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>read_tree</FUNCTION>
    <DECORATED>read_tree</DECORATED>
    <FUNCLINE>85</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>tree.c</FILENAME>
      <LINE>113</LINE>
      <COLUMN>45</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '+' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '+' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>read_tree</FUNCTION>
    <DECORATED>read_tree</DECORATED>
    <FUNCLINE>85</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>upsample_layer.c</FILENAME>
      <LINE>28</LINE>
      <COLUMN>40</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_upsample_layer</FUNCTION>
    <DECORATED>make_upsample_layer</DECORATED>
    <FUNCLINE>8</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>upsample_layer.c</FILENAME>
      <LINE>29</LINE>
      <COLUMN>41</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_upsample_layer</FUNCTION>
    <DECORATED>make_upsample_layer</DECORATED>
    <FUNCLINE>8</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>upsample_layer.c</FILENAME>
      <LINE>57</LINE>
      <COLUMN>53</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>resize_upsample_layer</FUNCTION>
    <DECORATED>resize_upsample_layer</DECORATED>
    <FUNCLINE>45</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>upsample_layer.c</FILENAME>
      <LINE>58</LINE>
      <COLUMN>55</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>resize_upsample_layer</FUNCTION>
    <DECORATED>resize_upsample_layer</DECORATED>
    <FUNCLINE>45</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>utils.c</FILENAME>
      <LINE>45</LINE>
      <COLUMN>15</COLUMN>
    </SFA>
    <DEFECTCODE>6308</DEFECTCODE>
    <DESCRIPTION>'realloc'는 null 포인터를 반환할 수 있습니다. 'realloc'에 인수로 전달되는 'ptr'에 null 포인터를 할당하면 원래 메모리 블록에서 누수가 발생할 수 있습니다.</DESCRIPTION>
    <FUNCTION>xrealloc</FUNCTION>
    <DECORATED>xrealloc</DECORATED>
    <FUNCLINE>44</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>utils.c</FILENAME>
      <LINE>211</LINE>
      <COLUMN>11</COLUMN>
    </SFA>
    <DEFECTCODE>6387</DEFECTCODE>
    <DESCRIPTION>'buffer'이(가) '0'일 수 있습니다.  이 경우 'sprintf' 함수의 사양과 일치하지 않습니다. </DESCRIPTION>
    <FUNCTION>find_replace</FUNCTION>
    <DECORATED>find_replace</DECORATED>
    <FUNCLINE>206</FUNCLINE>
    <PROBABILITY>1</PROBABILITY>
    <RANK>4</RANK>
    <CATEGORY>
      <RULECATEGORY>mspft</RULECATEGORY>
    </CATEGORY>
    <PATH>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>utils.c</FILENAME>
        <LINE>208</LINE>
        <COLUMN>10</COLUMN>
        <KEYEVENT>
          <ID>1</ID>
          <KIND>선언</KIND>
          <IMPORTANCE>Essential</IMPORTANCE>
          <MESSAGE>'buffer'은(는) NULL일 수 있습니다.</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>utils.c</FILENAME>
        <LINE>209</LINE>
        <COLUMN>10</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>utils.c</FILENAME>
        <LINE>211</LINE>
        <COLUMN>11</COLUMN>
        <KEYEVENT>
          <ID>2</ID>
          <KIND>사용법</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>'buffer'은(는) 'sprintf'(c:\program files (x86)\windows kits\10\include\10.0.19041.0\ucrt\stdio.h:1764에서 선언됨)에 대한 입력입니다.</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>utils.c</FILENAME>
        <LINE>211</LINE>
        <COLUMN>11</COLUMN>
        <KEYEVENT>
          <ID>3</ID>
          <KIND>사용법</KIND>
          <IMPORTANCE>Essential</IMPORTANCE>
          <MESSAGE>'buffer'은(는) NULL(이)면 안 됩니다. 이는 'sprintf'의 SAL 주석과 일치하지 않습니다.</MESSAGE>
        </KEYEVENT>
      </SFA>
    </PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>utils.c</FILENAME>
      <LINE>212</LINE>
      <COLUMN>8</COLUMN>
    </SFA>
    <DEFECTCODE>6387</DEFECTCODE>
    <DESCRIPTION>'buffer'이(가) '0'일 수 있습니다.  이 경우 'strstr' 함수의 사양과 일치하지 않습니다. 이 오류가 발생할 수 있는 이전 위치는 줄 211을(를) 참조하십시오.</DESCRIPTION>
    <FUNCTION>find_replace</FUNCTION>
    <DECORATED>find_replace</DECORATED>
    <FUNCLINE>206</FUNCLINE>
    <PROBABILITY>1</PROBABILITY>
    <RANK>4</RANK>
    <CATEGORY>
      <RULECATEGORY>mspft</RULECATEGORY>
    </CATEGORY>
    <PATH>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>utils.c</FILENAME>
        <LINE>208</LINE>
        <COLUMN>10</COLUMN>
        <KEYEVENT>
          <ID>1</ID>
          <KIND>선언</KIND>
          <IMPORTANCE>Essential</IMPORTANCE>
          <MESSAGE>'buffer'은(는) NULL일 수 있습니다.</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>utils.c</FILENAME>
        <LINE>209</LINE>
        <COLUMN>10</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>utils.c</FILENAME>
        <LINE>211</LINE>
        <COLUMN>11</COLUMN>
        <KEYEVENT>
          <ID>2</ID>
          <KIND>사용법</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>'buffer'은(는) 'sprintf'(c:\program files (x86)\windows kits\10\include\10.0.19041.0\ucrt\stdio.h:1764에서 선언됨)에 대한 입력입니다.</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>utils.c</FILENAME>
        <LINE>212</LINE>
        <COLUMN>8</COLUMN>
        <KEYEVENT>
          <ID>3</ID>
          <KIND>사용법</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>'buffer'은(는) 'strstr'(c:\program files (x86)\microsoft visual studio\2019\community\vc\tools\msvc\14.28.29910\include\vcruntime_string.h:82에서 선언됨)에 대한 입력입니다.</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>utils.c</FILENAME>
        <LINE>212</LINE>
        <COLUMN>8</COLUMN>
        <KEYEVENT>
          <ID>4</ID>
          <KIND>분기</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>이 분기 건너뛰기, ('!((p=strstr(buffer, orig)))'이(가) false라고 가정)</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>utils.c</FILENAME>
        <LINE>212</LINE>
        <COLUMN>8</COLUMN>
        <KEYEVENT>
          <ID>5</ID>
          <KIND>사용법</KIND>
          <IMPORTANCE>Essential</IMPORTANCE>
          <MESSAGE>'buffer'은(는) NULL(이)면 안 됩니다. 이는 'strstr'의 SAL 주석과 일치하지 않습니다.</MESSAGE>
        </KEYEVENT>
      </SFA>
    </PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>utils.c</FILENAME>
      <LINE>247</LINE>
      <COLUMN>10</COLUMN>
    </SFA>
    <DEFECTCODE>6387</DEFECTCODE>
    <DESCRIPTION>'buffer'이(가) '0'일 수 있습니다.  이 경우 'strstr' 함수의 사양과 일치하지 않습니다. 이 오류가 발생할 수 있는 이전 위치는 줄 246을(를) 참조하십시오.</DESCRIPTION>
    <FUNCTION>find_replace_extension</FUNCTION>
    <DECORATED>find_replace_extension</DECORATED>
    <FUNCLINE>242</FUNCLINE>
    <PROBABILITY>1</PROBABILITY>
    <RANK>4</RANK>
    <CATEGORY>
      <RULECATEGORY>mspft</RULECATEGORY>
    </CATEGORY>
    <PATH>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>utils.c</FILENAME>
        <LINE>244</LINE>
        <COLUMN>10</COLUMN>
        <KEYEVENT>
          <ID>1</ID>
          <KIND>선언</KIND>
          <IMPORTANCE>Essential</IMPORTANCE>
          <MESSAGE>'buffer'은(는) NULL일 수 있습니다.</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>utils.c</FILENAME>
        <LINE>246</LINE>
        <COLUMN>11</COLUMN>
        <KEYEVENT>
          <ID>2</ID>
          <KIND>사용법</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>'buffer'은(는) 'sprintf'(c:\program files (x86)\windows kits\10\include\10.0.19041.0\ucrt\stdio.h:1764에서 선언됨)에 대한 입력입니다.</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>utils.c</FILENAME>
        <LINE>247</LINE>
        <COLUMN>10</COLUMN>
        <KEYEVENT>
          <ID>3</ID>
          <KIND>사용법</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>'buffer'은(는) 'strstr'(c:\program files (x86)\microsoft visual studio\2019\community\vc\tools\msvc\14.28.29910\include\vcruntime_string.h:82에서 선언됨)에 대한 입력입니다.</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>utils.c</FILENAME>
        <LINE>247</LINE>
        <COLUMN>10</COLUMN>
        <KEYEVENT>
          <ID>4</ID>
          <KIND>사용법</KIND>
          <IMPORTANCE>Essential</IMPORTANCE>
          <MESSAGE>'buffer'은(는) NULL(이)면 안 됩니다. 이는 'strstr'의 SAL 주석과 일치하지 않습니다.</MESSAGE>
        </KEYEVENT>
      </SFA>
    </PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>utils.c</FILENAME>
      <LINE>246</LINE>
      <COLUMN>11</COLUMN>
    </SFA>
    <DEFECTCODE>6387</DEFECTCODE>
    <DESCRIPTION>'buffer'이(가) '0'일 수 있습니다.  이 경우 'sprintf' 함수의 사양과 일치하지 않습니다. </DESCRIPTION>
    <FUNCTION>find_replace_extension</FUNCTION>
    <DECORATED>find_replace_extension</DECORATED>
    <FUNCLINE>242</FUNCLINE>
    <PROBABILITY>1</PROBABILITY>
    <RANK>4</RANK>
    <CATEGORY>
      <RULECATEGORY>mspft</RULECATEGORY>
    </CATEGORY>
    <PATH>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>utils.c</FILENAME>
        <LINE>244</LINE>
        <COLUMN>10</COLUMN>
        <KEYEVENT>
          <ID>1</ID>
          <KIND>선언</KIND>
          <IMPORTANCE>Essential</IMPORTANCE>
          <MESSAGE>'buffer'은(는) NULL일 수 있습니다.</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>utils.c</FILENAME>
        <LINE>246</LINE>
        <COLUMN>11</COLUMN>
        <KEYEVENT>
          <ID>2</ID>
          <KIND>사용법</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>'buffer'은(는) 'sprintf'(c:\program files (x86)\windows kits\10\include\10.0.19041.0\ucrt\stdio.h:1764에서 선언됨)에 대한 입력입니다.</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>utils.c</FILENAME>
        <LINE>246</LINE>
        <COLUMN>11</COLUMN>
        <KEYEVENT>
          <ID>3</ID>
          <KIND>사용법</KIND>
          <IMPORTANCE>Essential</IMPORTANCE>
          <MESSAGE>'buffer'은(는) NULL(이)면 안 됩니다. 이는 'sprintf'의 SAL 주석과 일치하지 않습니다.</MESSAGE>
        </KEYEVENT>
      </SFA>
    </PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>utils.c</FILENAME>
      <LINE>249</LINE>
      <COLUMN>8</COLUMN>
    </SFA>
    <DEFECTCODE>6387</DEFECTCODE>
    <DESCRIPTION>'buffer'이(가) '0'일 수 있습니다.  이 경우 'strlen' 함수의 사양과 일치하지 않습니다. 이 오류가 발생할 수 있는 이전 위치는 줄 246을(를) 참조하십시오.</DESCRIPTION>
    <FUNCTION>find_replace_extension</FUNCTION>
    <DECORATED>find_replace_extension</DECORATED>
    <FUNCLINE>242</FUNCLINE>
    <PROBABILITY>1</PROBABILITY>
    <RANK>4</RANK>
    <CATEGORY>
      <RULECATEGORY>mspft</RULECATEGORY>
    </CATEGORY>
    <PATH>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>utils.c</FILENAME>
        <LINE>244</LINE>
        <COLUMN>10</COLUMN>
        <KEYEVENT>
          <ID>1</ID>
          <KIND>선언</KIND>
          <IMPORTANCE>Essential</IMPORTANCE>
          <MESSAGE>'buffer'은(는) NULL일 수 있습니다.</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>utils.c</FILENAME>
        <LINE>246</LINE>
        <COLUMN>11</COLUMN>
        <KEYEVENT>
          <ID>2</ID>
          <KIND>사용법</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>'buffer'은(는) 'sprintf'(c:\program files (x86)\windows kits\10\include\10.0.19041.0\ucrt\stdio.h:1764에서 선언됨)에 대한 입력입니다.</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>utils.c</FILENAME>
        <LINE>247</LINE>
        <COLUMN>10</COLUMN>
        <KEYEVENT>
          <ID>3</ID>
          <KIND>사용법</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>'buffer'은(는) 'strstr'(c:\program files (x86)\microsoft visual studio\2019\community\vc\tools\msvc\14.28.29910\include\vcruntime_string.h:82에서 선언됨)에 대한 입력입니다.</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>utils.c</FILENAME>
        <LINE>248</LINE>
        <COLUMN>8</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>utils.c</FILENAME>
        <LINE>249</LINE>
        <COLUMN>8</COLUMN>
        <KEYEVENT>
          <ID>4</ID>
          <KIND>사용법</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>'buffer'은(는) 'strlen'(&lt;no file&gt;:0에서 선언됨)에 대한 입력입니다.</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>utils.c</FILENAME>
        <LINE>249</LINE>
        <COLUMN>8</COLUMN>
        <KEYEVENT>
          <ID>5</ID>
          <KIND>사용법</KIND>
          <IMPORTANCE>Essential</IMPORTANCE>
          <MESSAGE>'buffer'은(는) NULL(이)면 안 됩니다. 이는 'strlen'의 SAL 주석과 일치하지 않습니다.</MESSAGE>
        </KEYEVENT>
      </SFA>
    </PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>utils.c</FILENAME>
      <LINE>381</LINE>
      <COLUMN>45</COLUMN>
    </SFA>
    <DEFECTCODE>6287</DEFECTCODE>
    <DESCRIPTION>코드가 중복됩니다.  왼쪽 부분식과 오른쪽 부분식이 동일합니다.</DESCRIPTION>
    <FUNCTION>strip</FUNCTION>
    <DECORATED>strip</DECORATED>
    <FUNCLINE>374</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>utils.c</FILENAME>
      <LINE>395</LINE>
      <COLUMN>48</COLUMN>
    </SFA>
    <DEFECTCODE>6287</DEFECTCODE>
    <DESCRIPTION>코드가 중복됩니다.  왼쪽 부분식과 오른쪽 부분식이 동일합니다.</DESCRIPTION>
    <FUNCTION>strip_args</FUNCTION>
    <DECORATED>strip_args</DECORATED>
    <FUNCLINE>388</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>utils.c</FILENAME>
      <LINE>631</LINE>
      <COLUMN>47</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '-' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '-' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>dist_array</FUNCTION>
    <DECORATED>dist_array</DECORATED>
    <FUNCLINE>627</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>utils.c</FILENAME>
      <LINE>983</LINE>
      <COLUMN>35</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '-' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '-' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>random_index_order</FUNCTION>
    <DECORATED>random_index_order</DECORATED>
    <FUNCLINE>981</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>voxel.c</FILENAME>
      <LINE>129</LINE>
      <COLUMN>18</COLUMN>
    </SFA>
    <DEFECTCODE>6031</DEFECTCODE>
    <DESCRIPTION>반환 값이 무시되었습니다. 'strtok'.</DESCRIPTION>
    <FUNCTION>test_voxel</FUNCTION>
    <DECORATED>test_voxel</DECORATED>
    <FUNCLINE>109</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>writing.c</FILENAME>
      <LINE>68</LINE>
      <COLUMN>14</COLUMN>
    </SFA>
    <DEFECTCODE>6328</DEFECTCODE>
    <DESCRIPTION>크기 불일치: 'unsigned __int64'이(가) _Param_(8)으로 전달되었습니다. 다음 호출에는 'int'이(가) 필요합니다. 'printf'. </DESCRIPTION>
    <FUNCTION>train_writing</FUNCTION>
    <DECORATED>train_writing</DECORATED>
    <FUNCLINE>5</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>writing.c</FILENAME>
      <LINE>103</LINE>
      <COLUMN>18</COLUMN>
    </SFA>
    <DEFECTCODE>6031</DEFECTCODE>
    <DESCRIPTION>반환 값이 무시되었습니다. 'strtok'.</DESCRIPTION>
    <FUNCTION>test_writing</FUNCTION>
    <DECORATED>test_writing</DECORATED>
    <FUNCLINE>84</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>yolo.c</FILENAME>
      <LINE>204</LINE>
      <COLUMN>9</COLUMN>
    </SFA>
    <DEFECTCODE>6001</DEFECTCODE>
    <DESCRIPTION>초기화되지 않은 메모리 'fps'을(를) 사용하고 있습니다.</DESCRIPTION>
    <FUNCTION>validate_yolo</FUNCTION>
    <DECORATED>validate_yolo</DECORATED>
    <FUNCLINE>107</FUNCLINE>
    <PROBABILITY>1</PROBABILITY>
    <RANK>3</RANK>
    <CATEGORY>
      <RULECATEGORY>mspft</RULECATEGORY>
    </CATEGORY>
    <PATH>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo.c</FILENAME>
        <LINE>109</LINE>
        <COLUMN>12</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo.c</FILENAME>
        <LINE>110</LINE>
        <COLUMN>7</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo.c</FILENAME>
        <LINE>113</LINE>
        <COLUMN>21</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo.c</FILENAME>
        <LINE>114</LINE>
        <COLUMN>11</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo.c</FILENAME>
        <LINE>115</LINE>
        <COLUMN>9</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo.c</FILENAME>
        <LINE>117</LINE>
        <COLUMN>10</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo.c</FILENAME>
        <LINE>119</LINE>
        <COLUMN>10</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo.c</FILENAME>
        <LINE>121</LINE>
        <COLUMN>11</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo.c</FILENAME>
        <LINE>123</LINE>
        <COLUMN>10</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo.c</FILENAME>
        <LINE>124</LINE>
        <COLUMN>8</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo.c</FILENAME>
        <LINE>126</LINE>
        <COLUMN>8</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo.c</FILENAME>
        <LINE>127</LINE>
        <COLUMN>11</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo.c</FILENAME>
        <LINE>128</LINE>
        <COLUMN>10</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo.c</FILENAME>
        <LINE>128</LINE>
        <COLUMN>17</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo.c</FILENAME>
        <LINE>133</LINE>
        <COLUMN>9</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo.c</FILENAME>
        <LINE>134</LINE>
        <COLUMN>12</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo.c</FILENAME>
        <LINE>135</LINE>
        <COLUMN>10</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo.c</FILENAME>
        <LINE>135</LINE>
        <COLUMN>17</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo.c</FILENAME>
        <LINE>137</LINE>
        <COLUMN>8</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo.c</FILENAME>
        <LINE>138</LINE>
        <COLUMN>8</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo.c</FILENAME>
        <LINE>139</LINE>
        <COLUMN>8</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo.c</FILENAME>
        <LINE>141</LINE>
        <COLUMN>10</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo.c</FILENAME>
        <LINE>142</LINE>
        <COLUMN>8</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo.c</FILENAME>
        <LINE>143</LINE>
        <COLUMN>10</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo.c</FILENAME>
        <LINE>145</LINE>
        <COLUMN>8</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo.c</FILENAME>
        <LINE>146</LINE>
        <COLUMN>11</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo.c</FILENAME>
        <LINE>147</LINE>
        <COLUMN>11</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo.c</FILENAME>
        <LINE>148</LINE>
        <COLUMN>11</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo.c</FILENAME>
        <LINE>149</LINE>
        <COLUMN>11</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo.c</FILENAME>
        <LINE>150</LINE>
        <COLUMN>15</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo.c</FILENAME>
        <LINE>152</LINE>
        <COLUMN>14</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo.c</FILENAME>
        <LINE>153</LINE>
        <COLUMN>11</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo.c</FILENAME>
        <LINE>154</LINE>
        <COLUMN>11</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo.c</FILENAME>
        <LINE>155</LINE>
        <COLUMN>14</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo.c</FILENAME>
        <LINE>157</LINE>
        <COLUMN>10</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo.c</FILENAME>
        <LINE>157</LINE>
        <COLUMN>17</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo.c</FILENAME>
        <LINE>158</LINE>
        <COLUMN>18</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo.c</FILENAME>
        <LINE>159</LINE>
        <COLUMN>16</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo.c</FILENAME>
        <LINE>160</LINE>
        <COLUMN>21</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo.c</FILENAME>
        <LINE>161</LINE>
        <COLUMN>15</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo.c</FILENAME>
        <LINE>157</LINE>
        <COLUMN>29</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo.c</FILENAME>
        <LINE>157</LINE>
        <COLUMN>17</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo.c</FILENAME>
        <LINE>158</LINE>
        <COLUMN>18</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo.c</FILENAME>
        <LINE>159</LINE>
        <COLUMN>16</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo.c</FILENAME>
        <LINE>160</LINE>
        <COLUMN>21</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo.c</FILENAME>
        <LINE>161</LINE>
        <COLUMN>15</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo.c</FILENAME>
        <LINE>157</LINE>
        <COLUMN>29</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo.c</FILENAME>
        <LINE>157</LINE>
        <COLUMN>17</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo.c</FILENAME>
        <LINE>163</LINE>
        <COLUMN>11</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo.c</FILENAME>
        <LINE>164</LINE>
        <COLUMN>10</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo.c</FILENAME>
        <LINE>164</LINE>
        <COLUMN>24</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo.c</FILENAME>
        <LINE>193</LINE>
        <COLUMN>8</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo.c</FILENAME>
        <LINE>193</LINE>
        <COLUMN>17</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo.c</FILENAME>
        <LINE>194</LINE>
        <COLUMN>8</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo.c</FILENAME>
        <LINE>195</LINE>
        <COLUMN>8</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo.c</FILENAME>
        <LINE>196</LINE>
        <COLUMN>8</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo.c</FILENAME>
        <LINE>197</LINE>
        <COLUMN>8</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo.c</FILENAME>
        <LINE>198</LINE>
        <COLUMN>8</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo.c</FILENAME>
        <LINE>200</LINE>
        <COLUMN>11</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo.c</FILENAME>
        <LINE>201</LINE>
        <COLUMN>10</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo.c</FILENAME>
        <LINE>201</LINE>
        <COLUMN>17</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo.c</FILENAME>
        <LINE>204</LINE>
        <COLUMN>8</COLUMN>
        <KEYEVENT>
          <ID>1</ID>
          <KIND>선언</KIND>
          <IMPORTANCE>Essential</IMPORTANCE>
          <MESSAGE>'fps'이(가) 초기화되지 않았습니다.</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo.c</FILENAME>
        <LINE>204</LINE>
        <COLUMN>9</COLUMN>
        <KEYEVENT>
          <ID>2</ID>
          <KIND>사용법</KIND>
          <IMPORTANCE>Essential</IMPORTANCE>
          <MESSAGE>'fps'이(가) 사용되는데 초기화되지 않았을 수 있습니다.</MESSAGE>
        </KEYEVENT>
      </SFA>
    </PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>yolo.c</FILENAME>
      <LINE>133</LINE>
      <COLUMN>47</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>validate_yolo</FUNCTION>
    <DECORATED>validate_yolo</DECORATED>
    <FUNCLINE>107</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>yolo.c</FILENAME>
      <LINE>133</LINE>
      <COLUMN>38</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>validate_yolo</FUNCTION>
    <DECORATED>validate_yolo</DECORATED>
    <FUNCLINE>107</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>yolo.c</FILENAME>
      <LINE>134</LINE>
      <COLUMN>53</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>validate_yolo</FUNCTION>
    <DECORATED>validate_yolo</DECORATED>
    <FUNCLINE>107</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>yolo.c</FILENAME>
      <LINE>134</LINE>
      <COLUMN>44</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>validate_yolo</FUNCTION>
    <DECORATED>validate_yolo</DECORATED>
    <FUNCLINE>107</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>yolo.c</FILENAME>
      <LINE>225</LINE>
      <COLUMN>43</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>validate_yolo_recall</FUNCTION>
    <DECORATED>validate_yolo_recall</DECORATED>
    <FUNCLINE>207</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>yolo.c</FILENAME>
      <LINE>225</LINE>
      <COLUMN>36</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>validate_yolo_recall</FUNCTION>
    <DECORATED>validate_yolo_recall</DECORATED>
    <FUNCLINE>207</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>yolo.c</FILENAME>
      <LINE>226</LINE>
      <COLUMN>49</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>validate_yolo_recall</FUNCTION>
    <DECORATED>validate_yolo_recall</DECORATED>
    <FUNCLINE>207</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>yolo.c</FILENAME>
      <LINE>226</LINE>
      <COLUMN>42</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>validate_yolo_recall</FUNCTION>
    <DECORATED>validate_yolo_recall</DECORATED>
    <FUNCLINE>207</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>yolo.c</FILENAME>
      <LINE>312</LINE>
      <COLUMN>18</COLUMN>
    </SFA>
    <DEFECTCODE>6031</DEFECTCODE>
    <DESCRIPTION>반환 값이 무시되었습니다. 'strtok'.</DESCRIPTION>
    <FUNCTION>test_yolo</FUNCTION>
    <DECORATED>test_yolo</DECORATED>
    <FUNCLINE>285</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>yolo.c</FILENAME>
      <LINE>299</LINE>
      <COLUMN>47</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>test_yolo</FUNCTION>
    <DECORATED>test_yolo</DECORATED>
    <FUNCLINE>285</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>yolo.c</FILENAME>
      <LINE>299</LINE>
      <COLUMN>38</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>test_yolo</FUNCTION>
    <DECORATED>test_yolo</DECORATED>
    <FUNCLINE>285</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>yolo.c</FILENAME>
      <LINE>300</LINE>
      <COLUMN>53</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>test_yolo</FUNCTION>
    <DECORATED>test_yolo</DECORATED>
    <FUNCLINE>285</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>yolo.c</FILENAME>
      <LINE>300</LINE>
      <COLUMN>44</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>test_yolo</FUNCTION>
    <DECORATED>test_yolo</DECORATED>
    <FUNCLINE>285</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>yolo_layer.c</FILENAME>
      <LINE>33</LINE>
      <COLUMN>37</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_yolo_layer</FUNCTION>
    <DECORATED>make_yolo_layer</DECORATED>
    <FUNCLINE>16</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>yolo_layer.c</FILENAME>
      <LINE>41</LINE>
      <COLUMN>39</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_yolo_layer</FUNCTION>
    <DECORATED>make_yolo_layer</DECORATED>
    <FUNCLINE>16</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>yolo_layer.c</FILENAME>
      <LINE>47</LINE>
      <COLUMN>44</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_yolo_layer</FUNCTION>
    <DECORATED>make_yolo_layer</DECORATED>
    <FUNCLINE>16</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>yolo_layer.c</FILENAME>
      <LINE>47</LINE>
      <COLUMN>40</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_yolo_layer</FUNCTION>
    <DECORATED>make_yolo_layer</DECORATED>
    <FUNCLINE>16</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>yolo_layer.c</FILENAME>
      <LINE>47</LINE>
      <COLUMN>35</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_yolo_layer</FUNCTION>
    <DECORATED>make_yolo_layer</DECORATED>
    <FUNCLINE>16</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>yolo_layer.c</FILENAME>
      <LINE>49</LINE>
      <COLUMN>47</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_yolo_layer</FUNCTION>
    <DECORATED>make_yolo_layer</DECORATED>
    <FUNCLINE>16</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>yolo_layer.c</FILENAME>
      <LINE>49</LINE>
      <COLUMN>43</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_yolo_layer</FUNCTION>
    <DECORATED>make_yolo_layer</DECORATED>
    <FUNCLINE>16</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>yolo_layer.c</FILENAME>
      <LINE>49</LINE>
      <COLUMN>38</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_yolo_layer</FUNCTION>
    <DECORATED>make_yolo_layer</DECORATED>
    <FUNCLINE>16</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>yolo_layer.c</FILENAME>
      <LINE>52</LINE>
      <COLUMN>36</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_yolo_layer</FUNCTION>
    <DECORATED>make_yolo_layer</DECORATED>
    <FUNCLINE>16</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>yolo_layer.c</FILENAME>
      <LINE>53</LINE>
      <COLUMN>37</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_yolo_layer</FUNCTION>
    <DECORATED>make_yolo_layer</DECORATED>
    <FUNCLINE>16</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>yolo_layer.c</FILENAME>
      <LINE>96</LINE>
      <COLUMN>122</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>resize_yolo_layer</FUNCTION>
    <DECORATED>resize_yolo_layer</DECORATED>
    <FUNCLINE>88</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>yolo_layer.c</FILENAME>
      <LINE>96</LINE>
      <COLUMN>115</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>resize_yolo_layer</FUNCTION>
    <DECORATED>resize_yolo_layer</DECORATED>
    <FUNCLINE>88</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>yolo_layer.c</FILENAME>
      <LINE>96</LINE>
      <COLUMN>108</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>resize_yolo_layer</FUNCTION>
    <DECORATED>resize_yolo_layer</DECORATED>
    <FUNCLINE>88</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>yolo_layer.c</FILENAME>
      <LINE>96</LINE>
      <COLUMN>88</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>resize_yolo_layer</FUNCTION>
    <DECORATED>resize_yolo_layer</DECORATED>
    <FUNCLINE>88</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>yolo_layer.c</FILENAME>
      <LINE>97</LINE>
      <COLUMN>80</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>resize_yolo_layer</FUNCTION>
    <DECORATED>resize_yolo_layer</DECORATED>
    <FUNCLINE>88</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>yolo_layer.c</FILENAME>
      <LINE>97</LINE>
      <COLUMN>73</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>resize_yolo_layer</FUNCTION>
    <DECORATED>resize_yolo_layer</DECORATED>
    <FUNCLINE>88</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>yolo_layer.c</FILENAME>
      <LINE>97</LINE>
      <COLUMN>66</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>resize_yolo_layer</FUNCTION>
    <DECORATED>resize_yolo_layer</DECORATED>
    <FUNCLINE>88</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>yolo_layer.c</FILENAME>
      <LINE>98</LINE>
      <COLUMN>89</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>resize_yolo_layer</FUNCTION>
    <DECORATED>resize_yolo_layer</DECORATED>
    <FUNCLINE>88</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>yolo_layer.c</FILENAME>
      <LINE>98</LINE>
      <COLUMN>82</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>resize_yolo_layer</FUNCTION>
    <DECORATED>resize_yolo_layer</DECORATED>
    <FUNCLINE>88</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>yolo_layer.c</FILENAME>
      <LINE>98</LINE>
      <COLUMN>75</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>resize_yolo_layer</FUNCTION>
    <DECORATED>resize_yolo_layer</DECORATED>
    <FUNCLINE>88</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>yolo_layer.c</FILENAME>
      <LINE>100</LINE>
      <COLUMN>75</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>resize_yolo_layer</FUNCTION>
    <DECORATED>resize_yolo_layer</DECORATED>
    <FUNCLINE>88</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>yolo_layer.c</FILENAME>
      <LINE>101</LINE>
      <COLUMN>72</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>resize_yolo_layer</FUNCTION>
    <DECORATED>resize_yolo_layer</DECORATED>
    <FUNCLINE>88</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>yolo_layer.c</FILENAME>
      <LINE>436</LINE>
      <COLUMN>55</COLUMN>
    </SFA>
    <DEFECTCODE>6031</DEFECTCODE>
    <DESCRIPTION>반환 값이 무시되었습니다. 'getchar'.</DESCRIPTION>
    <FUNCTION>process_batch</FUNCTION>
    <DECORATED>process_batch</DECORATED>
    <FUNCLINE>389</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>yolo_layer.c</FILENAME>
      <LINE>430</LINE>
      <COLUMN>72</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>process_batch</FUNCTION>
    <DECORATED>process_batch</DECORATED>
    <FUNCLINE>389</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>yolo_layer.c</FILENAME>
      <LINE>430</LINE>
      <COLUMN>91</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>process_batch</FUNCTION>
    <DECORATED>process_batch</DECORATED>
    <FUNCLINE>389</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>yolo_layer.c</FILENAME>
      <LINE>473</LINE>
      <COLUMN>71</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>process_batch</FUNCTION>
    <DECORATED>process_batch</DECORATED>
    <FUNCLINE>389</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>yolo_layer.c</FILENAME>
      <LINE>481</LINE>
      <COLUMN>75</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>process_batch</FUNCTION>
    <DECORATED>process_batch</DECORATED>
    <FUNCLINE>389</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>yolo_layer.c</FILENAME>
      <LINE>501</LINE>
      <COLUMN>77</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>process_batch</FUNCTION>
    <DECORATED>process_batch</DECORATED>
    <FUNCLINE>389</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>yolo_layer.c</FILENAME>
      <LINE>501</LINE>
      <COLUMN>96</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>process_batch</FUNCTION>
    <DECORATED>process_batch</DECORATED>
    <FUNCLINE>389</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>yolo_layer.c</FILENAME>
      <LINE>509</LINE>
      <COLUMN>60</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>process_batch</FUNCTION>
    <DECORATED>process_batch</DECORATED>
    <FUNCLINE>389</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>yolo_layer.c</FILENAME>
      <LINE>509</LINE>
      <COLUMN>79</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>process_batch</FUNCTION>
    <DECORATED>process_batch</DECORATED>
    <FUNCLINE>389</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>yolo_layer.c</FILENAME>
      <LINE>875</LINE>
      <COLUMN>14</COLUMN>
    </SFA>
    <DEFECTCODE>6387</DEFECTCODE>
    <DESCRIPTION>'no_iou_loss_delta'이(가) '0'일 수 있습니다.  이 경우 'memcpy' 함수의 사양과 일치하지 않습니다. </DESCRIPTION>
    <FUNCTION>forward_yolo_layer</FUNCTION>
    <DECORATED>forward_yolo_layer</DECORATED>
    <FUNCLINE>664</FUNCLINE>
    <PROBABILITY>1</PROBABILITY>
    <RANK>4</RANK>
    <CATEGORY>
      <RULECATEGORY>mspft</RULECATEGORY>
    </CATEGORY>
    <PATH>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo_layer.c</FILENAME>
        <LINE>667</LINE>
        <COLUMN>10</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo_layer.c</FILENAME>
        <LINE>668</LINE>
        <COLUMN>8</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo_layer.c</FILENAME>
        <LINE>668</LINE>
        <COLUMN>11</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo_layer.c</FILENAME>
        <LINE>671</LINE>
        <COLUMN>11</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo_layer.c</FILENAME>
        <LINE>671</LINE>
        <COLUMN>18</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo_layer.c</FILENAME>
        <LINE>688</LINE>
        <COLUMN>10</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo_layer.c</FILENAME>
        <LINE>689</LINE>
        <COLUMN>8</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo_layer.c</FILENAME>
        <LINE>691</LINE>
        <COLUMN>8</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo_layer.c</FILENAME>
        <LINE>692</LINE>
        <COLUMN>11</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo_layer.c</FILENAME>
        <LINE>692</LINE>
        <COLUMN>18</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo_layer.c</FILENAME>
        <LINE>693</LINE>
        <COLUMN>11</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo_layer.c</FILENAME>
        <LINE>693</LINE>
        <COLUMN>18</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo_layer.c</FILENAME>
        <LINE>695</LINE>
        <COLUMN>10</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo_layer.c</FILENAME>
        <LINE>696</LINE>
        <COLUMN>10</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo_layer.c</FILENAME>
        <LINE>697</LINE>
        <COLUMN>10</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo_layer.c</FILENAME>
        <LINE>698</LINE>
        <COLUMN>10</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo_layer.c</FILENAME>
        <LINE>699</LINE>
        <COLUMN>10</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo_layer.c</FILENAME>
        <LINE>700</LINE>
        <COLUMN>10</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo_layer.c</FILENAME>
        <LINE>701</LINE>
        <COLUMN>10</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo_layer.c</FILENAME>
        <LINE>702</LINE>
        <COLUMN>10</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo_layer.c</FILENAME>
        <LINE>703</LINE>
        <COLUMN>10</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo_layer.c</FILENAME>
        <LINE>704</LINE>
        <COLUMN>10</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo_layer.c</FILENAME>
        <LINE>705</LINE>
        <COLUMN>10</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo_layer.c</FILENAME>
        <LINE>706</LINE>
        <COLUMN>10</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo_layer.c</FILENAME>
        <LINE>707</LINE>
        <COLUMN>10</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo_layer.c</FILENAME>
        <LINE>708</LINE>
        <COLUMN>8</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo_layer.c</FILENAME>
        <LINE>709</LINE>
        <COLUMN>8</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo_layer.c</FILENAME>
        <LINE>710</LINE>
        <COLUMN>14</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo_layer.c</FILENAME>
        <LINE>713</LINE>
        <COLUMN>8</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo_layer.c</FILENAME>
        <LINE>714</LINE>
        <COLUMN>15</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo_layer.c</FILENAME>
        <LINE>716</LINE>
        <COLUMN>28</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo_layer.c</FILENAME>
        <LINE>718</LINE>
        <COLUMN>11</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo_layer.c</FILENAME>
        <LINE>718</LINE>
        <COLUMN>18</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo_layer.c</FILENAME>
        <LINE>733</LINE>
        <COLUMN>11</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo_layer.c</FILENAME>
        <LINE>733</LINE>
        <COLUMN>18</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo_layer.c</FILENAME>
        <LINE>744</LINE>
        <COLUMN>8</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo_layer.c</FILENAME>
        <LINE>745</LINE>
        <COLUMN>8</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo_layer.c</FILENAME>
        <LINE>748</LINE>
        <COLUMN>8</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo_layer.c</FILENAME>
        <LINE>749</LINE>
        <COLUMN>14</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo_layer.c</FILENAME>
        <LINE>753</LINE>
        <COLUMN>79</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo_layer.c</FILENAME>
        <LINE>858</LINE>
        <COLUMN>14</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo_layer.c</FILENAME>
        <LINE>858</LINE>
        <COLUMN>26</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo_layer.c</FILENAME>
        <LINE>859</LINE>
        <COLUMN>20</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo_layer.c</FILENAME>
        <LINE>859</LINE>
        <COLUMN>38</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo_layer.c</FILENAME>
        <LINE>861</LINE>
        <COLUMN>23</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo_layer.c</FILENAME>
        <LINE>873</LINE>
        <COLUMN>12</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo_layer.c</FILENAME>
        <LINE>874</LINE>
        <COLUMN>15</COLUMN>
        <KEYEVENT>
          <ID>1</ID>
          <KIND>선언</KIND>
          <IMPORTANCE>Essential</IMPORTANCE>
          <MESSAGE>'no_iou_loss_delta'은(는) NULL일 수 있습니다.</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo_layer.c</FILENAME>
        <LINE>875</LINE>
        <COLUMN>14</COLUMN>
        <KEYEVENT>
          <ID>2</ID>
          <KIND>선언</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>'no_iou_loss_delta'은(는) 'memcpy'(&lt;no file&gt;:0에서 선언됨)에 대한 In/Out 인수입니다.</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo_layer.c</FILENAME>
        <LINE>875</LINE>
        <COLUMN>14</COLUMN>
        <KEYEVENT>
          <ID>3</ID>
          <KIND>사용법</KIND>
          <IMPORTANCE>Essential</IMPORTANCE>
          <MESSAGE>'no_iou_loss_delta'은(는) NULL(이)면 안 됩니다. 이는 'memcpy'의 SAL 주석과 일치하지 않습니다.</MESSAGE>
        </KEYEVENT>
      </SFA>
    </PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>yolo_layer.c</FILENAME>
      <LINE>667</LINE>
      <COLUMN>43</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>forward_yolo_layer</FUNCTION>
    <DECORATED>forward_yolo_layer</DECORATED>
    <FUNCLINE>664</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>yolo_layer.c</FILENAME>
      <LINE>682</LINE>
      <COLUMN>69</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '-' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '-' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>forward_yolo_layer</FUNCTION>
    <DECORATED>forward_yolo_layer</DECORATED>
    <FUNCLINE>664</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>yolo_layer.c</FILENAME>
      <LINE>688</LINE>
      <COLUMN>33</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>forward_yolo_layer</FUNCTION>
    <DECORATED>forward_yolo_layer</DECORATED>
    <FUNCLINE>664</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>yolo_layer.c</FILENAME>
      <LINE>793</LINE>
      <COLUMN>46</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '-' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '-' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>forward_yolo_layer</FUNCTION>
    <DECORATED>forward_yolo_layer</DECORATED>
    <FUNCLINE>664</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>yolo_layer.c</FILENAME>
      <LINE>801</LINE>
      <COLUMN>92</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '-' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '-' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>forward_yolo_layer</FUNCTION>
    <DECORATED>forward_yolo_layer</DECORATED>
    <FUNCLINE>664</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>yolo_layer.c</FILENAME>
      <LINE>808</LINE>
      <COLUMN>139</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>forward_yolo_layer</FUNCTION>
    <DECORATED>forward_yolo_layer</DECORATED>
    <FUNCLINE>664</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>yolo_layer.c</FILENAME>
      <LINE>850</LINE>
      <COLUMN>157</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>forward_yolo_layer</FUNCTION>
    <DECORATED>forward_yolo_layer</DECORATED>
    <FUNCLINE>664</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>yolo_layer.c</FILENAME>
      <LINE>875</LINE>
      <COLUMN>51</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>forward_yolo_layer</FUNCTION>
    <DECORATED>forward_yolo_layer</DECORATED>
    <FUNCLINE>664</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>yolo_layer.c</FILENAME>
      <LINE>1085</LINE>
      <COLUMN>35</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '+' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '+' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>avg_flipped_yolo</FUNCTION>
    <DECORATED>avg_flipped_yolo</DECORATED>
    <FUNCLINE>1063</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\include\</FILEPATH>
      <FILENAME>yolo_v2_class.hpp</FILENAME>
      <LINE>194</LINE>
      <COLUMN>19</COLUMN>
    </SFA>
    <DEFECTCODE>6387</DEFECTCODE>
    <DESCRIPTION>'tmp_buf'이(가) '0'일 수 있습니다.  이 경우 'sprintf' 함수의 사양과 일치하지 않습니다. </DESCRIPTION>
    <FUNCTION>Detector::send_json_http</FUNCTION>
    <DECORATED>?send_json_http@Detector@@QEAA_NV?$vector@Ubbox_t@@V?$allocator@Ubbox_t@@@std@@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@3@HV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@HH@Z</DECORATED>
    <FUNCLINE>184</FUNCLINE>
    <PROBABILITY>1</PROBABILITY>
    <RANK>4</RANK>
    <CATEGORY>
      <RULECATEGORY>mspft</RULECATEGORY>
    </CATEGORY>
    <PATH>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\include\</FILEPATH>
        <FILENAME>yolo_v2_class.hpp</FILENAME>
        <LINE>187</LINE>
        <COLUMN>20</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\include\</FILEPATH>
        <FILENAME>yolo_v2_class.hpp</FILENAME>
        <LINE>189</LINE>
        <COLUMN>13</COLUMN>
        <KEYEVENT>
          <ID>1</ID>
          <KIND>선언</KIND>
          <IMPORTANCE>Essential</IMPORTANCE>
          <MESSAGE>'tmp_buf'은(는) NULL일 수 있습니다.</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\include\</FILEPATH>
        <FILENAME>yolo_v2_class.hpp</FILENAME>
        <LINE>190</LINE>
        <COLUMN>12</COLUMN>
        <KEYEVENT>
          <ID>2</ID>
          <KIND>분기</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>이 분기 건너뛰기, ('!filename.empty()'이(가) false라고 가정)</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\include\</FILEPATH>
        <FILENAME>yolo_v2_class.hpp</FILENAME>
        <LINE>194</LINE>
        <COLUMN>19</COLUMN>
        <KEYEVENT>
          <ID>3</ID>
          <KIND>사용법</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>'tmp_buf'은(는) 'sprintf'(c:\program files (x86)\windows kits\10\include\10.0.19041.0\ucrt\stdio.h:1764에서 선언됨)에 대한 입력입니다.</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\include\</FILEPATH>
        <FILENAME>yolo_v2_class.hpp</FILENAME>
        <LINE>194</LINE>
        <COLUMN>19</COLUMN>
        <KEYEVENT>
          <ID>4</ID>
          <KIND>사용법</KIND>
          <IMPORTANCE>Essential</IMPORTANCE>
          <MESSAGE>'tmp_buf'은(는) NULL(이)면 안 됩니다. 이는 'sprintf'의 SAL 주석과 일치하지 않습니다.</MESSAGE>
        </KEYEVENT>
      </SFA>
    </PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\include\</FILEPATH>
      <FILENAME>yolo_v2_class.hpp</FILENAME>
      <LINE>196</LINE>
      <COLUMN>17</COLUMN>
    </SFA>
    <DEFECTCODE>6387</DEFECTCODE>
    <DESCRIPTION>'tmp_buf'이(가) '0'일 수 있습니다.  이 경우 'std::basic_string&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt; &gt;::=' 함수의 사양과 일치하지 않습니다. 이 오류가 발생할 수 있는 이전 위치는 줄 194을(를) 참조하십시오.</DESCRIPTION>
    <FUNCTION>Detector::send_json_http</FUNCTION>
    <DECORATED>?send_json_http@Detector@@QEAA_NV?$vector@Ubbox_t@@V?$allocator@Ubbox_t@@@std@@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@3@HV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@HH@Z</DECORATED>
    <FUNCLINE>184</FUNCLINE>
    <PROBABILITY>1</PROBABILITY>
    <RANK>4</RANK>
    <CATEGORY>
      <RULECATEGORY>mspft</RULECATEGORY>
    </CATEGORY>
    <PATH>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\include\</FILEPATH>
        <FILENAME>yolo_v2_class.hpp</FILENAME>
        <LINE>187</LINE>
        <COLUMN>20</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\include\</FILEPATH>
        <FILENAME>yolo_v2_class.hpp</FILENAME>
        <LINE>189</LINE>
        <COLUMN>13</COLUMN>
        <KEYEVENT>
          <ID>1</ID>
          <KIND>선언</KIND>
          <IMPORTANCE>Essential</IMPORTANCE>
          <MESSAGE>'tmp_buf'은(는) NULL일 수 있습니다.</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\include\</FILEPATH>
        <FILENAME>yolo_v2_class.hpp</FILENAME>
        <LINE>190</LINE>
        <COLUMN>12</COLUMN>
        <KEYEVENT>
          <ID>2</ID>
          <KIND>분기</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>이 분기 건너뛰기, ('!filename.empty()'이(가) false라고 가정)</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\include\</FILEPATH>
        <FILENAME>yolo_v2_class.hpp</FILENAME>
        <LINE>194</LINE>
        <COLUMN>19</COLUMN>
        <KEYEVENT>
          <ID>3</ID>
          <KIND>사용법</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>'tmp_buf'은(는) 'sprintf'(c:\program files (x86)\windows kits\10\include\10.0.19041.0\ucrt\stdio.h:1764에서 선언됨)에 대한 입력입니다.</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\include\</FILEPATH>
        <FILENAME>yolo_v2_class.hpp</FILENAME>
        <LINE>196</LINE>
        <COLUMN>17</COLUMN>
        <KEYEVENT>
          <ID>4</ID>
          <KIND>사용법</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>'tmp_buf'은(는) 'std::basic_string&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt; &gt;::='(c:\program files (x86)\microsoft visual studio\2019\community\vc\tools\msvc\14.28.29910\include\xstring:2877에서 선언됨)에 대한 입력입니다.</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\include\</FILEPATH>
        <FILENAME>yolo_v2_class.hpp</FILENAME>
        <LINE>196</LINE>
        <COLUMN>17</COLUMN>
        <KEYEVENT>
          <ID>5</ID>
          <KIND>사용법</KIND>
          <IMPORTANCE>Essential</IMPORTANCE>
          <MESSAGE>'tmp_buf'은(는) NULL(이)면 안 됩니다. 이는 'std::basic_string&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt; &gt;::='의 SAL 주석과 일치하지 않습니다.</MESSAGE>
        </KEYEVENT>
      </SFA>
    </PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\include\</FILEPATH>
      <FILENAME>yolo_v2_class.hpp</FILENAME>
      <LINE>202</LINE>
      <COLUMN>19</COLUMN>
    </SFA>
    <DEFECTCODE>6387</DEFECTCODE>
    <DESCRIPTION>'buf'이(가) '0'일 수 있습니다.  이 경우 'sprintf' 함수의 사양과 일치하지 않습니다. </DESCRIPTION>
    <FUNCTION>Detector::send_json_http</FUNCTION>
    <DECORATED>?send_json_http@Detector@@QEAA_NV?$vector@Ubbox_t@@V?$allocator@Ubbox_t@@@std@@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@3@HV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@HH@Z</DECORATED>
    <FUNCLINE>184</FUNCLINE>
    <PROBABILITY>1</PROBABILITY>
    <RANK>4</RANK>
    <CATEGORY>
      <RULECATEGORY>mspft</RULECATEGORY>
    </CATEGORY>
    <PATH>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\include\</FILEPATH>
        <FILENAME>yolo_v2_class.hpp</FILENAME>
        <LINE>187</LINE>
        <COLUMN>20</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\include\</FILEPATH>
        <FILENAME>yolo_v2_class.hpp</FILENAME>
        <LINE>189</LINE>
        <COLUMN>13</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\include\</FILEPATH>
        <FILENAME>yolo_v2_class.hpp</FILENAME>
        <LINE>190</LINE>
        <COLUMN>12</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\include\</FILEPATH>
        <FILENAME>yolo_v2_class.hpp</FILENAME>
        <LINE>194</LINE>
        <COLUMN>19</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\include\</FILEPATH>
        <FILENAME>yolo_v2_class.hpp</FILENAME>
        <LINE>196</LINE>
        <COLUMN>17</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\include\</FILEPATH>
        <FILENAME>yolo_v2_class.hpp</FILENAME>
        <LINE>197</LINE>
        <COLUMN>12</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\include\</FILEPATH>
        <FILENAME>yolo_v2_class.hpp</FILENAME>
        <LINE>199</LINE>
        <COLUMN>24</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\include\</FILEPATH>
        <FILENAME>yolo_v2_class.hpp</FILENAME>
        <LINE>199</LINE>
        <COLUMN>18</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\include\</FILEPATH>
        <FILENAME>yolo_v2_class.hpp</FILENAME>
        <LINE>200</LINE>
        <COLUMN>17</COLUMN>
        <KEYEVENT>
          <ID>1</ID>
          <KIND>선언</KIND>
          <IMPORTANCE>Essential</IMPORTANCE>
          <MESSAGE>'buf'은(는) NULL일 수 있습니다.</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\include\</FILEPATH>
        <FILENAME>yolo_v2_class.hpp</FILENAME>
        <LINE>202</LINE>
        <COLUMN>19</COLUMN>
        <KEYEVENT>
          <ID>2</ID>
          <KIND>사용법</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>'buf'은(는) 'sprintf'(c:\program files (x86)\windows kits\10\include\10.0.19041.0\ucrt\stdio.h:1764에서 선언됨)에 대한 입력입니다.</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\include\</FILEPATH>
        <FILENAME>yolo_v2_class.hpp</FILENAME>
        <LINE>202</LINE>
        <COLUMN>19</COLUMN>
        <KEYEVENT>
          <ID>3</ID>
          <KIND>사용법</KIND>
          <IMPORTANCE>Essential</IMPORTANCE>
          <MESSAGE>'buf'은(는) NULL(이)면 안 됩니다. 이는 'sprintf'의 SAL 주석과 일치하지 않습니다.</MESSAGE>
        </KEYEVENT>
      </SFA>
    </PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\include\</FILEPATH>
      <FILENAME>yolo_v2_class.hpp</FILENAME>
      <LINE>208</LINE>
      <COLUMN>21</COLUMN>
    </SFA>
    <DEFECTCODE>6387</DEFECTCODE>
    <DESCRIPTION>'buf'이(가) '0'일 수 있습니다.  이 경우 'std::basic_string&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt; &gt;::+=' 함수의 사양과 일치하지 않습니다. 이 오류가 발생할 수 있는 이전 위치는 줄 202을(를) 참조하십시오.</DESCRIPTION>
    <FUNCTION>Detector::send_json_http</FUNCTION>
    <DECORATED>?send_json_http@Detector@@QEAA_NV?$vector@Ubbox_t@@V?$allocator@Ubbox_t@@@std@@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@3@HV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@HH@Z</DECORATED>
    <FUNCLINE>184</FUNCLINE>
    <PROBABILITY>1</PROBABILITY>
    <RANK>4</RANK>
    <CATEGORY>
      <RULECATEGORY>mspft</RULECATEGORY>
    </CATEGORY>
    <PATH>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\include\</FILEPATH>
        <FILENAME>yolo_v2_class.hpp</FILENAME>
        <LINE>187</LINE>
        <COLUMN>20</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\include\</FILEPATH>
        <FILENAME>yolo_v2_class.hpp</FILENAME>
        <LINE>189</LINE>
        <COLUMN>13</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\include\</FILEPATH>
        <FILENAME>yolo_v2_class.hpp</FILENAME>
        <LINE>190</LINE>
        <COLUMN>12</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\include\</FILEPATH>
        <FILENAME>yolo_v2_class.hpp</FILENAME>
        <LINE>194</LINE>
        <COLUMN>19</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\include\</FILEPATH>
        <FILENAME>yolo_v2_class.hpp</FILENAME>
        <LINE>196</LINE>
        <COLUMN>17</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\include\</FILEPATH>
        <FILENAME>yolo_v2_class.hpp</FILENAME>
        <LINE>197</LINE>
        <COLUMN>12</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\include\</FILEPATH>
        <FILENAME>yolo_v2_class.hpp</FILENAME>
        <LINE>199</LINE>
        <COLUMN>24</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\include\</FILEPATH>
        <FILENAME>yolo_v2_class.hpp</FILENAME>
        <LINE>199</LINE>
        <COLUMN>18</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\include\</FILEPATH>
        <FILENAME>yolo_v2_class.hpp</FILENAME>
        <LINE>200</LINE>
        <COLUMN>17</COLUMN>
        <KEYEVENT>
          <ID>1</ID>
          <KIND>선언</KIND>
          <IMPORTANCE>Essential</IMPORTANCE>
          <MESSAGE>'buf'은(는) NULL일 수 있습니다.</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\include\</FILEPATH>
        <FILENAME>yolo_v2_class.hpp</FILENAME>
        <LINE>202</LINE>
        <COLUMN>19</COLUMN>
        <KEYEVENT>
          <ID>2</ID>
          <KIND>사용법</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>'buf'은(는) 'sprintf'(c:\program files (x86)\windows kits\10\include\10.0.19041.0\ucrt\stdio.h:1764에서 선언됨)에 대한 입력입니다.</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\include\</FILEPATH>
        <FILENAME>yolo_v2_class.hpp</FILENAME>
        <LINE>208</LINE>
        <COLUMN>21</COLUMN>
        <KEYEVENT>
          <ID>3</ID>
          <KIND>사용법</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>'buf'은(는) 'std::basic_string&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt; &gt;::+='(c:\program files (x86)\microsoft visual studio\2019\community\vc\tools\msvc\14.28.29910\include\xstring:2900에서 선언됨)에 대한 입력입니다.</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\include\</FILEPATH>
        <FILENAME>yolo_v2_class.hpp</FILENAME>
        <LINE>208</LINE>
        <COLUMN>21</COLUMN>
        <KEYEVENT>
          <ID>4</ID>
          <KIND>사용법</KIND>
          <IMPORTANCE>Essential</IMPORTANCE>
          <MESSAGE>'buf'은(는) NULL(이)면 안 됩니다. 이는 'std::basic_string&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt; &gt;::+='의 SAL 주석과 일치하지 않습니다.</MESSAGE>
        </KEYEVENT>
      </SFA>
    </PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>yolo_v2_class.cpp</FILENAME>
      <LINE>172</LINE>
      <COLUMN>61</COLUMN>
    </SFA>
    <DEFECTCODE>6011</DEFECTCODE>
    <DESCRIPTION>NULL 포인터 'detector_gpu.track_id'을(를) 역참조하고 있습니다. </DESCRIPTION>
    <FUNCTION>Detector::{ctor}</FUNCTION>
    <DECORATED>??0Detector@@QEAA@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0H@Z</DECORATED>
    <FUNCLINE>130</FUNCLINE>
    <PROBABILITY>1</PROBABILITY>
    <RANK>4</RANK>
    <CATEGORY>
      <RULECATEGORY>mspft</RULECATEGORY>
    </CATEGORY>
    <PATH>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo_v2_class.cpp</FILENAME>
        <LINE>131</LINE>
        <COLUMN>0</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo_v2_class.cpp</FILENAME>
        <LINE>130</LINE>
        <COLUMN>106</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\include\</FILEPATH>
        <FILENAME>yolo_v2_class.hpp</FILENAME>
        <LINE>76</LINE>
        <COLUMN>16</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo_v2_class.cpp</FILENAME>
        <LINE>132</LINE>
        <COLUMN>16</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo_v2_class.cpp</FILENAME>
        <LINE>138</LINE>
        <COLUMN>21</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo_v2_class.cpp</FILENAME>
        <LINE>138</LINE>
        <COLUMN>28</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo_v2_class.cpp</FILENAME>
        <LINE>138</LINE>
        <COLUMN>21</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo_v2_class.cpp</FILENAME>
        <LINE>139</LINE>
        <COLUMN>19</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo_v2_class.cpp</FILENAME>
        <LINE>146</LINE>
        <COLUMN>12</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo_v2_class.cpp</FILENAME>
        <LINE>147</LINE>
        <COLUMN>18</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo_v2_class.cpp</FILENAME>
        <LINE>150</LINE>
        <COLUMN>18</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo_v2_class.cpp</FILENAME>
        <LINE>151</LINE>
        <COLUMN>21</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo_v2_class.cpp</FILENAME>
        <LINE>153</LINE>
        <COLUMN>9</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo_v2_class.cpp</FILENAME>
        <LINE>154</LINE>
        <COLUMN>9</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo_v2_class.cpp</FILENAME>
        <LINE>156</LINE>
        <COLUMN>8</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo_v2_class.cpp</FILENAME>
        <LINE>157</LINE>
        <COLUMN>8</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo_v2_class.cpp</FILENAME>
        <LINE>158</LINE>
        <COLUMN>20</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo_v2_class.cpp</FILENAME>
        <LINE>160</LINE>
        <COLUMN>21</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo_v2_class.cpp</FILENAME>
        <LINE>161</LINE>
        <COLUMN>18</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo_v2_class.cpp</FILENAME>
        <LINE>162</LINE>
        <COLUMN>23</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo_v2_class.cpp</FILENAME>
        <LINE>164</LINE>
        <COLUMN>10</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo_v2_class.cpp</FILENAME>
        <LINE>165</LINE>
        <COLUMN>8</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo_v2_class.cpp</FILENAME>
        <LINE>167</LINE>
        <COLUMN>21</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo_v2_class.cpp</FILENAME>
        <LINE>168</LINE>
        <COLUMN>11</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo_v2_class.cpp</FILENAME>
        <LINE>168</LINE>
        <COLUMN>18</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo_v2_class.cpp</FILENAME>
        <LINE>168</LINE>
        <COLUMN>62</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo_v2_class.cpp</FILENAME>
        <LINE>168</LINE>
        <COLUMN>29</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo_v2_class.cpp</FILENAME>
        <LINE>168</LINE>
        <COLUMN>18</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo_v2_class.cpp</FILENAME>
        <LINE>168</LINE>
        <COLUMN>62</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo_v2_class.cpp</FILENAME>
        <LINE>168</LINE>
        <COLUMN>29</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo_v2_class.cpp</FILENAME>
        <LINE>168</LINE>
        <COLUMN>18</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo_v2_class.cpp</FILENAME>
        <LINE>169</LINE>
        <COLUMN>11</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo_v2_class.cpp</FILENAME>
        <LINE>169</LINE>
        <COLUMN>18</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo_v2_class.cpp</FILENAME>
        <LINE>169</LINE>
        <COLUMN>57</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo_v2_class.cpp</FILENAME>
        <LINE>169</LINE>
        <COLUMN>29</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo_v2_class.cpp</FILENAME>
        <LINE>169</LINE>
        <COLUMN>18</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo_v2_class.cpp</FILENAME>
        <LINE>169</LINE>
        <COLUMN>57</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo_v2_class.cpp</FILENAME>
        <LINE>169</LINE>
        <COLUMN>29</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo_v2_class.cpp</FILENAME>
        <LINE>169</LINE>
        <COLUMN>18</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo_v2_class.cpp</FILENAME>
        <LINE>171</LINE>
        <COLUMN>26</COLUMN>
        <KEYEVENT>
          <ID>1</ID>
          <KIND>선언</KIND>
          <IMPORTANCE>Essential</IMPORTANCE>
          <MESSAGE>'detector_gpu.track_id'은(는) NULL일 수 있습니다.</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo_v2_class.cpp</FILENAME>
        <LINE>172</LINE>
        <COLUMN>11</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo_v2_class.cpp</FILENAME>
        <LINE>172</LINE>
        <COLUMN>18</COLUMN>
        <KEYEVENT>
          <ID>2</ID>
          <KIND>분기</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>이 루프 시작, ('j&lt;l.classes' 가정)</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo_v2_class.cpp</FILENAME>
        <LINE>172</LINE>
        <COLUMN>61</COLUMN>
        <KEYEVENT>
          <ID>3</ID>
          <KIND>사용법</KIND>
          <IMPORTANCE>Essential</IMPORTANCE>
          <MESSAGE>'detector_gpu.track_id'이(가) 역참조되었지만 여전히 NULL일 수 있습니다.</MESSAGE>
        </KEYEVENT>
      </SFA>
    </PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>yolo_v2_class.cpp</FILENAME>
      <LINE>293</LINE>
      <COLUMN>45</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>Detector::detect</FUNCTION>
    <DECORATED>?detect@Detector@@QEAA?AV?$vector@Ubbox_t@@V?$allocator@Ubbox_t@@@std@@@std@@Uimage_t@@M_N@Z</DECORATED>
    <FUNCLINE>269</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>yolo_v2_class.cpp</FILENAME>
      <LINE>293</LINE>
      <COLUMN>40</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>Detector::detect</FUNCTION>
    <DECORATED>?detect@Detector@@QEAA?AV?$vector@Ubbox_t@@V?$allocator@Ubbox_t@@@std@@@std@@Uimage_t@@M_N@Z</DECORATED>
    <FUNCLINE>269</FUNCLINE>
    <PATH></PATH>
  </DEFECT></DEFECTS>