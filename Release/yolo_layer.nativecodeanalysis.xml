<?xml version="1.0" encoding="UTF-8"?>
<DEFECTS>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>activations.h</FILENAME>
      <LINE>72</LINE>
      <COLUMN>62</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '+' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '+' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>gelu_activate</FUNCTION>
    <DECORATED>gelu_activate</DECORATED>
    <FUNCLINE>72</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>yolo_layer.c</FILENAME>
      <LINE>33</LINE>
      <COLUMN>37</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_yolo_layer</FUNCTION>
    <DECORATED>make_yolo_layer</DECORATED>
    <FUNCLINE>16</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>yolo_layer.c</FILENAME>
      <LINE>41</LINE>
      <COLUMN>39</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_yolo_layer</FUNCTION>
    <DECORATED>make_yolo_layer</DECORATED>
    <FUNCLINE>16</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>yolo_layer.c</FILENAME>
      <LINE>47</LINE>
      <COLUMN>44</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_yolo_layer</FUNCTION>
    <DECORATED>make_yolo_layer</DECORATED>
    <FUNCLINE>16</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>yolo_layer.c</FILENAME>
      <LINE>47</LINE>
      <COLUMN>40</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_yolo_layer</FUNCTION>
    <DECORATED>make_yolo_layer</DECORATED>
    <FUNCLINE>16</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>yolo_layer.c</FILENAME>
      <LINE>47</LINE>
      <COLUMN>35</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_yolo_layer</FUNCTION>
    <DECORATED>make_yolo_layer</DECORATED>
    <FUNCLINE>16</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>yolo_layer.c</FILENAME>
      <LINE>49</LINE>
      <COLUMN>47</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_yolo_layer</FUNCTION>
    <DECORATED>make_yolo_layer</DECORATED>
    <FUNCLINE>16</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>yolo_layer.c</FILENAME>
      <LINE>49</LINE>
      <COLUMN>43</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_yolo_layer</FUNCTION>
    <DECORATED>make_yolo_layer</DECORATED>
    <FUNCLINE>16</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>yolo_layer.c</FILENAME>
      <LINE>49</LINE>
      <COLUMN>38</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_yolo_layer</FUNCTION>
    <DECORATED>make_yolo_layer</DECORATED>
    <FUNCLINE>16</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>yolo_layer.c</FILENAME>
      <LINE>52</LINE>
      <COLUMN>36</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_yolo_layer</FUNCTION>
    <DECORATED>make_yolo_layer</DECORATED>
    <FUNCLINE>16</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>yolo_layer.c</FILENAME>
      <LINE>53</LINE>
      <COLUMN>37</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>make_yolo_layer</FUNCTION>
    <DECORATED>make_yolo_layer</DECORATED>
    <FUNCLINE>16</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>yolo_layer.c</FILENAME>
      <LINE>96</LINE>
      <COLUMN>122</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>resize_yolo_layer</FUNCTION>
    <DECORATED>resize_yolo_layer</DECORATED>
    <FUNCLINE>88</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>yolo_layer.c</FILENAME>
      <LINE>96</LINE>
      <COLUMN>115</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>resize_yolo_layer</FUNCTION>
    <DECORATED>resize_yolo_layer</DECORATED>
    <FUNCLINE>88</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>yolo_layer.c</FILENAME>
      <LINE>96</LINE>
      <COLUMN>108</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>resize_yolo_layer</FUNCTION>
    <DECORATED>resize_yolo_layer</DECORATED>
    <FUNCLINE>88</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>yolo_layer.c</FILENAME>
      <LINE>96</LINE>
      <COLUMN>88</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>resize_yolo_layer</FUNCTION>
    <DECORATED>resize_yolo_layer</DECORATED>
    <FUNCLINE>88</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>yolo_layer.c</FILENAME>
      <LINE>97</LINE>
      <COLUMN>80</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>resize_yolo_layer</FUNCTION>
    <DECORATED>resize_yolo_layer</DECORATED>
    <FUNCLINE>88</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>yolo_layer.c</FILENAME>
      <LINE>97</LINE>
      <COLUMN>73</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>resize_yolo_layer</FUNCTION>
    <DECORATED>resize_yolo_layer</DECORATED>
    <FUNCLINE>88</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>yolo_layer.c</FILENAME>
      <LINE>97</LINE>
      <COLUMN>66</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>resize_yolo_layer</FUNCTION>
    <DECORATED>resize_yolo_layer</DECORATED>
    <FUNCLINE>88</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>yolo_layer.c</FILENAME>
      <LINE>98</LINE>
      <COLUMN>89</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>resize_yolo_layer</FUNCTION>
    <DECORATED>resize_yolo_layer</DECORATED>
    <FUNCLINE>88</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>yolo_layer.c</FILENAME>
      <LINE>98</LINE>
      <COLUMN>82</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>resize_yolo_layer</FUNCTION>
    <DECORATED>resize_yolo_layer</DECORATED>
    <FUNCLINE>88</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>yolo_layer.c</FILENAME>
      <LINE>98</LINE>
      <COLUMN>75</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>resize_yolo_layer</FUNCTION>
    <DECORATED>resize_yolo_layer</DECORATED>
    <FUNCLINE>88</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>yolo_layer.c</FILENAME>
      <LINE>100</LINE>
      <COLUMN>75</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>resize_yolo_layer</FUNCTION>
    <DECORATED>resize_yolo_layer</DECORATED>
    <FUNCLINE>88</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>yolo_layer.c</FILENAME>
      <LINE>101</LINE>
      <COLUMN>72</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>resize_yolo_layer</FUNCTION>
    <DECORATED>resize_yolo_layer</DECORATED>
    <FUNCLINE>88</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>yolo_layer.c</FILENAME>
      <LINE>436</LINE>
      <COLUMN>55</COLUMN>
    </SFA>
    <DEFECTCODE>6031</DEFECTCODE>
    <DESCRIPTION>반환 값이 무시되었습니다. 'getchar'.</DESCRIPTION>
    <FUNCTION>process_batch</FUNCTION>
    <DECORATED>process_batch</DECORATED>
    <FUNCLINE>389</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>yolo_layer.c</FILENAME>
      <LINE>430</LINE>
      <COLUMN>72</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>process_batch</FUNCTION>
    <DECORATED>process_batch</DECORATED>
    <FUNCLINE>389</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>yolo_layer.c</FILENAME>
      <LINE>430</LINE>
      <COLUMN>91</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>process_batch</FUNCTION>
    <DECORATED>process_batch</DECORATED>
    <FUNCLINE>389</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>yolo_layer.c</FILENAME>
      <LINE>473</LINE>
      <COLUMN>71</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>process_batch</FUNCTION>
    <DECORATED>process_batch</DECORATED>
    <FUNCLINE>389</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>yolo_layer.c</FILENAME>
      <LINE>481</LINE>
      <COLUMN>75</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>process_batch</FUNCTION>
    <DECORATED>process_batch</DECORATED>
    <FUNCLINE>389</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>yolo_layer.c</FILENAME>
      <LINE>501</LINE>
      <COLUMN>77</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>process_batch</FUNCTION>
    <DECORATED>process_batch</DECORATED>
    <FUNCLINE>389</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>yolo_layer.c</FILENAME>
      <LINE>501</LINE>
      <COLUMN>96</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>process_batch</FUNCTION>
    <DECORATED>process_batch</DECORATED>
    <FUNCLINE>389</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>yolo_layer.c</FILENAME>
      <LINE>509</LINE>
      <COLUMN>60</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>process_batch</FUNCTION>
    <DECORATED>process_batch</DECORATED>
    <FUNCLINE>389</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>yolo_layer.c</FILENAME>
      <LINE>509</LINE>
      <COLUMN>79</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>process_batch</FUNCTION>
    <DECORATED>process_batch</DECORATED>
    <FUNCLINE>389</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>yolo_layer.c</FILENAME>
      <LINE>875</LINE>
      <COLUMN>14</COLUMN>
    </SFA>
    <DEFECTCODE>6387</DEFECTCODE>
    <DESCRIPTION>'no_iou_loss_delta'이(가) '0'일 수 있습니다.  이 경우 'memcpy' 함수의 사양과 일치하지 않습니다. </DESCRIPTION>
    <FUNCTION>forward_yolo_layer</FUNCTION>
    <DECORATED>forward_yolo_layer</DECORATED>
    <FUNCLINE>664</FUNCLINE>
    <PROBABILITY>1</PROBABILITY>
    <RANK>4</RANK>
    <CATEGORY>
      <RULECATEGORY>mspft</RULECATEGORY>
    </CATEGORY>
    <PATH>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo_layer.c</FILENAME>
        <LINE>667</LINE>
        <COLUMN>10</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo_layer.c</FILENAME>
        <LINE>668</LINE>
        <COLUMN>8</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo_layer.c</FILENAME>
        <LINE>668</LINE>
        <COLUMN>11</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo_layer.c</FILENAME>
        <LINE>671</LINE>
        <COLUMN>11</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo_layer.c</FILENAME>
        <LINE>671</LINE>
        <COLUMN>18</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo_layer.c</FILENAME>
        <LINE>688</LINE>
        <COLUMN>10</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo_layer.c</FILENAME>
        <LINE>689</LINE>
        <COLUMN>8</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo_layer.c</FILENAME>
        <LINE>691</LINE>
        <COLUMN>8</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo_layer.c</FILENAME>
        <LINE>692</LINE>
        <COLUMN>11</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo_layer.c</FILENAME>
        <LINE>692</LINE>
        <COLUMN>18</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo_layer.c</FILENAME>
        <LINE>693</LINE>
        <COLUMN>11</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo_layer.c</FILENAME>
        <LINE>693</LINE>
        <COLUMN>18</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo_layer.c</FILENAME>
        <LINE>695</LINE>
        <COLUMN>10</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo_layer.c</FILENAME>
        <LINE>696</LINE>
        <COLUMN>10</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo_layer.c</FILENAME>
        <LINE>697</LINE>
        <COLUMN>10</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo_layer.c</FILENAME>
        <LINE>698</LINE>
        <COLUMN>10</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo_layer.c</FILENAME>
        <LINE>699</LINE>
        <COLUMN>10</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo_layer.c</FILENAME>
        <LINE>700</LINE>
        <COLUMN>10</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo_layer.c</FILENAME>
        <LINE>701</LINE>
        <COLUMN>10</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo_layer.c</FILENAME>
        <LINE>702</LINE>
        <COLUMN>10</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo_layer.c</FILENAME>
        <LINE>703</LINE>
        <COLUMN>10</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo_layer.c</FILENAME>
        <LINE>704</LINE>
        <COLUMN>10</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo_layer.c</FILENAME>
        <LINE>705</LINE>
        <COLUMN>10</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo_layer.c</FILENAME>
        <LINE>706</LINE>
        <COLUMN>10</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo_layer.c</FILENAME>
        <LINE>707</LINE>
        <COLUMN>10</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo_layer.c</FILENAME>
        <LINE>708</LINE>
        <COLUMN>8</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo_layer.c</FILENAME>
        <LINE>709</LINE>
        <COLUMN>8</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo_layer.c</FILENAME>
        <LINE>710</LINE>
        <COLUMN>14</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo_layer.c</FILENAME>
        <LINE>713</LINE>
        <COLUMN>8</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo_layer.c</FILENAME>
        <LINE>714</LINE>
        <COLUMN>15</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo_layer.c</FILENAME>
        <LINE>716</LINE>
        <COLUMN>28</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo_layer.c</FILENAME>
        <LINE>718</LINE>
        <COLUMN>11</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo_layer.c</FILENAME>
        <LINE>718</LINE>
        <COLUMN>18</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo_layer.c</FILENAME>
        <LINE>733</LINE>
        <COLUMN>11</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo_layer.c</FILENAME>
        <LINE>733</LINE>
        <COLUMN>18</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo_layer.c</FILENAME>
        <LINE>744</LINE>
        <COLUMN>8</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo_layer.c</FILENAME>
        <LINE>745</LINE>
        <COLUMN>8</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo_layer.c</FILENAME>
        <LINE>748</LINE>
        <COLUMN>8</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo_layer.c</FILENAME>
        <LINE>749</LINE>
        <COLUMN>14</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo_layer.c</FILENAME>
        <LINE>753</LINE>
        <COLUMN>79</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo_layer.c</FILENAME>
        <LINE>858</LINE>
        <COLUMN>14</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo_layer.c</FILENAME>
        <LINE>858</LINE>
        <COLUMN>26</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo_layer.c</FILENAME>
        <LINE>859</LINE>
        <COLUMN>20</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo_layer.c</FILENAME>
        <LINE>859</LINE>
        <COLUMN>38</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo_layer.c</FILENAME>
        <LINE>861</LINE>
        <COLUMN>23</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo_layer.c</FILENAME>
        <LINE>873</LINE>
        <COLUMN>12</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo_layer.c</FILENAME>
        <LINE>874</LINE>
        <COLUMN>15</COLUMN>
        <KEYEVENT>
          <ID>1</ID>
          <KIND>선언</KIND>
          <IMPORTANCE>Essential</IMPORTANCE>
          <MESSAGE>'no_iou_loss_delta'은(는) NULL일 수 있습니다.</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo_layer.c</FILENAME>
        <LINE>875</LINE>
        <COLUMN>14</COLUMN>
        <KEYEVENT>
          <ID>2</ID>
          <KIND>선언</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>'no_iou_loss_delta'은(는) 'memcpy'(&lt;no file&gt;:0에서 선언됨)에 대한 In/Out 인수입니다.</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
        <FILENAME>yolo_layer.c</FILENAME>
        <LINE>875</LINE>
        <COLUMN>14</COLUMN>
        <KEYEVENT>
          <ID>3</ID>
          <KIND>사용법</KIND>
          <IMPORTANCE>Essential</IMPORTANCE>
          <MESSAGE>'no_iou_loss_delta'은(는) NULL(이)면 안 됩니다. 이는 'memcpy'의 SAL 주석과 일치하지 않습니다.</MESSAGE>
        </KEYEVENT>
      </SFA>
    </PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>yolo_layer.c</FILENAME>
      <LINE>667</LINE>
      <COLUMN>43</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>forward_yolo_layer</FUNCTION>
    <DECORATED>forward_yolo_layer</DECORATED>
    <FUNCLINE>664</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>yolo_layer.c</FILENAME>
      <LINE>682</LINE>
      <COLUMN>69</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '-' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '-' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>forward_yolo_layer</FUNCTION>
    <DECORATED>forward_yolo_layer</DECORATED>
    <FUNCLINE>664</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>yolo_layer.c</FILENAME>
      <LINE>688</LINE>
      <COLUMN>33</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>forward_yolo_layer</FUNCTION>
    <DECORATED>forward_yolo_layer</DECORATED>
    <FUNCLINE>664</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>yolo_layer.c</FILENAME>
      <LINE>793</LINE>
      <COLUMN>46</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '-' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '-' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>forward_yolo_layer</FUNCTION>
    <DECORATED>forward_yolo_layer</DECORATED>
    <FUNCLINE>664</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>yolo_layer.c</FILENAME>
      <LINE>801</LINE>
      <COLUMN>92</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '-' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '-' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>forward_yolo_layer</FUNCTION>
    <DECORATED>forward_yolo_layer</DECORATED>
    <FUNCLINE>664</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>yolo_layer.c</FILENAME>
      <LINE>808</LINE>
      <COLUMN>139</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>forward_yolo_layer</FUNCTION>
    <DECORATED>forward_yolo_layer</DECORATED>
    <FUNCLINE>664</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>yolo_layer.c</FILENAME>
      <LINE>850</LINE>
      <COLUMN>157</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>forward_yolo_layer</FUNCTION>
    <DECORATED>forward_yolo_layer</DECORATED>
    <FUNCLINE>664</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>yolo_layer.c</FILENAME>
      <LINE>875</LINE>
      <COLUMN>51</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '*' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '*' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>forward_yolo_layer</FUNCTION>
    <DECORATED>forward_yolo_layer</DECORATED>
    <FUNCLINE>664</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>D:\Yolo_v4\darknet\src\</FILEPATH>
      <FILENAME>yolo_layer.c</FILENAME>
      <LINE>1085</LINE>
      <COLUMN>35</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>산술 오버플로: 4 바이트 값의 '+' 연산자를 사용한 다음 결과를 8 바이트 값에 캐스트합니다. 오버플로를 방지하려면 '+' 연산자를 호출하기 전에 더 광범위한 형식에 값을 캐스트합니다(io.2).</DESCRIPTION>
    <FUNCTION>avg_flipped_yolo</FUNCTION>
    <DECORATED>avg_flipped_yolo</DECORATED>
    <FUNCLINE>1063</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
</DEFECTS>